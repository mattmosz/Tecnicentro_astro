---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Facturación - TecniCentro Ibarra Express">
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/admin/dashboard" class="brand">
        <span class="logo-circle">🔧</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>
      <div class="user-menu">
        <span id="userWelcome" class="user-chip">Cargando…</span>
        <button
          type="button"
          id="btnLogout"
          class="btn btn-orange"
          onclick="window.logout?.()"
        >
          Cerrar Sesión
        </button>
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <div class="header-row">
        <div>
          <h1>Facturación</h1>
          <p class="muted">Emite facturas desde las órdenes completadas</p>
        </div>
      </div>

      <!-- KPIs de facturación -->
      <div class="section">
        <h2 class="section-title">Indicadores de facturación</h2>
        <div class="stats-grid">
          <article class="kpi-card kpi-orange">
            <div class="kpi-icon">💵</div>
            <div>
              <h3 id="kpiHoy" class="kpi-value">$0</h3>
              <p class="kpi-label">Ventas Hoy</p>
            </div>
          </article>
          <article class="kpi-card kpi-amber">
            <div class="kpi-icon">📅</div>
            <div>
              <h3 id="kpiMes" class="kpi-value">$0</h3>
              <p class="kpi-label">Ventas del Mes</p>
            </div>
          </article>
          <article class="kpi-card kpi-green">
            <div class="kpi-icon">🧾</div>
            <div>
              <h3 id="kpiNum" class="kpi-value">0</h3>
              <p class="kpi-label">Facturas del Mes</p>
            </div>
          </article>
        </div>
      </div>

      <!-- Pestañas -->
      <div class="tabs-wrapper">
        <div class="tabs">
          <button class="tab active" data-tab="pendientes"
            >Órdenes Pendientes</button
          >
          <button class="tab" data-tab="facturas">Facturas Emitidas</button>
        </div>
      </div>

      <!-- Contenido de órdenes pendientes -->
      <div id="tab-pendientes" class="tab-content active">
        <div class="card">
          <div class="card-head">
            <h3>Órdenes Listas para Facturar</h3>
            <span id="contadorPendientes" class="badge">0</span>
          </div>
          <div class="card-body">
            <div id="wrapOrdenes" class="table-wrap">
              <div class="skeleton"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Contenido de facturas emitidas -->
      <div id="tab-facturas" class="tab-content">
        <div class="card">
          <div class="card-head">
            <h3>Facturas Emitidas</h3>
            <div class="card-actions">
              <input
                id="qFacturas"
                class="input"
                placeholder="Buscar por número o cliente"
              />
              <button class="btn btn-outline" id="btnBuscarFacturas"
                >Buscar</button
              >
            </div>
          </div>
          <div class="card-body">
            <div id="wrapFacturas" class="table-wrap">
              <div class="skeleton"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Modal para confirmar facturación -->
  <dialog id="modalFacturar">
    <form id="frmFacturar" method="dialog" class="modal">
      <div class="modal-head">
        <h3>Confirmar Facturación</h3>
        <button class="icon" type="button" id="closeFacturar">✖</button>
      </div>
      <div class="modal-body">
        <div id="resumenOrden"></div>
        <div class="form-group">
          <label>Tipo de Factura</label>
          <select name="tipo_factura" class="input" required>
            <option value="general">General</option>
            <option value="consumidor_final">Consumidor Final</option>
          </select>
        </div>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" value="cancel">Cancelar</button>
        <button class="btn btn-orange" id="btnConfirmarFactura" value="default"
          >Generar Factura</button
        >
      </div>
    </form>
  </dialog>

  <!-- Modal para ver detalle de factura -->
  <dialog id="modalDetalleFactura">
    <div class="modal large">
      <div class="modal-head">
        <h3>Detalle de Factura</h3>
        <button class="icon" type="button" id="closeDetalle">✖</button>
      </div>
      <div class="modal-body">
        <div class="detalle-grid">
          <div class="info-section">
            <h4>Información de la Factura</h4>
            <p><strong>Número:</strong> <span id="facturaNumero">-</span></p>
            <p><strong>Fecha:</strong> <span id="facturaFecha">-</span></p>
            <p><strong>Cliente:</strong> <span id="facturaCliente">-</span></p>
            <p>
              <strong>Vehículo:</strong>
              <span id="facturaVehiculo">-</span>
            </p>
          </div>

          <div class="servicios-section">
            <h4>Servicios Realizados</h4>
            <div class="table-wrap">
              <table>
                <thead>
                  <tr>
                    <th>Servicio</th>
                    <th>Cantidad</th>
                    <th>Precio Unit.</th>
                    <th>Total</th>
                  </tr>
                </thead>
                <tbody id="detalleServicios">
                </tbody>
              </table>
            </div>

            <div class="totales-section">
              <div class="totales-row">
                <strong
                  >Subtotal: <span id="facturaSubtotal">$0.00</span></strong
                >
              </div>
              <div class="totales-row">
                <strong>IVA (15%): <span id="facturaIva">$0.00</span></strong>
              </div>
              <div class="totales-row total-final">
                <strong>TOTAL: <span id="facturaTotal">$0.00</span></strong>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" id="btnCerrarDetalle">Cerrar</button>
      </div>
    </div>
  </dialog>
  <style is:global>
/* ===== Facturación – estilos globales sin depender de body.facturacion ===== */

/* Vars */
:root{
  --container: 1200px;
  --bg: #f8fafc;
  --card: #fff;
  --text: #1a1a1a;
  --muted: #6b7280;
  --border: #e6eaf1;
  --border-2: #edf1f6;
  --blue-700: #1e3a8a;
  --blue-500: #3b82f6;
  --orange: #ff4500;
  --green: #22c55e;
  --red: #ef4444;
}

/* Página base */
.page{ padding:24px 0 40px; background:var(--bg); }
.container{ max-width:var(--container); margin:0 auto; padding:0 20px; }
.muted{ color:var(--muted); }

/* Navbar */
.navbar{
  position: sticky; top:0; z-index:50;
  background: linear-gradient(135deg,var(--blue-700) 0%,var(--blue-500) 100%);
  color:#fff; box-shadow:0 6px 18px rgba(2,6,23,.12);
}
.navbar .container{ display:flex; align-items:center; gap:16px; padding:10px 20px; }
.brand{ display:inline-flex; align-items:center; gap:10px; color:#fff; text-decoration:none; font-weight:700; }
.logo-circle{
  width:36px; height:36px; display:grid; place-items:center;
  border-radius:50%; background:rgba(255,255,255,.15);
  box-shadow: inset 0 0 0 1px rgba(255,255,255,.25);
}
.brand-text{ color:#fff; }
.user-menu{ margin-left:auto; display:inline-flex; gap:12px; align-items:center; }
.user-chip{
  padding:8px 12px; border-radius:999px; background:rgba(255,255,255,.15);
  border:1px solid rgba(255,255,255,.25); color:#fff; font-weight:600; font-size:.875rem;
  backdrop-filter:saturate(140%) blur(2px);
}
#btnLogout{ background:var(--red); color:#fff; border:0; border-radius:999px; padding:8px 14px; font-weight:700;
  box-shadow:0 6px 14px rgba(239,68,68,.22); cursor:pointer; transition:transform .12s,box-shadow .12s; }
#btnLogout:hover{ transform:translateY(-1px); box-shadow:0 10px 22px rgba(239,68,68,.28); }

/* Header de página */
.header-row{ display:flex; justify-content:space-between; align-items:flex-start; gap:16px; margin:8px 0 14px; }
.header-row h1{ margin:0 0 6px; font-size:2rem; font-weight:800; color:#0f172a; }

/* Botones/inputs */
.btn{ border:0; border-radius:10px; padding:10px 14px; font-weight:600; cursor:pointer; font-size:.9rem; }
.btn-orange{ background:var(--orange); color:#fff; }
.btn-outline{ background:#fff; border:1px solid var(--border); color:var(--text); }
.input{
  border:1px solid var(--border); border-radius:10px; padding:10px 12px;
  min-width:220px; font-size:.9rem; background:#fff; color:var(--text);
}
.input:focus{ outline:none; border-color:var(--blue-500); box-shadow:0 0 0 3px rgba(59,130,246,.15); }

/* Cards */
.card{ background:var(--card); border:1px solid var(--border); border-radius:14px; box-shadow:0 8px 22px rgba(2,6,23,.06); overflow:hidden; }
.card-head{ display:flex; align-items:center; justify-content:space-between; padding:16px 18px; background:#fafbfc; border-bottom:1px solid var(--border-2); }
.card-head h3{ margin:0; font-size:1.125rem; font-weight:700; color:#0f172a; }
.card-body{ padding:16px 18px 18px; }
.card-actions{ display:flex; gap:12px; align-items:center; }
.badge{ display:inline-block; min-width:24px; text-align:center; background:var(--orange); color:#fff; padding:4px 10px; border-radius:16px; font-size:.75rem; font-weight:700; }

/* Tabs */
.tabs-wrapper{ margin:24px 0 16px; }
.tabs{ display:flex; gap:8px; border-bottom:1px solid var(--border-2); }
.tab{ padding:12px 18px; border:0; background:transparent; cursor:pointer; color:var(--muted);
  border-bottom:3px solid transparent; border-radius:10px 10px 0 0; font-weight:700; transition:color .15s,background .15s,border-color .15s; }
.tab:hover{ color:#0f172a; background:#f3f4f6; }
.tab.active{ color:var(--blue-700); background:#fff; border-bottom-color:var(--blue-700); }
.tab-content{ display:none; }
.tab-content.active{ display:block; }

/* KPIs */
.section{ margin:14px 0 24px; }
.section-title{ font-size:1.05rem; font-weight:800; color:#0f172a; margin:0 0 10px; display:flex; align-items:center; gap:8px; }
.section-title::before{ content:'📊'; font-size:1.3rem; }
.stats-grid{ display:grid; grid-template-columns:repeat(auto-fit,minmax(260px,1fr)); gap:18px; }
.kpi-card{ background:#fff; border:1px solid var(--border); border-radius:14px; padding:18px; display:flex; align-items:center; gap:14px;
  box-shadow:0 8px 22px rgba(2,6,23,.06); transition:transform .12s, box-shadow .12s; }
.kpi-card:hover{ transform:translateY(-2px); box-shadow:0 12px 28px rgba(2,6,23,.1); }
.kpi-card.kpi-orange{ border-left:4px solid var(--orange); }
.kpi-card.kpi-amber{ border-left:4px solid #f59e0b; }
.kpi-card.kpi-green{ border-left:4px solid #10b981; }
.kpi-icon{ font-size:28px; opacity:.85; }
.kpi-value{ margin:0; font-size:1.5rem; font-weight:800; color:#0f172a; }
.kpi-label{ margin:2px 0 0; color:var(--muted); font-weight:600; font-size:.85rem; }

/* Tabla */
.table-wrap{ overflow:auto; border:1px solid var(--border); border-radius:10px; }
.table-wrap table{ width:100%; border-collapse:collapse; background:#fff; }
.table-wrap thead th{ background:#f8fafc; color:#0f172a; font-weight:700; font-size:.82rem; letter-spacing:.02em; text-transform:uppercase;
  text-align:left; padding:14px 12px; border-bottom:2px solid var(--border); }
.table-wrap tbody td{ padding:14px 12px; border-bottom:1px solid var(--border-2); font-size:.95rem; vertical-align:top; }
.table-wrap tbody tr:hover{ background:#f6f9ff; }
.row-actions{ display:flex; gap:10px; align-items:center; }
.icon-btn{ background:#fff; border:1px solid var(--border); border-radius:10px; padding:8px 12px; font-size:.85rem; font-weight:600; cursor:pointer;
  transition:transform .12s, box-shadow .12s, border-color .12s, color .12s; }
.icon-btn:hover{ transform:translateY(-1px); border-color:#c7d2fe; box-shadow:0 8px 18px rgba(2,6,23,.06); color:#1e40af; }
.btn-facturar{ background:var(--green); color:#fff; border:0; border-radius:10px; padding:8px 14px; font-weight:800;
  box-shadow:0 8px 18px rgba(34,197,94,.22); }
.btn-facturar:hover{ transform:translateY(-1px); background:#16a34a; }

/* Skeleton */
.skeleton{ height:160px; border-radius:10px;
  background:linear-gradient(90deg,#f2f4f8 25%, #e6eaf1 37%, #f2f4f8 63%); background-size:400% 100%; animation:sk 1.2s infinite; }
@keyframes sk{ 0%{background-position:100% 0} 100%{background-position:0 0} }

/* Modales */
dialog::backdrop{ background:rgba(0,0,0,.32); }
dialog{ border:0; border-radius:14px; padding:0; box-shadow:0 24px 50px rgba(2,6,23,.3); }
.modal{ background:#fff; border-radius:14px; overflow:hidden; }
.modal.large{ max-width:800px; width:92vw; }
.modal-head{ display:flex; align-items:center; justify-content:space-between; padding:14px 16px; background:#fafbfc; border-bottom:1px solid var(--border-2); }
.modal-head h3{ margin:0; font-size:1.1rem; font-weight:800; color:#0f172a; }
.icon{ background:none; border:0; font-size:1.2rem; cursor:pointer; color:var(--muted); padding:6px; border-radius:6px; }
.icon:hover{ background:#f1f5f9; color:#0f172a; }
.modal-body{ padding:16px; }
.modal-foot{ display:flex; justify-content:flex-end; gap:10px; padding:14px 16px; border-top:1px solid var(--border-2); }
.resumen-orden{ background:#f8fafc; border:1px solid var(--border-2); border-radius:10px; padding:16px; margin-bottom:16px; }
.resumen-orden h4{ margin:0 0 12px; color:var(--blue-700); font-size:1rem; font-weight:800; }
.resumen-row{ display:flex; justify-content:space-between; padding:6px 0; }
.resumen-row span:first-child{ color:var(--muted); font-weight:600; }
.resumen-row:last-child{ border-top:2px solid var(--border-2); margin-top:10px; padding-top:10px; color:var(--blue-700); font-weight:800; }
.detalle-grid{ display:grid; grid-template-columns:1fr; gap:18px; }
@media (min-width:820px){ .detalle-grid{ grid-template-columns:1fr 2fr; } }
.info-section,.servicios-section{ background:#f8fafc; border:1px solid var(--border-2); border-radius:10px; padding:16px; }
.info-section h4,.servicios-section h4{ margin:0 0 10px; color:var(--blue-700); font-size:1rem; font-weight:800; border-bottom:2px solid var(--blue-500); padding-bottom:6px; }
.totales-section{ margin-top:10px; padding-top:10px; border-top:2px solid var(--border-2); }
.totales-row{ display:flex; justify-content:space-between; padding:6px 0; }
.totales-row.total-final{ background:var(--blue-700); color:#fff; border-radius:8px; padding:10px 12px; font-weight:900; }
</style>

  <script>
    // Función de logout
    function _hardLogout() {
      try {
        localStorage.removeItem("token");
        localStorage.removeItem("user");
      } finally {
        location.replace("/");
      }
    }
    window.logout = _hardLogout;

    // Verificación de autenticación
    document.addEventListener("click", (e) => {
      const b = e.target.closest("#btnLogout");
      if (!b) return;
      e.preventDefault();
      _hardLogout();
    });

    // Inicialización
    (async () => {
      const token = localStorage.getItem("token");
      const user = localStorage.getItem("user");
      if (!token || !user) return _hardLogout();

      try {
        const response = await fetch("/api/auth/verify", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json().catch(() => ({}));
        if (!response.ok || !result?.success) return _hardLogout();
      } catch {
        return _hardLogout();
      }

      const userData = JSON.parse(user);
      if (userData.rol !== "admin") return _hardLogout();

      const welcomeEl = document.getElementById("userWelcome");
      if (welcomeEl) welcomeEl.textContent = `Bienvenido, ${userData.nombre}`;

      await loadKPIs();
      await loadOrdenesPendientes();
      setupTabs();
    })();

    // Formateo de moneda
    const money = new Intl.NumberFormat("es-EC", {
      style: "currency",
      currency: "USD",
    });

    // Cargar KPIs
    async function loadKPIs() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas/kpis", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        if (result.success) {
          const { hoy, mes, num } = result.data;
          const kpiHoy = document.getElementById("kpiHoy");
          const kpiMes = document.getElementById("kpiMes");
          const kpiNum = document.getElementById("kpiNum");

          if (kpiHoy) kpiHoy.textContent = money.format(hoy || 0);
          if (kpiMes) kpiMes.textContent = money.format(mes || 0);
          if (kpiNum) kpiNum.textContent = String(num || 0);
        }
      } catch (error) {
        console.error("Error al cargar KPIs:", error);
      }
    }

    // Cargar órdenes pendientes
    async function loadOrdenesPendientes() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas/ordenes-pendientes", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        const wrap = document.getElementById("wrapOrdenes");
        const contador = document.getElementById("contadorPendientes");

        if (!wrap) return;

        if (!result.success || !result.data.length) {
          wrap.innerHTML =
            '<div class="muted">No hay órdenes pendientes de facturación</div>';
          if (contador) contador.textContent = "0";
          return;
        }

        const ordenes = result.data;
        if (contador) contador.textContent = String(ordenes.length);

        wrap.innerHTML = `
          <table>
            <thead>
              <tr>
                <th>Orden #</th>
                <th>Cliente</th>
                <th>Vehículo</th>
                <th>Servicios</th>
                <th>Total</th>
                <th>Fecha</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              ${ordenes
                .map(
                  (orden) => `
                <tr>
                  <td>#${orden.id}</td>
                  <td>
                    <strong>${orden.cliente_nombre}</strong><br>
                    <small class="muted">${orden.identificacion}</small>
                  </td>
                  <td>
                    ${orden.marca}<br>
                    <small class="muted">${orden.placa}</small>
                  </td>
                  <td>${orden.num_servicios} servicio(s)</td>
                  <td><strong>${money.format(orden.total)}</strong></td>
                  <td>${new Date(orden.fecha_ingreso).toLocaleDateString("es-EC")}</td>
                  <td>
                    <button class="btn-facturar" data-orden="${orden.id}">
                      Facturar
                    </button>
                  </td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error("Error al cargar órdenes pendientes:", error);
        const wrap = document.getElementById("wrapOrdenes");
        if (wrap)
          wrap.innerHTML = '<div class="muted">Error al cargar órdenes</div>';
      }
    }

    // Cargar facturas emitidas
    async function loadFacturas() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        const wrap = document.getElementById("wrapFacturas");
        if (!wrap) return;

        if (!result.success || !result.data.length) {
          wrap.innerHTML = '<div class="muted">No hay facturas emitidas</div>';
          return;
        }

        const facturas = result.data;

        wrap.innerHTML = `
          <table>
            <thead>
              <tr>
                <th>Número</th>
                <th>Cliente</th>
                <th>Vehículo</th>
                <th>Total</th>
                <th>Fecha</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              ${facturas
                .map(
                  (factura) => `
                <tr>
                  <td><strong>${factura.numero_factura}</strong></td>
                  <td>
                    ${factura.cliente_nombre}<br>
                    <small class="muted">${factura.identificacion}</small>
                  </td>
                  <td>
                    ${factura.marca}<br>
                    <small class="muted">${factura.placa}</small>
                  </td>
                  <td><strong>${money.format(factura.total)}</strong></td>
                  <td>${new Date(factura.fecha_emision).toLocaleDateString("es-EC")}</td>
                  <td>
                    <div class="row-actions">
                      <button class="icon-btn" data-detalle="${factura.id}">👁️ Ver</button>
                      <button class="icon-btn" data-pdf="${factura.id}">📄 PDF</button>
                    </div>
                  </td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error("Error al cargar facturas:", error);
        const wrap = document.getElementById("wrapFacturas");
        if (wrap)
          wrap.innerHTML = '<div class="muted">Error al cargar facturas</div>';
      }
    }

    // Setup de pestañas
    function setupTabs() {
      const tabs = document.querySelectorAll(".tab");
      const contents = document.querySelectorAll(".tab-content");

      tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          const targetTab = tab.dataset.tab;

          // Remover clase active de todas las pestañas y contenidos
          tabs.forEach((t) => t.classList.remove("active"));
          contents.forEach((c) => c.classList.remove("active"));

          // Agregar clase active a la pestaña clickeada y su contenido
          tab.classList.add("active");
          const targetContent = document.getElementById(`tab-${targetTab}`);
          if (targetContent) targetContent.classList.add("active");

          // Cargar contenido si es necesario
          if (targetTab === "facturas") {
            loadFacturas();
          }
        });
      });
    }

    // Event listeners para facturación
    document.addEventListener("click", async (e) => {
      const btnFacturar = e.target.closest("[data-orden]");
      if (btnFacturar) {
        const ordenId = btnFacturar.dataset.orden;
        if (ordenId) await mostrarModalFacturar(ordenId);
        return;
      }

      const btnDetalle = e.target.closest("[data-detalle]");
      if (btnDetalle) {
        const facturaId = btnDetalle.dataset.detalle;
        if (facturaId) await mostrarDetalleFactura(facturaId);
        return;
      }

      const btnPdf = e.target.closest("[data-pdf]");
      if (btnPdf) {
        const facturaId = btnPdf.dataset.pdf;
        if (facturaId) generarPdfFactura(facturaId);
        return;
      }
    });

    // Modal de facturación
    let ordenActual = null;

    async function mostrarModalFacturar(ordenId) {
      const token = localStorage.getItem("token");
      try {
        // Obtener detalles de la orden
        const response = await fetch(`/api/ordenes/${ordenId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        if (!result.success) {
          alert("Error al cargar detalles de la orden");
          return;
        }

        ordenActual = result.data;

        // Debug: ver qué datos estamos recibiendo
        console.log("Datos de la orden:", ordenActual);

        // Mostrar resumen en el modal
        const resumenEl = document.getElementById("resumenOrden");
        if (resumenEl) {
          resumenEl.innerHTML = `
            <div class="resumen-orden">
              <h4>Orden #${ordenActual.id}</h4>
              <div class="resumen-row">
                <span>Cliente:</span>
                <span>${ordenActual.cliente_nombre || "No disponible"}</span>
              </div>
              <div class="resumen-row">
                <span>Vehículo:</span>
                <span>${ordenActual.marca || "No disponible"} (${ordenActual.placa || "No disponible"})</span>
              </div>
              <div class="resumen-row">
                <span>Subtotal:</span>
                <span>${money.format(ordenActual.subtotal || 0)}</span>
              </div>
              <div class="resumen-row">
                <span>IVA (15%):</span>
                <span>${money.format(ordenActual.iva || 0)}</span>
              </div>
              <div class="resumen-row">
                <span>Total:</span>
                <span>${money.format(ordenActual.total || 0)}</span>
              </div>
            </div>
          `;
        }

        const modal = document.getElementById("modalFacturar");
        if (modal && modal.showModal) modal.showModal();
      } catch (error) {
        console.error("Error:", error);
        alert("Error al cargar detalles de la orden");
      }
    }

    async function mostrarDetalleFactura(facturaId) {
      try {
        const token = localStorage.getItem("token");
        const response = await fetch(`/api/facturas/detalle/${facturaId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (response.ok) {
          const result = await response.json();
          const factura = result.data;

          // Llenar el modal con los datos de la factura
          document.getElementById("facturaNumero").textContent =
            factura.numero_factura;
          document.getElementById("facturaFecha").textContent = new Date(
            factura.fecha_emision
          ).toLocaleDateString();
          document.getElementById("facturaCliente").textContent =
            factura.cliente_nombre;
          document.getElementById("facturaVehiculo").textContent =
            `${factura.marca} (${factura.placa})`;

          // Mostrar detalles de servicios
          let detallesHtml = "";
          let subtotal = 0;

          factura.detalles.forEach((detalle) => {
            const cantidad = parseInt(detalle.cantidad) || 0;
            const precioUnitario = parseFloat(detalle.precio_unitario) || 0;
            const total = cantidad * precioUnitario;
            subtotal += total;
            detallesHtml += `
              <tr>
                <td>${detalle.servicio_nombre}</td>
                <td>${cantidad}</td>
                <td>$${precioUnitario.toFixed(2)}</td>
                <td>$${total.toFixed(2)}</td>
              </tr>
            `;
          });

          const iva = subtotal * 0.15;
          const total = subtotal + iva;

          document.getElementById("detalleServicios").innerHTML = detallesHtml;
          document.getElementById("facturaSubtotal").textContent =
            `$${subtotal.toFixed(2)}`;
          document.getElementById("facturaIva").textContent =
            `$${iva.toFixed(2)}`;
          document.getElementById("facturaTotal").textContent =
            `$${total.toFixed(2)}`;

          // Mostrar el modal
          const modal = document.getElementById("modalDetalleFactura");
          if (modal && modal.showModal) modal.showModal();
        } else {
          alert("Error al cargar los detalles de la factura");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("Error al cargar los detalles de la factura");
      }
    }

    function generarPdfFactura(facturaId) {
      try {
        const token = localStorage.getItem("token");
        const url = `/api/facturas/pdf/${facturaId}`;

        // Abrir el PDF en una nueva ventana
        const ventanaPdf = window.open("", "_blank");
        if (ventanaPdf) {
          ventanaPdf.document.write(
            '<div style="text-align: center; padding: 50px;">Generando PDF...</div>'
          );

          fetch(url, {
            headers: { Authorization: `Bearer ${token}` },
          })
            .then((response) => {
              if (response.ok) {
                return response.text();
              }
              throw new Error("Error al generar PDF");
            })
            .then((html) => {
              ventanaPdf.document.open();
              ventanaPdf.document.write(html);
              ventanaPdf.document.close();

              // Agregar función de impresión automática
              ventanaPdf.onload = () => {
                setTimeout(() => {
                  ventanaPdf.print();
                }, 500);
              };
            })
            .catch((error) => {
              console.error("Error:", error);
              ventanaPdf.document.write(
                '<div style="text-align: center; padding: 50px; color: red;">Error al generar el PDF</div>'
              );
            });
        } else {
          alert(
            "No se pudo abrir la ventana del PDF. Verifique que no esté bloqueada por el navegador."
          );
        }
      } catch (error) {
        console.error("Error al generar PDF:", error);
        alert("Error al generar el PDF");
      }
    }

    // Confirmar facturación
    const btnConfirmar = document.getElementById("btnConfirmarFactura");
    if (btnConfirmar) {
      btnConfirmar.addEventListener("click", async () => {
        if (!ordenActual) return;

        const token = localStorage.getItem("token");
        const tipoSelect = document.querySelector('[name="tipo_factura"]');
        const tipoFactura = tipoSelect ? tipoSelect.value : "general";

        try {
          const response = await fetch(
            `/api/facturas/desde-orden/${ordenActual.id}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({ tipo_factura: tipoFactura }),
            }
          );

          const result = await response.json();

          if (result.success) {
            alert(`Factura ${result.numero_factura} generada exitosamente`);
            const modal = document.getElementById("modalFacturar");
            if (modal && modal.close) modal.close();
            await loadKPIs();
            await loadOrdenesPendientes();
          } else {
            alert(result.message || "Error al generar factura");
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error al generar factura");
        }
      });
    }

    // Cerrar modales
    const closeFacturar = document.getElementById("closeFacturar");
    if (closeFacturar) {
      closeFacturar.addEventListener("click", () => {
        const modal = document.getElementById("modalFacturar");
        if (modal && modal.close) modal.close();
      });
    }

    const closeDetalle = document.getElementById("closeDetalle");
    if (closeDetalle) {
      closeDetalle.addEventListener("click", () => {
        const modal = document.getElementById("modalDetalleFactura");
        if (modal && modal.close) modal.close();
      });
    }

    const btnCerrarDetalle = document.getElementById("btnCerrarDetalle");
    if (btnCerrarDetalle) {
      btnCerrarDetalle.addEventListener("click", () => {
        const modal = document.getElementById("modalDetalleFactura");
        if (modal && modal.close) modal.close();
      });
    }
  </script>
  
</Layout>
