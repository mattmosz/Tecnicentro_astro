---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Facturación - TecniCentro Ibarra Express">
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/admin/dashboard" class="brand">
        <span class="logo-circle">🔧</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>
      <div class="user-menu">
        <span id="userWelcome" class="user-chip">Cargando…</span>
        <button
          type="button"
          id="btnLogout"
          class="btn btn-orange"
          onclick="window.logout?.()"
        >
          Cerrar Sesión
        </button>
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <div class="header-row">
        <div>
          <h1>Facturación</h1>
          <p class="muted">Emite facturas desde las órdenes completadas</p>
        </div>
      </div>

      <!-- KPIs de facturación -->
      <div class="section">
        <h2 class="section-title">Indicadores de facturación</h2>
        <div class="stats-grid">
          <article class="kpi-card kpi-orange">
            <div class="kpi-icon">💵</div>
            <div>
              <h3 id="kpiHoy" class="kpi-value">$0</h3>
              <p class="kpi-label">Ventas Hoy</p>
            </div>
          </article>
          <article class="kpi-card kpi-amber">
            <div class="kpi-icon">📅</div>
            <div>
              <h3 id="kpiMes" class="kpi-value">$0</h3>
              <p class="kpi-label">Ventas del Mes</p>
            </div>
          </article>
          <article class="kpi-card kpi-green">
            <div class="kpi-icon">🧾</div>
            <div>
              <h3 id="kpiNum" class="kpi-value">0</h3>
              <p class="kpi-label">Facturas del Mes</p>
            </div>
          </article>
        </div>
      </div>

      <!-- Pestañas -->
      <div class="tabs-wrapper">
        <div class="tabs">
          <button class="tab active" data-tab="pendientes"
            >Órdenes Pendientes</button
          >
          <button class="tab" data-tab="facturas">Facturas Emitidas</button>
        </div>
      </div>

      <!-- Contenido de órdenes pendientes -->
      <div id="tab-pendientes" class="tab-content active">
        <div class="card">
          <div class="card-head">
            <h3>Órdenes Listas para Facturar</h3>
            <span id="contadorPendientes" class="badge">0</span>
          </div>
          <div class="card-body">
            <div id="wrapOrdenes" class="table-wrap">
              <div class="skeleton"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- Contenido de facturas emitidas -->
      <div id="tab-facturas" class="tab-content">
        <div class="card">
          <div class="card-head">
            <h3>Facturas Emitidas</h3>
            <div class="card-actions">
              <input
                id="qFacturas"
                class="input"
                placeholder="Buscar por número o cliente"
              />
              <button class="btn btn-outline" id="btnBuscarFacturas"
                >Buscar</button
              >
            </div>
          </div>
          <div class="card-body">
            <div id="wrapFacturas" class="table-wrap">
              <div class="skeleton"></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Modal para confirmar facturación -->
  <dialog id="modalFacturar">
    <form id="frmFacturar" method="dialog" class="modal">
      <div class="modal-head">
        <h3>Confirmar Facturación</h3>
        <button class="icon" type="button" id="closeFacturar">✖</button>
      </div>
      <div class="modal-body">
        <div id="resumenOrden"></div>
        <div class="form-group">
          <label>Tipo de Factura</label>
          <select name="tipo_factura" class="input" required>
            <option value="general">General</option>
            <option value="consumidor_final">Consumidor Final</option>
          </select>
        </div>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" value="cancel">Cancelar</button>
        <button class="btn btn-orange" id="btnConfirmarFactura" value="default"
          >Generar Factura</button
        >
      </div>
    </form>
  </dialog>

  <!-- Modal para ver detalle de factura -->
  <dialog id="modalDetalleFactura">
    <div class="modal large">
      <div class="modal-head">
        <h3>Detalle de Factura</h3>
        <button class="icon" type="button" id="closeDetalle">✖</button>
      </div>
      <div class="modal-body">
        <div class="detalle-grid">
          <div class="info-section">
            <h4>Información de la Factura</h4>
            <p><strong>Número:</strong> <span id="facturaNumero">-</span></p>
            <p><strong>Fecha:</strong> <span id="facturaFecha">-</span></p>
            <p><strong>Cliente:</strong> <span id="facturaCliente">-</span></p>
            <p>
              <strong>Vehículo:</strong>
              <span id="facturaVehiculo">-</span>
            </p>
          </div>

          <div class="servicios-section">
            <h4>Servicios Realizados</h4>
            <div class="table-wrap">
              <table>
                <thead>
                  <tr>
                    <th>Servicio</th>
                    <th>Cantidad</th>
                    <th>Precio Unit.</th>
                    <th>Total</th>
                  </tr>
                </thead>
                <tbody id="detalleServicios"> </tbody>
              </table>
            </div>

            <div class="totales-section">
              <div class="totales-row">
                <strong
                  >Subtotal: <span id="facturaSubtotal">$0.00</span></strong
                >
              </div>
              <div class="totales-row">
                <strong>IVA (15%): <span id="facturaIva">$0.00</span></strong>
              </div>
              <div class="totales-row total-final">
                <strong>TOTAL: <span id="facturaTotal">$0.00</span></strong>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" id="btnCerrarDetalle">Cerrar</button>
      </div>
    </div>
  </dialog>
  <style is:global>
    /* ===== Facturación – estilos globales sin depender de body.facturacion ===== */

    /* Vars */
    :root {
      --container: 1200px;
      --bg: #f8fafc;
      --card: #fff;
      --text: #1a1a1a;
      --muted: #6b7280;
      --border: #e6eaf1;
      --border-2: #edf1f6;
      --blue-700: #1e3a8a;
      --blue-500: #3b82f6;
      --orange: #ff4500;
      --green: #22c55e;
      --red: #ef4444;
    }

    /* Página base */
    .page {
      padding: 24px 0 40px;
      background: var(--bg);
    }
    .container {
      max-width: var(--container);
      margin: 0 auto;
      padding: 0 20px;
    }
    .muted {
      color: var(--muted);
    }

    /* Navbar */
    .navbar {
      position: sticky;
      top: 0;
      z-index: 50;
      background: linear-gradient(
        135deg,
        var(--blue-700) 0%,
        var(--blue-500) 100%
      );
      color: #fff;
      box-shadow: 0 6px 18px rgba(2, 6, 23, 0.12);
    }
    .navbar .container {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 10px 20px;
    }
    .brand {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      color: #fff;
      text-decoration: none;
      font-weight: 700;
    }
    .logo-circle {
      width: 36px;
      height: 36px;
      display: grid;
      place-items: center;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.15);
      box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.25);
    }
    .brand-text {
      color: #fff;
    }
    .user-menu {
      margin-left: auto;
      display: inline-flex;
      gap: 12px;
      align-items: center;
    }
    .user-chip {
      padding: 8px 12px;
      border-radius: 999px;
      background: rgba(255, 255, 255, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.25);
      color: #fff;
      font-weight: 600;
      font-size: 0.875rem;
      backdrop-filter: saturate(140%) blur(2px);
    }
    #btnLogout {
      background: var(--red);
      color: #fff;
      border: 0;
      border-radius: 999px;
      padding: 8px 14px;
      font-weight: 700;
      box-shadow: 0 6px 14px rgba(239, 68, 68, 0.22);
      cursor: pointer;
      transition:
        transform 0.12s,
        box-shadow 0.12s;
    }
    #btnLogout:hover {
      transform: translateY(-1px);
      box-shadow: 0 10px 22px rgba(239, 68, 68, 0.28);
    }

    /* Header de página */
    .header-row {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      gap: 16px;
      margin: 8px 0 14px;
    }
    .header-row h1 {
      margin: 0 0 6px;
      font-size: 2rem;
      font-weight: 800;
      color: #0f172a;
    }

    /* Botones/inputs */
    .btn {
      border: 0;
      border-radius: 10px;
      padding: 10px 14px;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.9rem;
    }
    .btn-orange {
      background: var(--orange);
      color: #fff;
    }
    .btn-outline {
      background: #fff;
      border: 1px solid var(--border);
      color: var(--text);
    }
    .input {
      border: 1px solid var(--border);
      border-radius: 10px;
      padding: 10px 12px;
      min-width: 220px;
      font-size: 0.9rem;
      background: #fff;
      color: var(--text);
    }
    .input:focus {
      outline: none;
      border-color: var(--blue-500);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    /* Cards */
    .card {
      background: var(--card);
      border: 1px solid var(--border);
      border-radius: 14px;
      box-shadow: 0 8px 22px rgba(2, 6, 23, 0.06);
      overflow: hidden;
    }
    .card-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px 18px;
      background: #fafbfc;
      border-bottom: 1px solid var(--border-2);
    }
    .card-head h3 {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 700;
      color: #0f172a;
    }
    .card-body {
      padding: 16px 18px 18px;
    }
    .card-actions {
      display: flex;
      gap: 12px;
      align-items: center;
    }
    .badge {
      display: inline-block;
      min-width: 24px;
      text-align: center;
      background: var(--orange);
      color: #fff;
      padding: 4px 10px;
      border-radius: 16px;
      font-size: 0.75rem;
      font-weight: 700;
    }

    /* Tabs */
    .tabs-wrapper {
      margin: 24px 0 16px;
    }
    .tabs {
      display: flex;
      gap: 8px;
      border-bottom: 1px solid var(--border-2);
    }
    .tab {
      padding: 12px 18px;
      border: 0;
      background: transparent;
      cursor: pointer;
      color: var(--muted);
      border-bottom: 3px solid transparent;
      border-radius: 10px 10px 0 0;
      font-weight: 700;
      transition:
        color 0.15s,
        background 0.15s,
        border-color 0.15s;
    }
    .tab:hover {
      color: #0f172a;
      background: #f3f4f6;
    }
    .tab.active {
      color: var(--blue-700);
      background: #fff;
      border-bottom-color: var(--blue-700);
    }
    .tab-content {
      display: none;
    }
    .tab-content.active {
      display: block;
    }

    /* KPIs */
    .section {
      margin: 14px 0 24px;
    }
    .section-title {
      font-size: 1.05rem;
      font-weight: 800;
      color: #0f172a;
      margin: 0 0 10px;
      display: flex;
      align-items: center;
      gap: 8px;
    }
    .section-title::before {
      content: "📊";
      font-size: 1.3rem;
    }
    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(260px, 1fr));
      gap: 18px;
    }
    .kpi-card {
      background: #fff;
      border: 1px solid var(--border);
      border-radius: 14px;
      padding: 18px;
      display: flex;
      align-items: center;
      gap: 14px;
      box-shadow: 0 8px 22px rgba(2, 6, 23, 0.06);
      transition:
        transform 0.12s,
        box-shadow 0.12s;
    }
    .kpi-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 12px 28px rgba(2, 6, 23, 0.1);
    }
    .kpi-card.kpi-orange {
      border-left: 4px solid var(--orange);
    }
    .kpi-card.kpi-amber {
      border-left: 4px solid #f59e0b;
    }
    .kpi-card.kpi-green {
      border-left: 4px solid #10b981;
    }
    .kpi-icon {
      font-size: 28px;
      opacity: 0.85;
    }
    .kpi-value {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 800;
      color: #0f172a;
    }
    .kpi-label {
      margin: 2px 0 0;
      color: var(--muted);
      font-weight: 600;
      font-size: 0.85rem;
    }

    /* Tabla */
    .table-wrap {
      overflow: auto;
      border: 1px solid var(--border);
      border-radius: 10px;
    }
    .table-wrap table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
    }
    .table-wrap thead th {
      background: #f8fafc;
      color: #0f172a;
      font-weight: 700;
      font-size: 0.82rem;
      letter-spacing: 0.02em;
      text-transform: uppercase;
      text-align: left;
      padding: 14px 12px;
      border-bottom: 2px solid var(--border);
    }
    .table-wrap tbody td {
      padding: 14px 12px;
      border-bottom: 1px solid var(--border-2);
      font-size: 0.95rem;
      vertical-align: top;
    }
    .table-wrap tbody tr:hover {
      background: #f6f9ff;
    }
    .row-actions {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .icon-btn {
      background: #fff;
      border: 1px solid var(--border);
      border-radius: 10px;
      padding: 8px 12px;
      font-size: 0.85rem;
      font-weight: 600;
      cursor: pointer;
      transition:
        transform 0.12s,
        box-shadow 0.12s,
        border-color 0.12s,
        color 0.12s;
    }
    .icon-btn:hover {
      transform: translateY(-1px);
      border-color: #c7d2fe;
      box-shadow: 0 8px 18px rgba(2, 6, 23, 0.06);
      color: #1e40af;
    }
    .btn-facturar {
      background: var(--green);
      color: #fff;
      border: 0;
      border-radius: 10px;
      padding: 8px 14px;
      font-weight: 800;
      box-shadow: 0 8px 18px rgba(34, 197, 94, 0.22);
    }
    .btn-facturar:hover {
      transform: translateY(-1px);
      background: #16a34a;
    }

    /* Skeleton */
    .skeleton {
      height: 160px;
      border-radius: 10px;
      background: linear-gradient(90deg, #f2f4f8 25%, #e6eaf1 37%, #f2f4f8 63%);
      background-size: 400% 100%;
      animation: sk 1.2s infinite;
    }
    @keyframes sk {
      0% {
        background-position: 100% 0;
      }
      100% {
        background-position: 0 0;
      }
    }

    /* Modales */
    dialog::backdrop {
      background: rgba(0, 0, 0, 0.32);
    }
    dialog {
      border: 0;
      border-radius: 14px;
      padding: 0;
      box-shadow: 0 24px 50px rgba(2, 6, 23, 0.3);
    }
    .modal {
      background: #fff;
      border-radius: 14px;
      overflow: hidden;
    }
    .modal.large {
      max-width: 800px;
      width: 92vw;
    }
    .modal-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 14px 16px;
      background: #fafbfc;
      border-bottom: 1px solid var(--border-2);
    }
    .modal-head h3 {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 800;
      color: #0f172a;
    }
    .icon {
      background: none;
      border: 0;
      font-size: 1.2rem;
      cursor: pointer;
      color: var(--muted);
      padding: 6px;
      border-radius: 6px;
    }
    .icon:hover {
      background: #f1f5f9;
      color: #0f172a;
    }
    .modal-body {
      padding: 16px;
    }
    .modal-foot {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 14px 16px;
      border-top: 1px solid var(--border-2);
    }
    .resumen-orden {
      background: #f8fafc;
      border: 1px solid var(--border-2);
      border-radius: 10px;
      padding: 16px;
      margin-bottom: 16px;
    }
    .resumen-orden h4 {
      margin: 0 0 12px;
      color: var(--blue-700);
      font-size: 1rem;
      font-weight: 800;
    }
    .resumen-row {
      display: flex;
      justify-content: space-between;
      padding: 6px 0;
    }
    .resumen-row span:first-child {
      color: var(--muted);
      font-weight: 600;
    }
    .resumen-row:last-child {
      border-top: 2px solid var(--border-2);
      margin-top: 10px;
      padding-top: 10px;
      color: var(--blue-700);
      font-weight: 800;
    }
    .detalle-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 18px;
    }
    @media (min-width: 820px) {
      .detalle-grid {
        grid-template-columns: 1fr 2fr;
      }
    }
    .info-section,
    .servicios-section {
      background: #f8fafc;
      border: 1px solid var(--border-2);
      border-radius: 10px;
      padding: 16px;
    }
    .info-section h4,
    .servicios-section h4 {
      margin: 0 0 10px;
      color: var(--blue-700);
      font-size: 1rem;
      font-weight: 800;
      border-bottom: 2px solid var(--blue-500);
      padding-bottom: 6px;
    }
    .totales-section {
      margin-top: 10px;
      padding-top: 10px;
      border-top: 2px solid var(--border-2);
    }
    .totales-row {
      display: flex;
      justify-content: space-between;
      padding: 6px 0;
    }
    .totales-row.total-final {
      background: var(--blue-700);
      color: #fff;
      border-radius: 8px;
      padding: 10px 12px;
      font-weight: 900;
    }

    /* ===== Mejora visual del modal de Facturación ===== */
    #modalFacturar .modal {
      max-width: 560px;
      width: 92vw;
      border: 1px solid var(--border);
      border-radius: 16px;
      overflow: hidden;
      box-shadow: 0 24px 60px rgba(2, 6, 23, 0.28);
    }
    #modalFacturar .modal-head {
      position: sticky;
      top: 0;
      z-index: 2;
      background: #fff;
      border-bottom: 1px solid var(--border-2);
      padding: 16px 18px;
    }
    #modalFacturar .modal-head h3 {
      margin: 0;
      font-size: 1.1rem;
      font-weight: 800;
      color: #0f172a;
    }
    #modalFacturar .modal-body {
      padding: 14px 16px;
      max-height: min(72vh, 640px);
      overflow: auto;
    }
    #modalFacturar .modal-foot {
      position: sticky;
      bottom: 0;
      z-index: 2;
      background: #fff;
      border-top: 1px solid var(--border-2);
      padding: 12px 16px;
      gap: 10px;
    }

    .factu-summary {
      display: grid;
      gap: 12px;
    }
    .factu-row {
      display: flex;
      justify-content: space-between;
      gap: 12px;
      padding: 6px 0;
    }
    .factu-row .k {
      color: var(--muted);
      font-weight: 600;
    }
    .factu-chip {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 6px 10px;
      border-radius: 999px;
      background: #f1f5ff;
      color: #1e3a8a;
      font-weight: 800;
      font-size: 0.85rem;
      border: 1px solid #dbeafe;
    }
    .factu-badge {
      display: inline-flex;
      align-items: center;
      padding: 6px 10px;
      border-radius: 8px;
      background: #fff7ed;
      color: #9a3412;
      border: 1px solid #fed7aa;
      font-weight: 800;
      font-size: 0.75rem;
    }

    .factu-list {
      border: 1px solid var(--border-2);
      border-radius: 12px;
      overflow: hidden;
      background: #fff;
    }
    .factu-list .head,
    .factu-list .row {
      display: grid;
      grid-template-columns: 1fr auto auto auto;
      gap: 10px;
      padding: 10px 12px;
    }
    .factu-list .head {
      background: #f8fafc;
      border-bottom: 1px solid var(--border-2);
      color: #0f172a;
      font-weight: 800;
      font-size: 0.8rem;
      text-transform: uppercase;
    }
    .factu-list .row {
      border-bottom: 1px solid var(--border-2);
    }
    .factu-list .row:last-child {
      border-bottom: 0;
    }
    .factu-list .mono {
      font-variant-numeric: tabular-nums;
    }

    .factu-totals {
      margin-top: 10px;
      border-top: 2px dashed var(--border);
      padding-top: 10px;
      display: grid;
      gap: 6px;
    }
    .factu-totals .pair {
      display: flex;
      justify-content: space-between;
    }
    .factu-totals .pair strong {
      font-weight: 800;
    }
    .factu-total {
      margin-top: 6px;
      padding: 10px 12px;
      border-radius: 10px;
      background: var(--blue-700);
      color: #fff;
      font-weight: 900;
      display: flex;
      justify-content: space-between;
    }

    #modalFacturar .form-group {
      margin-top: 10px;
    }
    #modalFacturar select.input {
      width: 100%;
    }

    /* Botones más “call to action” */
    #modalFacturar .btn-orange {
      font-weight: 900;
      padding: 10px 16px;
      box-shadow: 0 10px 22px rgba(255, 69, 0, 0.2);
    }
    #modalFacturar .btn-orange:hover {
      transform: translateY(-1px);
    }
    #modalFacturar .btn-outline {
      font-weight: 700;
    }

    /* Responsive: botones a dos columnas en móvil */
    @media (max-width: 520px) {
      #modalFacturar .modal-foot {
        display: grid;
        grid-template-columns: 1fr 1fr;
      }
    }
    /* ==== Modal de Facturación — acabado pro ==== */
    #modalFacturar .modal {
      max-width: 640px;
      width: 94vw;
      border: 1px solid var(--border);
      border-radius: 18px;
      box-shadow:
        0 18px 40px rgba(15, 23, 42, 0.22),
        0 2px 0 rgba(15, 23, 42, 0.06) inset;
      overflow: hidden;
    }

    /* Header con subrayado sutil y mejor X */
    #modalFacturar .modal-head {
      position: sticky;
      top: 0;
      z-index: 3;
      padding: 18px 20px;
      background: #fff;
      border-bottom: 1px solid var(--border-2);
      box-shadow: 0 1px 0 rgba(2, 6, 23, 0.03);
    }
    #modalFacturar .modal-head h3 {
      margin: 0;
      font-size: 1.12rem;
      font-weight: 900;
      letter-spacing: 0.2px;
      color: #0f172a;
    }
    #modalFacturar .icon {
      border-radius: 10px;
      width: 36px;
      height: 36px;
      display: grid;
      place-items: center;
      transition:
        transform 0.12s,
        background 0.12s,
        color 0.12s;
    }
    #modalFacturar .icon:hover {
      background: #f3f4f6;
      color: #0f172a;
      transform: scale(1.06);
    }

    /* Body y tipografía */
    #modalFacturar .modal-body {
      max-height: min(74vh, 680px);
      overflow: auto;
      padding: 16px 18px;
    }
    #modalFacturar .k {
      color: var(--muted);
      font-weight: 600;
    }

    /* Chips de orden/estado mejorados */
    .factu-chip {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 6px 12px;
      background: #eef2ff;
      color: #1e3a8a;
      border: 1px solid #dbeafe;
      border-radius: 999px;
      font-weight: 800;
      font-size: 0.84rem;
    }
    .factu-badge {
      padding: 6px 12px;
      border-radius: 10px;
      font-weight: 900;
      font-size: 0.75rem;
      background: #fff7ed;
      color: #9a3412;
      border: 1px solid #fed7aa;
    }

    /* Separador punteado largo */
    .factu-sep {
      margin: 14px 0;
      border: 0;
      border-top: 2px dashed var(--border-2);
    }

    /* Fila de monto (monoespaciado) */
    .mono {
      font-variant-numeric: tabular-nums;
    }

    /* Barra de TOTAL con gradiente y valor grande */
    .factu-totalbar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
      color: #fff;
      padding: 12px 14px;
      border-radius: 12px;
      box-shadow: 0 10px 24px rgba(30, 58, 138, 0.28);
    }
    .factu-totalbar .label {
      font-weight: 900;
      letter-spacing: 0.5px;
    }
    .factu-totalbar .val {
      font-weight: 900;
      font-size: 1.12rem;
    }

    /* Lista de servicios colapsable */
    details.factu-coll {
      border: 1px solid var(--border-2);
      border-radius: 12px;
      background: #fff;
      overflow: hidden;
    }
    details.factu-coll summary {
      list-style: none;
      cursor: pointer;
      padding: 12px 14px;
      font-weight: 800;
      color: #0f172a;
      display: flex;
      align-items: center;
      justify-content: space-between;
      background: #f9fafb;
      border-bottom: 1px solid var(--border-2);
    }
    details.factu-coll summary::after {
      content: "▾";
      opacity: 0.6;
      transition: transform 0.15s;
    }
    details.factu-coll[open] summary::after {
      transform: rotate(180deg);
    }
    .factu-list .head,
    .factu-list .row {
      display: grid;
      grid-template-columns: 1fr 70px 100px 110px;
      gap: 10px;
      padding: 10px 12px;
    }
    .factu-list .head {
      background: #f8fafc;
      color: #334155;
      font-weight: 800;
      text-transform: uppercase;
      font-size: 0.78rem;
      border-bottom: 1px solid var(--border-2);
    }
    .factu-list .row {
      border-bottom: 1px solid var(--border-2);
    }
    .factu-list .row:last-child {
      border-bottom: 0;
    }

    /* Pie con CTA flotante en móvil */
    #modalFacturar .modal-foot {
      position: sticky;
      bottom: 0;
      z-index: 3;
      background: #fff;
      padding: 12px 16px;
      border-top: 1px solid var(--border-2);
    }
    #modalFacturar .btn-orange {
      font-weight: 900;
      padding: 10px 16px;
      box-shadow: 0 10px 22px rgba(255, 69, 0, 0.18);
    }
    @media (max-width: 560px) {
      #modalFacturar .modal-foot {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
      }
    }
    /* Fila con dos columnas: label fijo a la izq, valor a la der */
    .factu-row {
      display: grid;
      grid-template-columns: 140px 1fr; /* 140px fijo para labels */
      align-items: center;
      padding: 6px 0;
      gap: 8px;
    }

    .factu-row .k {
      text-align: left; /* label a la izq */
      color: var(--muted);
      font-weight: 700;
    }

    .factu-row span:last-child {
      text-align: left; /* valor alineado también a la izq */
    }
    .badge-estado {
      display: inline-block; /* que se ajuste al contenido */
      padding: 4px 12px;
      border-radius: 8px;
      font-size: 0.8rem;
      font-weight: 800;
      background: #fef3c7; /* fondo amarillo suave */
      color: #b45309; /* texto más fuerte */
      border: 1px solid #fde68a;
      white-space: nowrap; /* que nunca se parta */
    }

    /* --- Fix: que el badge de estado NO se estire --- */
    #modalFacturar .factu-summary .factu-row:first-child {
      display: flex; /* en vez de grid para esta fila concreta */
      justify-content: space-between;
      align-items: center;
      gap: 8px;
    }

    /* hijos de esa fila no deben estirarse */
    #modalFacturar .factu-summary .factu-row:first-child > * {
      flex: 0 0 auto;
    }

    /* el chip de estado se ajusta al contenido */
    #modalFacturar .factu-badge {
      display: inline-block;
      white-space: nowrap;
      width: auto;
      max-width: max-content;
    }
    /* Animación sutil al abrir */
    #modalFacturar[open] .modal {
      animation: factu-pop 0.18s ease-out;
    }
    @keyframes factu-pop {
      from {
        transform: translateY(6px) scale(0.985);
        opacity: 0;
      }
      to {
        transform: translateY(0) scale(1);
        opacity: 1;
      }
    }

    /* Refinar tipografía y espaciado del modal */
    #modalFacturar .modal-body {
      line-height: 1.45;
      letter-spacing: 0.1px;
    }

    /* Labels/valores alineados más firmes en pantallas medianas+ */
    @media (min-width: 720px) {
      #modalFacturar .factu-row {
        grid-template-columns: 160px 1fr; /* un pelín más de aire al label */
      }
      #modalFacturar .factu-row .k {
        color: #64748b; /* gris un poco más elegante */
      }
    }

    /* Badge de estado con relieve sutil y borde más fino */
    #modalFacturar .factu-badge {
      border: 1px solid #fde3b0;
      background: #fff7eb;
      box-shadow: 0 1px 0 rgba(250, 204, 21, 0.25) inset;
    }

    /* Barra TOTAL: radio y sombra más “card-like” */
    #modalFacturar .factu-totalbar {
      border-radius: 14px;
      box-shadow: 0 10px 26px rgba(30, 58, 138, 0.22);
    }

    /* Inputs del modal: foco y borde más premium */
    #modalFacturar .input {
      border-radius: 12px;
      transition:
        border-color 0.12s,
        box-shadow 0.12s,
        background 0.12s;
    }
    #modalFacturar .input:focus {
      border-color: #93c5fd;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15);
      background: #fff;
    }

    /* Botones del pie con feedback */
    #modalFacturar .btn-orange {
      transform: translateY(0);
      transition:
        transform 0.12s ease,
        box-shadow 0.12s ease,
        filter 0.12s;
    }
    #modalFacturar .btn-orange:hover {
      transform: translateY(-1px);
      filter: saturate(108%);
      box-shadow: 0 12px 24px rgba(255, 69, 0, 0.22);
    }
    #modalFacturar .btn-outline {
      transition:
        color 0.12s,
        border-color 0.12s,
        background 0.12s;
    }
    #modalFacturar .btn-outline:hover {
      background: #f8fafc;
      border-color: #cbd5e1;
      color: #0f172a;
    }

    /* Separadores: más finos y coherentes */
    #modalFacturar .factu-sep {
      border-top: 1.5px dashed #e5e7eb;
      opacity: 0.9;
    }

    /* Alinear Subtotal como el resto */
    #modalFacturar .factu-totals .factu-row {
      grid-template-columns: 140px 1fr; /* igual que Cliente/Vehículo */
      align-items: center;
    }

    #modalFacturar .factu-totals .factu-row .k {
      text-align: left;
      font-weight: 700;
      color: var(--muted);
    }

    #modalFacturar .factu-totals .factu-row span:last-child {
      text-align: left;
    }

    /* === Alinear Subtotal/IVA como Cliente/Vehículo (sin cambiar HTML) === */
    #modalFacturar .factu-totals > .factu-row {
      display: grid !important;
      grid-template-columns: 140px 1fr !important; /* label fijo + valor */
      align-items: center;
      gap: 8px;
    }

    #modalFacturar .factu-totals > .factu-row .k {
      text-align: left;
      font-weight: 700;
      color: var(--muted);
    }

    #modalFacturar .factu-totals > .factu-row span:last-child {
      text-align: left; /* evita que se vaya a la derecha */
      justify-self: start;
    }

    /* === Unificar alineación de Cliente, Vehículo, Subtotal e IVA === */
#modalFacturar .factu-row{
  display: grid !important;
  grid-template-columns: 140px 1fr !important; /* ancho fijo para label */
  align-items: center;
  gap: 8px;
}

#modalFacturar .factu-row .k{
  text-align: left;
  font-weight: 700;
  color: var(--muted);
}

#modalFacturar .factu-row span:last-child{
  text-align: left;
  justify-self: start;
}
/* === Alinear Cliente, Vehículo, Subtotal e IVA === */
#modalFacturar .factu-row.alinear {
  display: grid !important;
  grid-template-columns: 140px 1fr !important; /* ancho fijo para label */
  align-items: center;
  gap: 8px;
}

#modalFacturar .factu-row.alinear .k {
  text-align: left;
  font-weight: 700;
  color: var(--muted);
}

#modalFacturar .factu-row.alinear span:last-child {
  text-align: left;
  justify-self: start;
}

/* === Modal más estrecho y centrado === */
#modalFacturar .modal{
  max-width: 520px !important;  /* antes 560/640 */
  width: 92vw !important;
}

/* Padding coherente para que todo caiga en la misma guía izquierda */
#modalFacturar .modal-head{ padding: 16px 20px !important; }
#modalFacturar .modal-body{ padding: 16px 20px !important; }
#modalFacturar .modal-foot{ padding: 12px 20px !important; }

/* Alinea filas (Cliente, Vehículo, Subtotal, IVA) a columna fija izquierda */
#modalFacturar .factu-row{
  display: grid !important;
  grid-template-columns: 140px 1fr !important; /* etiqueta fija + valor fluido */
  align-items: center;
  gap: 8px;
}
#modalFacturar .factu-row .k{
  text-align: left; 
  font-weight: 700;
  color: var(--muted);
}
#modalFacturar .factu-row span:last-child{
  text-align: left;
  justify-self: start;
}

/* Barra TOTAL ocupando todo el ancho útil */
#modalFacturar .factu-totalbar{
  margin-left: 0 !important;
  margin-right: 0 !important;
  width: 100% !important;
  border-radius: 12px;
}

/* Select “Tipo de Factura” al ancho útil también */
#modalFacturar select.input{
  width: 100% !important;
}

/* Botonera pegada a la misma guía izquierda (sin perder el alineado visual) */
#modalFacturar .modal-foot{
  display: flex;
  gap: 10px;
  justify-content: flex-start; /* Botones alineados a la izquierda */
}
/* Retracción sutil de la barra TOTAL dentro del modal */
#modalFacturar .factu-totalbar{
  margin-inline: 8px !important;   /* prueba 6–10px si la quieres más/menos metida */
  width: auto !important;           /* deja que el ancho se ajuste con el margen */
  border-radius: 12px;              /* mantiene el redondeo bonito */
}

  </style>

  <script>
    //@ts-nocheck
    // Función de logout
    function _hardLogout() {
      try {
        localStorage.removeItem("token");
        localStorage.removeItem("user");
      } finally {
        location.replace("/");
      }
    }
    window.logout = _hardLogout;

    // Verificación de autenticación
    document.addEventListener("click", (e) => {
      const b = e.target.closest("#btnLogout");
      if (!b) return;
      e.preventDefault();
      _hardLogout();
    });

    // Inicialización
    (async () => {
      const token = localStorage.getItem("token");
      const user = localStorage.getItem("user");
      if (!token || !user) return _hardLogout();

      try {
        const response = await fetch("/api/auth/verify", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json().catch(() => ({}));
        if (!response.ok || !result?.success) return _hardLogout();
      } catch {
        return _hardLogout();
      }

      const userData = JSON.parse(user);
      if (userData.rol !== "admin") return _hardLogout();

      const welcomeEl = document.getElementById("userWelcome");
      if (welcomeEl) welcomeEl.textContent = `Bienvenido, ${userData.nombre}`;

      await loadKPIs();
      await loadOrdenesPendientes();
      setupTabs();
    })();

    // Formateo de moneda
    const money = new Intl.NumberFormat("es-EC", {
      style: "currency",
      currency: "USD",
    });

    // Cargar KPIs
    async function loadKPIs() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas/kpis", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        if (result.success) {
          const { hoy, mes, num } = result.data;
          const kpiHoy = document.getElementById("kpiHoy");
          const kpiMes = document.getElementById("kpiMes");
          const kpiNum = document.getElementById("kpiNum");

          if (kpiHoy) kpiHoy.textContent = money.format(hoy || 0);
          if (kpiMes) kpiMes.textContent = money.format(mes || 0);
          if (kpiNum) kpiNum.textContent = String(num || 0);
        }
      } catch (error) {
        console.error("Error al cargar KPIs:", error);
      }
    }

    // Cargar órdenes pendientes
    async function loadOrdenesPendientes() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas/ordenes-pendientes", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        const wrap = document.getElementById("wrapOrdenes");
        const contador = document.getElementById("contadorPendientes");

        if (!wrap) return;

        if (!result.success || !result.data.length) {
          wrap.innerHTML =
            '<div class="muted">No hay órdenes pendientes de facturación</div>';
          if (contador) contador.textContent = "0";
          return;
        }

        const ordenes = result.data;
        if (contador) contador.textContent = String(ordenes.length);

        wrap.innerHTML = `
          <table>
            <thead>
              <tr>
                <th>Orden #</th>
                <th>Cliente</th>
                <th>Vehículo</th>
                <th>Servicios</th>
                <th>Total</th>
                <th>Fecha</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              ${ordenes
                .map(
                  (orden) => `
                <tr>
                  <td>#${orden.id}</td>
                  <td>
                    <strong>${orden.cliente_nombre}</strong><br>
                    <small class="muted">${orden.identificacion}</small>
                  </td>
                  <td>
                    ${orden.marca}<br>
                    <small class="muted">${orden.placa}</small>
                  </td>
                  <td>${orden.num_servicios} servicio(s)</td>
                  <td><strong>${money.format(orden.total)}</strong></td>
                  <td>${new Date(orden.fecha_ingreso).toLocaleDateString("es-EC")}</td>
                  <td>
                    <button class="btn-facturar" data-orden="${orden.id}">
                      Facturar
                    </button>
                  </td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error("Error al cargar órdenes pendientes:", error);
        const wrap = document.getElementById("wrapOrdenes");
        if (wrap)
          wrap.innerHTML = '<div class="muted">Error al cargar órdenes</div>';
      }
    }

    // Cargar facturas emitidas
    async function loadFacturas() {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch("/api/facturas", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        const wrap = document.getElementById("wrapFacturas");
        if (!wrap) return;

        if (!result.success || !result.data.length) {
          wrap.innerHTML = '<div class="muted">No hay facturas emitidas</div>';
          return;
        }

        const facturas = result.data;

        wrap.innerHTML = `
          <table>
            <thead>
              <tr>
                <th>Número</th>
                <th>Cliente</th>
                <th>Vehículo</th>
                <th>Total</th>
                <th>Fecha</th>
                <th>Acciones</th>
              </tr>
            </thead>
            <tbody>
              ${facturas
                .map(
                  (factura) => `
                <tr>
                  <td><strong>${factura.numero_factura}</strong></td>
                  <td>
                    ${factura.cliente_nombre}<br>
                    <small class="muted">${factura.identificacion}</small>
                  </td>
                  <td>
                    ${factura.marca}<br>
                    <small class="muted">${factura.placa}</small>
                  </td>
                  <td><strong>${money.format(factura.total)}</strong></td>
                  <td>${new Date(factura.fecha_emision).toLocaleDateString("es-EC")}</td>
                  <td>
                    <div class="row-actions">
                      <button class="icon-btn" data-detalle="${factura.id}">👁️ Ver</button>
                      <button class="icon-btn" data-pdf="${factura.id}">📄 PDF</button>
                    </div>
                  </td>
                </tr>
              `
                )
                .join("")}
            </tbody>
          </table>
        `;
      } catch (error) {
        console.error("Error al cargar facturas:", error);
        const wrap = document.getElementById("wrapFacturas");
        if (wrap)
          wrap.innerHTML = '<div class="muted">Error al cargar facturas</div>';
      }
    }

    // Setup de pestañas
    function setupTabs() {
      const tabs = document.querySelectorAll(".tab");
      const contents = document.querySelectorAll(".tab-content");

      tabs.forEach((tab) => {
        tab.addEventListener("click", () => {
          const targetTab = tab.dataset.tab;

          // Remover clase active de todas las pestañas y contenidos
          tabs.forEach((t) => t.classList.remove("active"));
          contents.forEach((c) => c.classList.remove("active"));

          // Agregar clase active a la pestaña clickeada y su contenido
          tab.classList.add("active");
          const targetContent = document.getElementById(`tab-${targetTab}`);
          if (targetContent) targetContent.classList.add("active");

          // Cargar contenido si es necesario
          if (targetTab === "facturas") {
            loadFacturas();
          }
        });
      });
    }

    // Event listeners para facturación
    document.addEventListener("click", async (e) => {
      const btnFacturar = e.target.closest("[data-orden]");
      if (btnFacturar) {
        const ordenId = btnFacturar.dataset.orden;
        if (ordenId) await mostrarModalFacturar(ordenId);
        return;
      }

      const btnDetalle = e.target.closest("[data-detalle]");
      if (btnDetalle) {
        const facturaId = btnDetalle.dataset.detalle;
        if (facturaId) await mostrarDetalleFactura(facturaId);
        return;
      }

      const btnPdf = e.target.closest("[data-pdf]");
      if (btnPdf) {
        const facturaId = btnPdf.dataset.pdf;
        if (facturaId) generarPdfFactura(facturaId);
        return;
      }
    });

    // Modal de facturación
    let ordenActual = null;

    async function mostrarModalFacturar(ordenId) {
      const token = localStorage.getItem("token");
      try {
        const response = await fetch(`/api/ordenes/${ordenId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });
        const result = await response.json();

        if (!result.success) {
          alert("Error al cargar detalles de la orden");
          return;
        }

        ordenActual = result.data || {};
        const servicios = Array.isArray(ordenActual.detalle_servicios)
          ? ordenActual.detalle_servicios
          : [];

        // Totales (fallback si no vienen calculados)
        const sub = Number(
          ordenActual.subtotal ??
            servicios.reduce(
              (t, s) =>
                t +
                Number(s.cantidad || 0) *
                  Number(s.precio_unitario || s.precio || 0),
              0
            )
        );
        const iva = Number(ordenActual.iva ?? sub * 0.15);
        const tot = Number(ordenActual.total ?? sub + iva);

        const resumenEl = document.getElementById("resumenOrden");
        if (resumenEl) {
          let listHtml = "";
          if (servicios.length) {
            listHtml = `
    <details class="factu-coll" ${servicios.length <= 3 ? "open" : ""}>
      <summary>Servicios (${servicios.length})</summary>
      <div class="factu-list">
        <div class="head">
          <div>Servicio</div><div>Cant.</div><div>P. Unit.</div><div>Total</div>
        </div>
        ${servicios
          .map((s) => {
            const c = Number(s.cantidad || 0);
            const p = Number(s.precio_unitario || s.precio || 0);
            const t = c * p;
            const nombre =
              s.descripcion || s.servicio_nombre || s.codigo || "Servicio";
            return `
            <div class="row">
              <div>${nombre}</div>
              <div class="mono">${c}</div>
              <div class="mono">${money.format(p)}</div>
              <div class="mono"><strong>${money.format(t)}</strong></div>
            </div>
          `;
          })
          .join("")}
      </div>
    </details>
  `;
          }

          resumenEl.innerHTML = `
  <div class="factu-summary">
    <div class="factu-row" style="align-items:center; justify-content:space-between">
      <span class="factu-chip">Orden #${ordenActual.id ?? "-"}</span>
      <span class="factu-badge">${(ordenActual.estado || "pendiente").toUpperCase()}</span>
    </div>

    <div class="factu-row">
      <span class="k">Cliente:</span>
      <span><strong>${ordenActual.cliente_nombre || "—"}</strong></span>
    </div>
    <div class="factu-row">
      <span class="k">Vehículo:</span>
      <span>${ordenActual.marca || "—"} <small class="muted">(${ordenActual.placa || "—"})</small></span>
    </div>

    <hr class="factu-sep">

    ${listHtml}

    <div class="factu-totals" style="margin-top:10px">
      <div class="factu-row"><span class="k">Subtotal</span><span class="mono">${money.format(sub)}</span></div>
      <div class="factu-row"><span class="k">IVA (15%)</span><span class="mono">${money.format(iva)}</span></div>
      <div class="factu-totalbar">
        <span class="label">TOTAL</span>
        <span class="val mono">${money.format(tot)}</span>
      </div>
    </div>
  </div>
`;
        }

        const modal = document.getElementById("modalFacturar");
        if (modal?.showModal) modal.showModal();
      } catch (error) {
        console.error("Error:", error);
        alert("Error al cargar detalles de la orden");
      }
    }

    async function mostrarDetalleFactura(facturaId) {
      try {
        const token = localStorage.getItem("token");
        const response = await fetch(`/api/facturas/detalle/${facturaId}`, {
          headers: { Authorization: `Bearer ${token}` },
        });

        if (response.ok) {
          const result = await response.json();
          const factura = result.data;

          // Llenar el modal con los datos de la factura
          document.getElementById("facturaNumero").textContent =
            factura.numero_factura;
          document.getElementById("facturaFecha").textContent = new Date(
            factura.fecha_emision
          ).toLocaleDateString();
          document.getElementById("facturaCliente").textContent =
            factura.cliente_nombre;
          document.getElementById("facturaVehiculo").textContent =
            `${factura.marca} (${factura.placa})`;

          // Mostrar detalles de servicios
          let detallesHtml = "";
          let subtotal = 0;

          factura.detalles.forEach((detalle) => {
            const cantidad = parseInt(detalle.cantidad) || 0;
            const precioUnitario = parseFloat(detalle.precio_unitario) || 0;
            const total = cantidad * precioUnitario;
            subtotal += total;
            detallesHtml += `
              <tr>
                <td>${detalle.servicio_nombre}</td>
                <td>${cantidad}</td>
                <td>$${precioUnitario.toFixed(2)}</td>
                <td>$${total.toFixed(2)}</td>
              </tr>
            `;
          });

          const iva = subtotal * 0.15;
          const total = subtotal + iva;

          document.getElementById("detalleServicios").innerHTML = detallesHtml;
          document.getElementById("facturaSubtotal").textContent =
            `$${subtotal.toFixed(2)}`;
          document.getElementById("facturaIva").textContent =
            `$${iva.toFixed(2)}`;
          document.getElementById("facturaTotal").textContent =
            `$${total.toFixed(2)}`;

          // Mostrar el modal
          const modal = document.getElementById("modalDetalleFactura");
          if (modal && modal.showModal) modal.showModal();
        } else {
          alert("Error al cargar los detalles de la factura");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("Error al cargar los detalles de la factura");
      }
    }

    function generarPdfFactura(facturaId) {
      try {
        const token = localStorage.getItem("token");
        const url = `/api/facturas/pdf/${facturaId}`;

        // Abrir el PDF en una nueva ventana
        const ventanaPdf = window.open("", "_blank");
        if (ventanaPdf) {
          ventanaPdf.document.write(
            '<div style="text-align: center; padding: 50px;">Generando PDF...</div>'
          );

          fetch(url, {
            headers: { Authorization: `Bearer ${token}` },
          })
            .then((response) => {
              if (response.ok) {
                return response.text();
              }
              throw new Error("Error al generar PDF");
            })
            .then((html) => {
              ventanaPdf.document.open();
              ventanaPdf.document.write(html);
              ventanaPdf.document.close();

              // Agregar función de impresión automática
              ventanaPdf.onload = () => {
                setTimeout(() => {
                  ventanaPdf.print();
                }, 500);
              };
            })
            .catch((error) => {
              console.error("Error:", error);
              ventanaPdf.document.write(
                '<div style="text-align: center; padding: 50px; color: red;">Error al generar el PDF</div>'
              );
            });
        } else {
          alert(
            "No se pudo abrir la ventana del PDF. Verifique que no esté bloqueada por el navegador."
          );
        }
      } catch (error) {
        console.error("Error al generar PDF:", error);
        alert("Error al generar el PDF");
      }
    }

    // Confirmar facturación
    const btnConfirmar = document.getElementById("btnConfirmarFactura");
    if (btnConfirmar) {
      btnConfirmar.addEventListener("click", async () => {
        if (!ordenActual) return;

        const token = localStorage.getItem("token");
        const tipoSelect = document.querySelector('[name="tipo_factura"]');
        const tipoFactura = tipoSelect ? tipoSelect.value : "general";

        try {
          const response = await fetch(
            `/api/facturas/desde-orden/${ordenActual.id}`,
            {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify({ tipo_factura: tipoFactura }),
            }
          );

          const result = await response.json();

          if (result.success) {
            alert(`Factura ${result.numero_factura} generada exitosamente`);
            const modal = document.getElementById("modalFacturar");
            if (modal && modal.close) modal.close();
            await loadKPIs();
            await loadOrdenesPendientes();
          } else {
            alert(result.message || "Error al generar factura");
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error al generar factura");
        }
      });
    }

    // Cerrar modales
    const closeFacturar = document.getElementById("closeFacturar");
    if (closeFacturar) {
      closeFacturar.addEventListener("click", () => {
        const modal = document.getElementById("modalFacturar");
        if (modal && modal.close) modal.close();
      });
    }

    const closeDetalle = document.getElementById("closeDetalle");
    if (closeDetalle) {
      closeDetalle.addEventListener("click", () => {
        const modal = document.getElementById("modalDetalleFactura");
        if (modal && modal.close) modal.close();
      });
    }

    const btnCerrarDetalle = document.getElementById("btnCerrarDetalle");
    if (btnCerrarDetalle) {
      btnCerrarDetalle.addEventListener("click", () => {
        const modal = document.getElementById("modalDetalleFactura");
        if (modal && modal.close) modal.close();
      });
    }
  </script>
</Layout>
