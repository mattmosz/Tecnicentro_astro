---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Gesti√≥n de Servicios - TecniCentro Ibarra Express">
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/admin/dashboard" class="brand">
        <span class="logo-circle">üîß</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>
      <div class="user-menu">
        <span id="userWelcome" class="user-chip">Cargando‚Ä¶</span>
        <button type="button" id="btnLogout" class="btn btn-orange" onclick="window.logout?.()">
          Cerrar Sesi√≥n
        </button>
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <div class="header-row">
        <div>
          <h1>Gesti√≥n de Servicios</h1>
          <p class="muted">Administra servicios, repuestos y lubricantes</p>
        </div>
        <div class="actions">
          <input id="searchInput" class="input" placeholder="Buscar por c√≥digo o descripci√≥n" />
          <select id="tipoFilter" class="input">
            <option value="">Todos los tipos</option>
            <option value="servicio">Servicios</option>
            <option value="repuesto">Repuestos</option>
            <option value="lubricante">Lubricantes</option>
          </select>
          <button class="btn btn-outline" id="btnBuscar">Buscar</button>
          <button class="btn btn-orange" id="btnNuevo">Nuevo</button>
        </div>
      </div>

      <div class="card">
        <div class="card-head">
          <h3>Lista de Servicios</h3>
        </div>
        <div class="card-body">
          <div id="tableContainer" class="table-wrap">
            <div class="skeleton"></div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Modal para crear/editar servicio -->
  <dialog id="servicioModal">
    <form id="servicioForm" method="dialog" class="modal">
      <div class="modal-head">
        <h3 id="modalTitle">Nuevo Servicio</h3>
        <button class="icon" type="button" id="closeModal">‚úñ</button>
      </div>
      <div class="modal-body grid2">
        <label>
          C√≥digo *
          <input name="codigo" required class="input" placeholder="Ej: SRV001" />
        </label>
        <label>
          Tipo *
          <select name="tipo" required class="input">
            <option value="">Seleccionar tipo</option>
            <option value="servicio">Servicio</option>
            <option value="repuesto">Repuesto</option>
            <option value="lubricante">Lubricante</option>
          </select>
        </label>
        <label class="span-2">
          Descripci√≥n *
          <input name="descripcion" required class="input" placeholder="Descripci√≥n del servicio" />
        </label>
        <label>
          Precio Unitario *
          <input name="precio_unitario" type="number" step="0.01" min="0" required class="input" placeholder="0.00" />
        </label>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" value="cancel">Cancelar</button>
        <button class="btn btn-orange" id="btnGuardar" value="default">Guardar</button>
      </div>
    </form>
  </dialog>

  <style>
    .navbar {
      background: linear-gradient(135deg, #1e3a8a 0%, #3b82f6 100%);
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .brand {
      display: flex;
      align-items: center;
      gap: 0.75rem;
      color: white;
      text-decoration: none;
      font-weight: 600;
    }
    .logo-circle {
      width: 40px;
      height: 40px;
      background: white;
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 1.2rem;
    }
    .user-menu {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    .user-chip {
      background: rgba(255,255,255,0.2);
      padding: 0.5rem 1rem;
      border-radius: 1rem;
      font-size: 0.9rem;
    }
    .page {
      padding: 2rem 0;
      min-height: calc(100vh - 80px);
      background: #f8fafc;
    }
    .header-row {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 2rem;
      gap: 2rem;
    }
    .actions {
      display: flex;
      gap: 1rem;
      align-items: center;
    }
    .card {
      background: white;
      border-radius: 12px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      overflow: hidden;
    }
    .card-head {
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
      background: #f9fafb;
    }
    .card-body {
      padding: 1.5rem;
    }
    .table-wrap {
      overflow-x: auto;
    }
    table {
      width: 100%;
      border-collapse: collapse;
    }
    th, td {
      text-align: left;
      padding: 0.75rem;
      border-bottom: 1px solid #e5e7eb;
    }
    th {
      font-weight: 600;
      background: #f9fafb;
      color: #374151;
    }
    .badge {
      display: inline-block;
      padding: 0.25rem 0.75rem;
      border-radius: 9999px;
      font-size: 0.75rem;
      font-weight: 600;
      text-transform: uppercase;
    }
    .badge-servicio {
      background: #dbeafe;
      color: #1e40af;
    }
    .badge-repuesto {
      background: #d1fae5;
      color: #065f46;
    }
    .badge-lubricante {
      background: #fef3c7;
      color: #92400e;
    }
    .row-actions {
      display: flex;
      gap: 0.5rem;
    }
    .icon-btn {
      padding: 0.5rem;
      border: none;
      background: none;
      cursor: pointer;
      border-radius: 0.375rem;
      transition: background-color 0.15s;
    }
    .icon-btn:hover {
      background: #f3f4f6;
    }
    .btn {
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      border: none;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.15s;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    .btn-orange {
      background: #ea580c;
      color: white;
    }
    .btn-orange:hover {
      background: #dc2626;
    }
    .btn-outline {
      background: transparent;
      border: 1px solid #d1d5db;
      color: #374151;
    }
    .btn-outline:hover {
      background: #f9fafb;
    }
    .input {
      padding: 0.5rem 0.75rem;
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      font-size: 0.875rem;
    }
    .input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 1px #3b82f6;
    }
    .modal {
      max-width: 600px;
      width: 90vw;
      border: none;
      border-radius: 12px;
      padding: 0;
      box-shadow: 0 10px 25px rgba(0,0,0,0.15);
    }
    .modal::backdrop {
      background: rgba(0,0,0,0.5);
    }
    .modal-head {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
      background: #f9fafb;
    }
    .modal-body {
      padding: 1.5rem;
    }
    .modal-foot {
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
      padding: 1.5rem;
      border-top: 1px solid #e5e7eb;
      background: #f9fafb;
    }
    .grid2 {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
    }
    .span-2 {
      grid-column: span 2;
    }
    label {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      font-weight: 500;
      color: #374151;
    }
    .skeleton {
      height: 200px;
      background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%);
      background-size: 200% 100%;
      animation: loading 1.5s infinite;
      border-radius: 0.375rem;
    }
    @keyframes loading {
      0% { background-position: 200% 0; }
      100% { background-position: -200% 0; }
    }
    .muted {
      color: #6b7280;
      margin: 0;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    h1 {
      margin: 0 0 0.5rem 0;
      color: #1f2937;
    }
    h3 {
      margin: 0;
      color: #1f2937;
    }
    .icon {
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 0.25rem;
    }
    .icon:hover {
      background: #f3f4f6;
    }
  </style>

  <script>
    // Autenticaci√≥n y logout
    function _hardLogout() {
      try {
        localStorage.removeItem('token');
        localStorage.removeItem('user');
      } finally {
        location.replace('/');
      }
    }

    window.logout = _hardLogout;

    document.addEventListener('click', (e) => {
      const btn = e.target.closest('#btnLogout');
      if (!btn) return;
      e.preventDefault();
      _hardLogout();
    });

    // Verificaci√≥n inicial
    (async () => {
      const token = localStorage.getItem('token');
      const user = localStorage.getItem('user');
      
      if (!token || !user) return _hardLogout();
      
      try {
        const response = await fetch('/api/auth/verify', {
          headers: { Authorization: `Bearer ${token}` }
        });
        const result = await response.json().catch(() => ({}));
        
        if (!response.ok || !result?.success) return _hardLogout();
      } catch {
        return _hardLogout();
      }
      
      const userData = JSON.parse(user);
      if (userData.rol !== 'admin') return _hardLogout();
      
      document.getElementById('userWelcome').textContent = `Bienvenido, ${userData.nombre}`;
      await loadServicios();
    })();

    let currentSearch = '';
    let currentTipo = '';
    let editingId = null;

    // Cargar servicios
    async function loadServicios() {
      const token = localStorage.getItem('token');
      try {
        const url = new URL('/api/servicios', location.origin);
        if (currentTipo) url.searchParams.set('tipo', currentTipo);
        
        const response = await fetch(url, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const result = await response.json();
        if (result.success) {
          let servicios = result.data || [];
          
          // Filtrar por b√∫squeda si existe
          if (currentSearch) {
            servicios = servicios.filter(s => 
              s.codigo.toLowerCase().includes(currentSearch.toLowerCase()) ||
              s.descripcion.toLowerCase().includes(currentSearch.toLowerCase())
            );
          }
          
          renderTable(servicios);
        } else {
          renderTable([]);
        }
      } catch (error) {
        console.error('Error cargando servicios:', error);
        renderTable([]);
      }
    }

    // Renderizar tabla
    function renderTable(servicios) {
      const container = document.getElementById('tableContainer');
      
      if (!servicios || servicios.length === 0) {
        container.innerHTML = '<div class="muted">No se encontraron servicios</div>';
        return;
      }

      const tableHTML = `
        <table>
          <thead>
            <tr>
              <th>C√≥digo</th>
              <th>Descripci√≥n</th>
              <th>Tipo</th>
              <th>Precio Unitario</th>
              <th>Acciones</th>
            </tr>
          </thead>
          <tbody>
            ${servicios.map(servicio => `
              <tr>
                <td>${servicio.codigo}</td>
                <td>${servicio.descripcion}</td>
                <td><span class="badge badge-${servicio.tipo}">${servicio.tipo}</span></td>
                <td>$${parseFloat(servicio.precio_unitario).toFixed(2)}</td>
                <td>
                  <div class="row-actions">
                    <button class="icon-btn" onclick="editServicio(${servicio.id})" title="Editar">‚úé</button>
                    <button class="icon-btn" onclick="deleteServicio(${servicio.id})" title="Eliminar">üóë</button>
                  </div>
                </td>
              </tr>
            `).join('')}
          </tbody>
        </table>
      `;
      
      container.innerHTML = tableHTML;
    }

    // Event listeners
    document.getElementById('btnBuscar').addEventListener('click', () => {
      currentSearch = document.getElementById('searchInput').value.trim();
      currentTipo = document.getElementById('tipoFilter').value;
      loadServicios();
    });

    document.getElementById('searchInput').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') {
        document.getElementById('btnBuscar').click();
      }
    });

    // Modal
    const modal = document.getElementById('servicioModal');
    const form = document.getElementById('servicioForm');

    document.getElementById('btnNuevo').addEventListener('click', () => {
      editingId = null;
      form.reset();
      document.getElementById('modalTitle').textContent = 'Nuevo Servicio';
      modal.showModal();
    });

    document.getElementById('closeModal').addEventListener('click', () => {
      modal.close();
    });

    // Editar servicio
    window.editServicio = async (id) => {
      const token = localStorage.getItem('token');
      try {
        const response = await fetch(`/api/servicios/${id}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const result = await response.json();
        if (result.success) {
          const servicio = result.data;
          editingId = id;
          
          form.codigo.value = servicio.codigo;
          form.descripcion.value = servicio.descripcion;
          form.tipo.value = servicio.tipo;
          form.precio_unitario.value = servicio.precio_unitario;
          
          document.getElementById('modalTitle').textContent = 'Editar Servicio';
          modal.showModal();
        }
      } catch (error) {
        console.error('Error cargando servicio:', error);
        alert('Error al cargar el servicio');
      }
    };

    // Eliminar servicio
    window.deleteServicio = async (id) => {
      if (!confirm('¬øEst√° seguro de que desea eliminar este servicio?')) return;
      
      const token = localStorage.getItem('token');
      try {
        const response = await fetch(`/api/servicios/${id}`, {
          method: 'DELETE',
          headers: { Authorization: `Bearer ${token}` }
        });
        
        const result = await response.json();
        if (result.success) {
          await loadServicios();
        } else {
          alert('Error al eliminar el servicio: ' + (result.message || 'Error desconocido'));
        }
      } catch (error) {
        console.error('Error eliminando servicio:', error);
        alert('Error al eliminar el servicio');
      }
    };

    // Guardar servicio
    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());
      
      const token = localStorage.getItem('token');
      try {
        const url = editingId ? `/api/servicios/${editingId}` : '/api/servicios';
        const method = editingId ? 'PUT' : 'POST';
        
        const response = await fetch(url, {
          method,
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(data)
        });
        
        const result = await response.json();
        if (result.success) {
          modal.close();
          await loadServicios();
        } else {
          alert('Error al guardar el servicio: ' + (result.message || 'Error desconocido'));
        }
      } catch (error) {
        console.error('Error guardando servicio:', error);
        alert('Error al guardar el servicio');
      }
    });
  </script>
</Layout>
