---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Reportes y An√°lisis - TecniCentro Ibarra Express">
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/admin/dashboard" class="brand">
        <span class="logo-circle">üîß</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>
      <div class="user-menu">
        <span id="userWelcome" class="user-chip">Cargando‚Ä¶</span>
        <button
          type="button"
          id="btnLogout"
          class="btn btn-orange"
          onclick="window.logout?.()">Cerrar Sesi√≥n</button
        >
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <div class="header-row">
        <div>
          <h1>Reportes y An√°lisis</h1>
          <p class="muted">Estad√≠sticas operativas y de ventas</p>
        </div>
        <div class="actions">
          <input id="fDesde" type="date" class="input" />
          <input id="fHasta" type="date" class="input" />
          <button class="btn btn-outline" id="btnAplicar">Aplicar</button>
          <button class="btn btn-orange" id="btnExport">Exportar CSV</button>
        </div>
      </div>

      <!-- KPIs -->
      <div class="stats-grid">
        <article class="kpi-card kpi-orange">
          <div class="kpi-icon">üí∞</div>
          <div>
            <h3 id="kTotal" class="kpi-value">$0</h3>
            <p class="kpi-label">Facturaci√≥n</p>
          </div>
        </article>

        <article class="kpi-card kpi-green">
          <div class="kpi-icon">üìã</div>
          <div>
            <h3 id="kOT" class="kpi-value">0</h3>
            <p class="kpi-label">√ìrdenes</p>
          </div>
        </article>

        <article class="kpi-card kpi-amber">
          <div class="kpi-icon">üõ†Ô∏è</div>
          <div>
            <h3 id="kTopSrv" class="kpi-value">‚Äî</h3>
            <p class="kpi-label">Servicio Top</p>
          </div>
        </article>

        <article class="kpi-card kpi-blue">
          <div class="kpi-icon">üë•</div>
          <div>
            <h3 id="kClientes" class="kpi-value">0</h3>
            <p class="kpi-label">Clientes nuevos</p>
          </div>
        </article>
      </div>

      <div class="grid2">
        <!-- Ventas por d√≠a (l√≠nea) -->
        <div class="card">
          <div class="card-head"><h3>Ventas por d√≠a</h3></div>
          <div class="card-body">
            <div class="chart-box">
              <canvas id="cVentas"></canvas>
            </div>
            <div id="ventasInfo" class="insight-box"></div>
            <!-- fallback cuando no hay datos -->
            <div id="ventasEmpty" class="muted" style="display:none">
              Sin datos
            </div>
          </div>
        </div>

        <!-- Top servicios (barras + tabla) -->
        <div class="card">
          <div class="card-head"><h3>Top servicios</h3></div>
          <div class="card-body">
            <div class="chart-box">
              <canvas id="cTopServicios"></canvas>
            </div>
            <div class="chart-box" style="margin-top:20px">
              <canvas id="cPieServicios"></canvas>
            </div>
            <div id="topServicios" class="table-wrap" style="margin-top:12px;">
              <div class="muted">Sin datos</div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <!-- Chart.js (CDN UMD) -->
  <script
    src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"
  ></script>

  <!-- ===== Script ===== -->
  <script>
    //@ts-nocheck
    /* ===== logout & guard ===== */
    function _hardLogout() {
      try {
        localStorage.removeItem("token");
        localStorage.removeItem("user");
      } finally {
        location.replace("/");
      }
    }
    window.logout = _hardLogout;

    document.addEventListener("click", (e) => {
      const b = e.target.closest("#btnLogout");
      if (!b) return;
      e.preventDefault();
      _hardLogout();
    });

    (async () => {
      const token = localStorage.getItem("token");
      const uStr = localStorage.getItem("user");
      if (!token || !uStr) return _hardLogout();

      try {
        const r = await fetch("/api/auth/verify", {
          headers: { Authorization: `Bearer ${token}` },
        });
        const j = await r.json().catch(() => ({}));
        if (!r.ok || !j?.success) return _hardLogout();
      } catch {
        return _hardLogout();
      }

      const user = JSON.parse(uStr);
      if (user.rol !== "admin") return _hardLogout();
      document.getElementById("userWelcome").textContent =
        `Bienvenido, ${user.nombre}`;

      // Fechas por defecto (1¬∫ del mes ‚Üí hoy)
      const dDesde = document.getElementById("fDesde");
      const dHasta = document.getElementById("fHasta");
      const today = new Date();
      const yyyy = today.getFullYear();
      const mm = String(today.getMonth() + 1).padStart(2, "0");
      const dd = String(today.getDate()).padStart(2, "0");
      if (!dDesde.value) dDesde.value = `${yyyy}-${mm}-01`;
      if (!dHasta.value) dHasta.value = `${yyyy}-${mm}-${dd}`;

      apply();
    })();

    /* ===== UI events ===== */
    document.getElementById("btnAplicar")?.addEventListener("click", apply);
    document.getElementById("btnExport")?.addEventListener("click", exportCSV);

    /* ===== Utils ===== */
    const money = new Intl.NumberFormat("es-EC", {
      style: "currency",
      currency: "USD",
    });

    /* ===== Charts state ===== */
    let ventasChart = null;
    let topChart = null;

    function destroyCharts() {
      if (ventasChart) {
        ventasChart.destroy();
        ventasChart = null;
      }
      if (topChart) {
        topChart.destroy();
        topChart = null;
      }
    }

    /* ===== API calls ===== */
    async function apply() {
      const token = localStorage.getItem("token");
      const desde = document.getElementById("fDesde").value;
      const hasta = document.getElementById("fHasta").value;

      // Validar que las fechas est√©n en orden correcto
      if (desde && hasta && new Date(desde) > new Date(hasta)) {
        alert("La fecha 'Desde' debe ser anterior a la fecha 'Hasta'");
        return;
      }

      const url = new URL("/api/reportes", location.origin);
      if (desde) url.searchParams.set("desde", desde);
      if (hasta) url.searchParams.set("hasta", hasta);
      url.searchParams.set("_ts", Date.now()); // ‚Üê cache buster

      // Mostrar indicador de carga
      document.getElementById("kTotal").textContent = "Cargando...";
      document.getElementById("kOT").textContent = "...";
      document.getElementById("kClientes").textContent = "...";
      document.getElementById("kTopSrv").textContent = "...";

      let data = { resumen: {}, ventas_dia: [], top_servicios: [] };
      try {
        const r = await fetch(url, {
          headers: { Authorization: `Bearer ${token}` },
          cache: "no-store",
        });
        if (r.status === 401) return _hardLogout();
        if (!r.ok) throw new Error(`HTTP ${r.status}`);
        const response = await r.json();
        
        if (response.success !== false) {
          data = response;
        } else {
          console.error("Error en la respuesta:", response.message);
          alert("Error al cargar los reportes: " + (response.message || "Error desconocido"));
          return;
        }
      } catch (err) {
        console.error("Reporte: error consultando API", err);
        alert("Error de conexi√≥n al cargar los reportes. Verifique su conexi√≥n a internet.");
        // Restaurar valores por defecto en caso de error
        document.getElementById("kTotal").textContent = money.format(0);
        document.getElementById("kOT").textContent = "0";
        document.getElementById("kClientes").textContent = "0";
        document.getElementById("kTopSrv").textContent = "‚Äî";
        return;
      }

      const { resumen = {}, ventas_dia = [], top_servicios = [] } = data;
      document.getElementById("kTotal").textContent = money.format(
        resumen.total || 0
      );
      document.getElementById("kOT").textContent = resumen.ordenes || 0;
      document.getElementById("kClientes").textContent =
        resumen.clientes_nuevos || 0;
      document.getElementById("kTopSrv").textContent =
        top_servicios?.[0]?.nombre || "‚Äî";

      renderVentasDiaChart(ventas_dia);
      renderTopServicios(top_servicios);
      renderTopServiciosChart(top_servicios);
      renderPieServicios(top_servicios);
      renderVentasDescripcion(ventas_dia, resumen, {
        desde: document.getElementById("fDesde").value,
        hasta: document.getElementById("fHasta").value,
      });
    }

    async function exportCSV() {
      const token = localStorage.getItem("token");
      const desde = document.getElementById("fDesde").value;
      const hasta = document.getElementById("fHasta").value;

      // Validar fechas
      if (desde && hasta && new Date(desde) > new Date(hasta)) {
        alert("La fecha 'Desde' debe ser anterior a la fecha 'Hasta'");
        return;
      }

      const btnExport = document.getElementById("btnExport");
      const originalText = btnExport.textContent;
      btnExport.textContent = "Exportando...";
      btnExport.disabled = true;

      const url = new URL("/api/reportes/export", location.origin);
      if (desde) url.searchParams.set("desde", desde);
      if (hasta) url.searchParams.set("hasta", hasta);
      url.searchParams.set("_ts", Date.now());

      try {
        const r = await fetch(url, {
          headers: {
            Authorization: `Bearer ${token}`,
            "Cache-Control": "no-store",
          },
          cache: "no-store",
        });
        if (r.status === 401) return _hardLogout();
        if (!r.ok) {
          throw new Error(`Error ${r.status}: ${r.statusText}`);
        }

        const blob = await r.blob();
        if (blob.size === 0) {
          alert("No hay datos para exportar en el per√≠odo seleccionado");
          return;
        }

        const a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        const fechaStr = desde && hasta ? `${desde}_a_${hasta}` : new Date().toISOString().slice(0, 10);
        a.download = `reportes_tecnicentro_${fechaStr}.csv`;
        a.click();
        URL.revokeObjectURL(a.href);
        
        // Mostrar mensaje de √©xito
        alert("Reporte exportado exitosamente");
        
      } catch (err) {
        console.error("Export CSV: error", err);
        alert(`No se pudo exportar el reporte: ${err.message}`);
      } finally {
        btnExport.textContent = originalText;
        btnExport.disabled = false;
      }
    }
    // Paleta corporativa para todos los charts
    const COLORS = [
      "#ff4500",
      "#3b82f6",
      "#22c55e",
      "#f59e0b",
      "#8b5cf6",
      "#06b6d4",
    ];

    /* ===== Render (tabla) ===== */
    function renderTopServicios(items) {
      const wrap = document.getElementById("topServicios");
      if (!items || !items.length) {
        wrap.innerHTML = '<div class="muted">No hay servicios registrados en el per√≠odo seleccionado</div>';
        return;
      }
      const total = items.reduce((a, b) => a + (+b.total || 0), 0) || 1;

      wrap.innerHTML = `
    <table>
      <thead>
        <tr>
          <th>Servicio</th>
          <th>Veces</th>
          <th>Ingresos</th>
          <th>% del total</th>
        </tr>
      </thead>
      <tbody>
        ${items
          .map(
            (s) => `
          <tr>
            <td>${s.nombre || 'Sin nombre'}</td>
            <td>${s.cantidad || 0}</td>
            <td>${money.format(+s.total || 0)}</td>
            <td>${(((+s.total || 0) / total) * 100).toFixed(1)}%</td>
          </tr>`
          )
          .join("")}
      </tbody>
    </table>`;
    }

    /* ===== Render (charts) ===== */
    function renderVentasDiaChart(rows) {
      const empty = document.getElementById("ventasEmpty");
      const ctx = document.getElementById("cVentas");

      if (!rows || !rows.length) {
        destroyCharts();
        empty.style.display = "block";
        empty.textContent = "No hay datos de ventas en el per√≠odo seleccionado";
        return;
      }
      empty.style.display = "none";

      const labels = rows.map((r) => {
        const d = isNaN(Date.parse(r.fecha))
          ? r.fecha
          : new Date(r.fecha).toLocaleDateString("es-EC");
        return d;
      });
      const values = rows.map((r) => Number(r.total || 0));

      if (ventasChart) ventasChart.destroy();
      ventasChart = new Chart(ctx, {
        type: "line",
        data: {
          labels,
          datasets: [
            {
              label: "Ventas por d√≠a",
              data: values,
              borderColor: COLORS[0], // naranja
              backgroundColor: "rgba(255,69,0,0.15)", // sombra
              tension: 0.3,
              pointRadius: 4,
              pointBackgroundColor: COLORS[0],
              fill: true,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              callbacks: { label: (ctx) => money.format(ctx.parsed.y) },
            },
          },
          scales: {
            y: {
              beginAtZero: true,
              ticks: {
                callback: (v) => "$" + Number(v).toLocaleString("es-EC"),
              },
            },
          },
        },
      });
    }

    function renderTopServiciosChart(items) {
      const ctx = document.getElementById("cTopServicios");
      
      if (!items || !items.length) {
        if (topChart) {
          topChart.destroy();
          topChart = null;
        }
        // Crear un mensaje en el canvas
        const canvasParent = ctx.parentElement;
        let noDataMsg = canvasParent.querySelector('.no-data-message');
        if (!noDataMsg) {
          noDataMsg = document.createElement('div');
          noDataMsg.className = 'no-data-message muted';
          noDataMsg.style.textAlign = 'center';
          noDataMsg.style.padding = '20px';
          canvasParent.appendChild(noDataMsg);
        }
        noDataMsg.textContent = 'No hay servicios para mostrar en el per√≠odo seleccionado';
        ctx.style.display = 'none';
        return;
      }

      // Remover mensaje de no datos si existe
      const canvasParent = ctx.parentElement;
      const noDataMsg = canvasParent.querySelector('.no-data-message');
      if (noDataMsg) {
        noDataMsg.remove();
      }
      ctx.style.display = 'block';

      const sorted = items.slice().sort((a, b) => (b.total || 0) - (a.total || 0));
      const labels = sorted.map((i) => i.nombre || 'Sin nombre');
      const values = sorted.map((i) => Number(i.total || 0));

      if (topChart) topChart.destroy();
      topChart = new Chart(ctx, {
        type: "bar",
        data: {
          labels,
          datasets: [
            {
              label: "Ingresos por servicio",
              data: values,
              backgroundColor: COLORS[1], // azul
              hoverBackgroundColor: "#2563eb",
              borderRadius: 8, // esquinas redondeadas
            },
          ],
        },
        options: {
          indexAxis: "y",
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { display: false },
            tooltip: {
              callbacks: { label: (ctx) => money.format(ctx.parsed.x) },
            },
          },
          scales: {
            x: {
              beginAtZero: true,
              ticks: {
                callback: (v) => "$" + Number(v).toLocaleString("es-EC"),
              },
            },
          },
        },
      });
    }

    let pieChart = null;
    function renderPieServicios(items) {
      const ctx = document.getElementById("cPieServicios");
      if (pieChart) {
        pieChart.destroy();
        pieChart = null;
      }
      
      if (!items || !items.length) {
        // Crear un mensaje en el canvas
        const canvasParent = ctx.parentElement;
        let noDataMsg = canvasParent.querySelector('.no-data-pie-message');
        if (!noDataMsg) {
          noDataMsg = document.createElement('div');
          noDataMsg.className = 'no-data-pie-message muted';
          noDataMsg.style.textAlign = 'center';
          noDataMsg.style.padding = '20px';
          canvasParent.appendChild(noDataMsg);
        }
        noDataMsg.textContent = 'No hay datos para el gr√°fico circular';
        ctx.style.display = 'none';
        return;
      }

      // Remover mensaje de no datos si existe
      const canvasParent = ctx.parentElement;
      const noDataMsg = canvasParent.querySelector('.no-data-pie-message');
      if (noDataMsg) {
        noDataMsg.remove();
      }
      ctx.style.display = 'block';

      const labels = items.map((i) => i.nombre || 'Sin nombre');
      const values = items.map((i) => Number(i.total || 0));

      pieChart = new Chart(ctx, {
        type: "doughnut",
        data: {
          labels,
          datasets: [
            {
              data: values,
              backgroundColor: COLORS.slice(0, values.length),
              borderColor: "#fff",
              borderWidth: 2,
              hoverOffset: 8,
            },
          ],
        },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: { position: "bottom" },
            tooltip: {
              callbacks: {
                label: (ctx) => {
                  const total = values.reduce((a, b) => a + b, 0) || 1;
                  const val = ctx.parsed;
                  const pct = ((val / total) * 100).toFixed(1);
                  return `${ctx.label}: ${money.format(val)} (${pct}%)`;
                },
              },
            },
          },
        },
      });
    }
    function renderVentasDescripcion(rows, resumen, rango) {
      const el = document.getElementById("ventasInfo");
      const total = Number(resumen?.total || 0);
      const ordenes = Number(resumen?.ordenes || 0);

      const diasConVenta = rows.filter((r) => Number(r.total || 0) > 0).length;
      const sumRows = rows.reduce((a, r) => a + Number(r.total || 0), 0);
      const promedioDia = diasConVenta ? sumRows / diasConVenta : 0;

      const mejor = rows.reduce(
        (best, r) => {
          const v = Number(r.total || 0);
          if (v > best.total) return { fecha: r.fecha, total: v };
          return best;
        },
        { fecha: null, total: 0 }
      );

      const ticketProm = ordenes ? total / ordenes : 0;

      const fmtFecha = (f) =>
        isNaN(Date.parse(f)) ? f : new Date(f).toLocaleDateString("es-EC");
      const rangoTxt = rango ? `${rango.desde} a ${rango.hasta}` : "";

      el.innerHTML = `
    <ul class="insight-list">
      <li><span>Rango</span><strong>${rangoTxt}</strong></li>
      <li><span>Total facturado</span><strong>${money.format(total)}</strong></li>
      <li><span>D√≠as con venta</span><strong>${diasConVenta}</strong></li>
      <li><span>Promedio por d√≠a con venta</span><strong>${money.format(promedioDia)}</strong></li>
      <li><span>Mejor d√≠a</span><strong>${mejor.fecha ? `${fmtFecha(mejor.fecha)} ‚Äî ${money.format(mejor.total)}` : "‚Äî"}</strong></li>
      <li><span>Ticket promedio</span><strong>${money.format(ticketProm)}</strong></li>
    </ul>
  `;
    }
  </script>

  <!-- ===== Estilos ===== -->
  <style>
    :root {
      --container: 1200px;
      --bg: #f8fafc;
      --card: #fff;
      --text: #0f172a;
      --muted: #64748b;
      --border: #e6eaf1;
      --border-2: #edf1f6;
      --blue-700: #1e3a8a;
      --blue-500: #3b82f6;
      --orange: #ff4500;
      --green: #22c55e;
      --amber: #f59e0b;
      --blue: #3b82f6;
      --red: #ef4444;
    }

    .page {
      padding: 24px 0 40px;
      background: var(--bg);
    }
    .container {
      max-width: var(--container);
      margin: 0 auto;
      padding: 0 20px;
    }
    .muted {
      color: var(--muted);
    }

    .navbar {
      position: sticky;
      top: 0;
      z-index: 50;
      background: linear-gradient(
        135deg,
        var(--blue-700) 0%,
        var(--blue-500) 100%
      );
      color: #fff;
      box-shadow: 0 6px 18px rgba(2, 6, 23, 0.12);
    }
    .navbar .container {
      display: flex;
      align-items: center;
      gap: 16px;
      padding: 10px 20px;
    }
    .brand {
      display: inline-flex;
      align-items: center;
      gap: 10px;
      color: #fff;
      text-decoration: none;
      font-weight: 700;
    }
    .logo-circle {
      width: 36px;
      height: 36px;
      display: grid;
      place-items: center;
      border-radius: 50%;
      background: rgba(255, 255, 255, 0.15);
      box-shadow: inset 0 0 0 1px rgba(255, 255, 255, 0.25);
    }
    .brand-text {
      color: #fff;
    }
    .user-menu {
      margin-left: auto;
      display: inline-flex;
      gap: 12px;
      align-items: center;
    }
    .user-chip {
      padding: 8px 12px;
      border-radius: 999px;
      background: rgba(255, 255, 255, 0.15);
      border: 1px solid rgba(255, 255, 255, 0.25);
      color: #fff;
      font-weight: 700;
      font-size: 0.875rem;
    }

    #btnLogout {
      background: var(--red);
      color: #fff;
      border: 0;
      border-radius: 999px;
      padding: 8px 14px;
      font-weight: 700;
      box-shadow: 0 6px 14px rgba(239, 68, 68, 0.22);
      cursor: pointer;
      transition:
        transform 0.12s,
        box-shadow 0.12s;
    }
    #btnLogout:hover {
      transform: translateY(-1px);
      box-shadow: 0 10px 22px rgba(239, 68, 68, 0.28);
    }

    .header-row {
      display: flex;
      justify-content: space-between;
      align-items: flex-end;
      gap: 16px;
      margin: 8px 0 14px;
      flex-wrap: wrap;
    }
    .header-row h1 {
      margin: 0 0 6px;
      font-size: 2rem;
      font-weight: 800;
      color: #0f172a;
    }
    .actions {
      display: flex;
      gap: 10px;
      align-items: center;
      flex-wrap: wrap;
    }

    .btn {
      border: 0;
      border-radius: 10px;
      padding: 10px 14px;
      font-weight: 600;
      cursor: pointer;
      font-size: 0.9rem;
    }
    .btn-orange {
      background: var(--orange);
      color: #fff;
    }
    .btn-outline {
      background: #fff;
      border: 1px solid var(--border);
      color: var(--text);
    }
    .input {
      border: 1px solid var(--border);
      border-radius: 10px;
      padding: 10px 12px;
      min-width: 200px;
      font-size: 0.9rem;
      background: #fff;
      color: var(--text);
    }
    .input:focus {
      outline: none;
      border-color: var(--blue-500);
      box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.15);
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
      gap: 18px;
      margin: 14px 0 24px;
    }
    .kpi-card {
      background: #fff;
      border: 1px solid var(--border);
      border-radius: 14px;
      padding: 18px;
      display: flex;
      align-items: center;
      gap: 14px;
      box-shadow: 0 8px 22px rgba(2, 6, 23, 0.06);
    }
    .kpi-card.kpi-orange {
      border-left: 4px solid var(--orange);
    }
    .kpi-card.kpi-green {
      border-left: 4px solid var(--green);
    }
    .kpi-card.kpi-amber {
      border-left: 4px solid var(--amber);
    }
    .kpi-card.kpi-blue {
      border-left: 4px solid var(--blue);
    }
    .kpi-icon {
      font-size: 28px;
      opacity: 0.85;
    }
    .kpi-value {
      margin: 0;
      font-size: 1.5rem;
      font-weight: 800;
      color: #0f172a;
    }
    .kpi-label {
      margin: 2px 0 0;
      color: var(--muted);
      font-weight: 600;
      font-size: 0.85rem;
    }

    .grid2 {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 18px;
    }
    @media (max-width: 900px) {
      .grid2 {
        grid-template-columns: 1fr;
      }
    }

    .card {
      background: var(--card);
      border: 1px solid var(--border);
      border-radius: 14px;
      box-shadow: 0 8px 22px rgba(2, 6, 23, 0.06);
      overflow: hidden;
    }
    .card-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px 18px;
      background: #fafbfc;
      border-bottom: 1px solid var(--border-2);
    }
    .card-head h3 {
      margin: 0;
      font-size: 1.125rem;
      font-weight: 700;
      color: #0f172a;
    }
    .card-body {
      padding: 16px 18px 18px;
    }

    .table-wrap {
      overflow: auto;
      border: 1px solid var(--border);
      border-radius: 10px;
    }
    .table-wrap table {
      width: 100%;
      border-collapse: collapse;
      background: #fff;
    }
    .table-wrap thead th {
      background: #f8fafc;
      color: #0f172a;
      font-weight: 700;
      font-size: 0.82rem;
      letter-spacing: 0.02em;
      text-transform: uppercase;
      text-align: left;
      padding: 14px 12px;
      border-bottom: 2px solid var(--border);
    }
    .table-wrap tbody td {
      padding: 14px 12px;
      border-bottom: 1px solid var(--border-2);
      font-size: 0.95rem;
    }
    .table-wrap tbody tr:hover {
      background: #f6f9ff;
    }

    /* ===== Nuevo: contenedor de charts ===== */
    .chart-box {
      height: 300px;
      width: 100%;
      position: relative;
    }
    @media (min-width: 1200px) {
      .chart-box {
        height: 340px;
      }
    }

    /* Mantengo tus estilos de barras originales por si quieres volver a usarlos */
    .bars {
      display: grid;
      grid-auto-rows: 30px;
      gap: 10px;
      padding: 12px;
    }
    .bar {
      display: flex;
      gap: 10px;
      align-items: center;
    }
    .bar .label {
      min-width: 96px;
      font-size: 12px;
      color: #64748b;
      white-space: nowrap;
    }
    .bar .track {
      flex: 1;
      height: 10px;
      background: #f1f5f9;
      border-radius: 999px;
      overflow: hidden;
    }
    .bar .fill {
      height: 10px;
      background: var(--orange);
      border-radius: 999px;
    }
    #cPieServicios {
      max-height: 260px;
    }
    .chart-box canvas {
      filter: drop-shadow(0 2px 6px rgba(2, 6, 23, 0.06));
      border-radius: 10px;
    }
  </style>
  <style is:global>
  .insight-box{
    margin-top: 16px;
    background: #fff;
    border-radius: 14px;
    border: 1px solid var(--border);
    padding: 18px 20px;
    box-shadow: 0 4px 14px rgba(2,6,23,.06);
    transition: all .2s ease-in-out;
  }
  .insight-box:hover{
    box-shadow: 0 6px 20px rgba(2,6,23,.1);
    transform: translateY(-1px);
  }

  .insight-list{
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 14px 24px;
    margin: 0; padding: 0; list-style: none;
  }
  @media (max-width: 768px){
    .insight-list{ grid-template-columns: 1fr; }
  }

  .insight-list li{
    display: flex;
    flex-direction: column;
    background: #f9fafb;
    padding: 12px 14px;
    border-radius: 12px;
    border: 1px solid var(--border-2);
    position: relative;
  }
  .insight-list li::before{
    content: "‚óÜ";
    position: absolute;
    left: -8px; top: 14px;
    font-size: 10px;
    color: var(--orange);
  }

  .insight-list span{
    color: var(--muted);
    font-size: .85rem;
    font-weight: 500;
    margin-bottom: 4px;
  }
  .insight-list strong{
    color: var(--text);
    font-weight: 800;
    font-size: 1rem;
  }
  .insight-list li::before{
  content: none;
}

</style>

</Layout>
