---
import Layout from '../../layouts/Layout.astro';
---

<Layout title="Panel T√©cnico - TecniCentro Ibarra Express">
  <!-- NAVBAR -->
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/tecnico/dashboard" class="brand">
        <span class="logo-circle">üîß</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>

      <div class="user-menu">
        <span id="userName" class="user-chip">T√©cnico</span>
        <button type="button" class="btn btn-orange" id="logoutBtn" onclick="window.logout?.()">Cerrar Sesi√≥n</button>
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <!-- KPIs -->
      <section class="section">
        <div class="kpi-grid">
          <article class="kpi-card kpi-blue">
            <div class="kpi-icon">üß∞</div>
            <div>
              <h3 id="kpiAsignadas" class="kpi-value">0</h3>
              <p class="kpi-label">Asignadas hoy</p>
            </div>
          </article>
          <article class="kpi-card kpi-amber">
            <div class="kpi-icon">‚öôÔ∏è</div>
            <div>
              <h3 id="kpiProceso" class="kpi-value">0</h3>
              <p class="kpi-label">En proceso</p>
            </div>
          </article>
          <article class="kpi-card kpi-green">
            <div class="kpi-icon">‚úÖ</div>
            <div>
              <h3 id="kpiCompletadas" class="kpi-value">0</h3>
              <p class="kpi-label">Completadas</p>
            </div>
          </article>
        </div>
      </section>

      <!-- Acciones r√°pidas -->
      <section class="section">
        <div class="quick">
          <div class="quick-left">
            <button id="nuevaOrdenBtn" class="btn btn-success">
              <span class="btn-ico">‚ûï</span> Nueva Orden
            </button>
            <div class="plate-search">
              <input id="placaQuick" type="text" placeholder="Buscar por placa‚Ä¶" />
              <button id="buscarQuickBtn" class="btn btn-outline">Buscar</button>
            </div>
          </div>
          <div class="quick-right">
            <div class="filters" role="tablist" aria-label="Estados">
              <button class="pill active" data-estado="todas">Todas</button>
              <button class="pill" data-estado="pendiente">Pendiente</button>
              <button class="pill" data-estado="en proceso">En proceso</button>
              <button class="pill" data-estado="completado">Completada</button>
            </div>
          </div>
        </div>
      </section>

      <!-- Mis √≥rdenes -->
      <section class="section">
        <div class="card">
          <div class="card-head">
            <h2 class="card-title">Mis √ìrdenes</h2>
            <div class="card-tools">
              <input id="buscarOrdenInput" class="input" placeholder="Buscar (placa / cliente / #orden)" />
            </div>
          </div>

          <div id="ordenesContainer" class="card-body">
            <div class="table-wrap">
              <table class="table" id="tablaOrdenes" aria-describedby="tabla de √≥rdenes">
                <thead>
                  <tr>
                    <th>N¬∞</th>
                    <th>Fecha</th>
                    <th>Veh√≠culo</th>
                    <th>Cliente</th>
                    <th>Estado</th>
                    <th style="width:120px">Acciones</th>
                  </tr>
                </thead>
                <tbody><!-- se llena por JS --></tbody>
              </table>
            </div>
            <div id="emptyOrders" class="empty" style="display:none;">
              <div class="empty-ico">üì≠</div>
              <p>Sin √≥rdenes para mostrar.</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>

  <!-- Toast -->
  <div id="toast" class="toast" role="status" aria-live="polite"></div>

  <!-- MODAL Nueva Orden -->
  <div id="nuevaOrdenModal" class="modal" style="display:none;">
    <div class="modal-content">
      <div class="modal-header">
        <h3>Crear nueva orden</h3>
        <button class="modal-close" aria-label="Cerrar">√ó</button>
      </div>

      <div class="modal-body">
        <form id="nuevaOrdenForm">
          <!-- Buscar veh√≠culo -->
          <div class="form-row">
            <div class="form-group grow">
              <label for="placaVehiculo">Placa del veh√≠culo</label>
              <div class="input-wrap">
                <span class="input-ico">üöò</span>
                <input id="placaVehiculo" class="form-control" placeholder="ABC-1234" />
              </div>
            </div>
            <div class="form-group">
              <label>&nbsp;</label>
              <button type="button" id="buscarVehiculoBtn" class="btn btn-outline">Buscar</button>
            </div>
          </div>

          <div id="vehiculoInfo" class="veh-card" style="display:none;">
            <div class="veh-left">
              <div class="veh-line"><strong>Marca:</strong> <span id="vehMarca"></span></div>
              <div class="veh-line"><strong>Modelo:</strong> <span id="vehModelo"></span></div>
              <div class="veh-line"><strong>Placa:</strong> <span id="vehPlaca"></span></div>
            </div>
            <div class="veh-right">
              <div class="veh-line"><strong>Cliente:</strong> <span id="vehCliente"></span></div>
              <div class="veh-line"><strong>Tel√©fono:</strong> <span id="vehTelefono"></span></div>
            </div>
          </div>

          <div class="form-group">
            <label for="observaciones">Observaciones</label>
            <textarea id="observaciones" rows="3" class="form-control" placeholder="Notas iniciales, s√≠ntomas, etc."></textarea>
          </div>

          <!-- Servicios -->
          <h4 class="subtle-title">Servicios y repuestos</h4>
          <div class="form-row">
            <div class="form-group">
              <label for="tipoServicio">Tipo</label>
              <select id="tipoServicio" class="form-control">
                <option value="">Todos</option>
                <option value="servicio">Mano de obra</option>
                <option value="repuesto">Repuestos</option>
                <option value="lubricante">Lubricantes</option>
              </select>
            </div>
            <div class="form-group grow">
              <label for="buscarServicio">Buscar</label>
              <div class="input-wrap">
                <span class="input-ico">üîé</span>
                <input id="buscarServicio" class="form-control" placeholder="C√≥digo o descripci√≥n" />
              </div>
              <div id="serviciosEncontrados" class="results" style="display:none;"></div>
            </div>
          </div>

          <div class="table-wrap soft">
            <table class="table" id="serviciosAgregados">
              <thead>
                <tr>
                  <th>C√≥digo</th>
                  <th>Descripci√≥n</th>
                  <th style="width:110px">Cantidad</th>
                  <th>Precio</th>
                  <th>Subtotal</th>
                  <th style="width:64px">‚Äî</th>
                </tr>
              </thead>
              <tbody></tbody>
              <tfoot>
                <tr>
                  <td colspan="4" class="t-right"><strong>Total</strong></td>
                  <td><strong id="totalOrden">$0.00</strong></td>
                  <td></td>
                </tr>
              </tfoot>
            </table>
          </div>

          <div class="modal-actions">
            <button type="submit" class="btn btn-success"><span class="btn-ico">üíæ</span> Crear Orden</button>
            <button type="button" class="btn modal-close">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <style>
    :root{
      /* caen a tu paleta global si ya existen */
      --text:#0f172a;
      --muted:#64748b;
      --ring: 0 1px 2px rgba(0,0,0,.04), 0 10px 20px rgba(2,6,23,.08);
      --radius:16px;
      --container:1200px;
    }

    /* -------- layout -------- */
    .container{max-width:var(--container); margin-inline:auto; padding:0 20px}
    .page{ padding:20px 0 48px; background:#f7f9fc }

    /* navbar */
    .navbar{position:sticky; top:0; z-index:20; background:rgba(255,255,255,.92); border-bottom:1px solid #eef2f7; backdrop-filter:saturate(180%) blur(10px)}
    .navbar .container{display:flex; align-items:center; justify-content:space-between; height:64px}
    .brand{display:flex; align-items:center; gap:10px; text-decoration:none; color:var(--text); font-weight:800}
    .logo-circle{display:grid; place-items:center; width:36px; height:36px; border-radius:50%; background:linear-gradient(135deg,var(--primary-orange), #ffb07a); box-shadow:var(--ring)}
    .brand-text{letter-spacing:.2px}
    .user-menu{display:flex; align-items:center; gap:12px}
    .user-chip{font-weight:700}

    /* buttons / inputs */
    .btn{border:0; border-radius:10px; padding:10px 14px; font-weight:700; cursor:pointer; background:#fff}
    .btn-outline{border:1px solid #e5e7eb}
    .btn-outline:hover{box-shadow:var(--ring)}
    .btn-orange{background:linear-gradient(135deg,var(--primary-orange), #ff974d); color:#fff}
    .btn-success{background:linear-gradient(135deg,#16a34a, #22c55e); color:#fff}
    .btn .btn-ico{margin-right:6px}
    .input{border:1px solid #e5e7eb; border-radius:10px; padding:10px 12px; outline:none}
    .input:focus{border-color:var(--primary-blue); box-shadow:0 0 0 4px rgba(30,77,139,.12)}
    .input-wrap{display:flex; align-items:center; border:1.5px solid #e7eaf0; border-radius:12px; background:#fff}
    .input-wrap:focus-within{border-color:var(--primary-blue); box-shadow:0 0 0 4px rgba(30,77,139,.12)}
    .input-ico{padding:0 10px; font-size:16px; opacity:.85}
    .form-control{width:100%; padding:12px 14px; border:0; outline:none; background:transparent; border-radius:12px}
    .form-group{display:flex; flex-direction:column; gap:6px}
    .form-row{display:flex; gap:14px; align-items:flex-end}
    .form-row .grow{flex:1}

    /* cards */
    .card{background:#fff; border-radius:var(--radius); box-shadow:var(--ring); overflow:hidden}
    .card-head{display:flex; align-items:center; justify-content:space-between; padding:14px 16px; border-bottom:1px solid #eef2f7}
    .card-title{margin:0; font-size:18px}
    .card-tools{display:flex; gap:10px}
    .card-body{padding:14px 16px}

    /* KPIs */
    .kpi-grid{display:grid; grid-template-columns:repeat(3,minmax(0,1fr)); gap:18px}
    .kpi-card{display:flex; align-items:center; gap:14px; background:#fff; border-radius:16px; padding:18px; box-shadow:var(--ring); position:relative}
    .kpi-card::after{content:""; position:absolute; inset:auto 0 0 0; height:4px}
    .kpi-blue::after{background:linear-gradient(90deg,var(--primary-blue), #3b82f6)}
    .kpi-amber::after{background:linear-gradient(90deg,#d97706, #f59e0b)}
    .kpi-green::after{background:linear-gradient(90deg,#16a34a, #22c55e)}
    .kpi-icon{font-size:26px}
    .kpi-value{margin:0; font-size:26px}
    .kpi-label{margin:2px 0 0; color:var(--muted); font-size:13px}

    /* quick actions */
    .quick{display:flex; align-items:center; justify-content:space-between; gap:18px}
    .quick-left{display:flex; gap:12px; align-items:center}
    .plate-search{display:flex; gap:8px; align-items:center}
    .plate-search input{height:40px; border-radius:10px; border:1px solid #e5e7eb; padding:0 12px}

    .filters{display:flex; gap:8px; flex-wrap:wrap}
    .pill{border:1px solid #e5e7eb; background:#fff; color:#334155; padding:8px 12px; border-radius:999px; cursor:pointer; font-weight:700}
    .pill.active{background:linear-gradient(135deg,var(--primary-blue), #567bd6); color:#fff; border-color:transparent}

    /* table */
    .table-wrap{overflow:auto}
    .table{width:100%; border-collapse:separate; border-spacing:0}
    thead th{font-size:12px; text-transform:uppercase; letter-spacing:.04em; color:var(--muted); text-align:left; padding:10px; background:#fbfcfe; position:sticky; top:0}
    tbody td{padding:12px 10px; border-top:1px solid #eef2f7}
    tr:hover td{background:#fafafa}
    .t-right{text-align:right}

    .badge{display:inline-block; padding:4px 10px; border-radius:999px; font-size:12px; font-weight:800}
    .badge-warning{background:#fff7ed; color:#c2410c}
    .badge-primary{background:#eff6ff; color:#1e40af}
    .badge-success{background:#ecfdf5; color:#065f46}

    .empty{display:grid; place-items:center; padding:30px; color:#94a3b8}
    .empty-ico{font-size:28px; margin-bottom:6px}

    /* modal */
    .modal{position:fixed; inset:0; display:flex; align-items:center; justify-content:center; background:rgba(15,23,42,.45); z-index:50}
    .modal-content{background:#fff; width:min(900px, 95vw); max-height:92vh; overflow:auto; border-radius:16px; box-shadow:0 24px 60px rgba(2,6,23,.24)}
    .modal-header{display:flex; align-items:center; justify-content:space-between; padding:16px 18px; border-bottom:1px solid #eef2f7}
    .modal-close{border:0; background:#fff; width:34px; height:34px; border-radius:10px; font-size:20px; cursor:pointer}
    .modal-close:hover{box-shadow:var(--ring)}
    .modal-body{padding:16px 18px}
    .modal-actions{display:flex; justify-content:flex-end; gap:10px; margin-top:12px}

    .subtle-title{margin:10px 0 8px; color:#0f172a}

    .veh-card{display:flex; justify-content:space-between; gap:12px; background:#fbfcfe; border:1px solid #eef2f7; border-radius:12px; padding:12px 14px; margin-bottom:8px}
    .veh-line{color:#0f172a}

    .results{border:1px solid #e7eaf0; border-radius:12px; margin-top:6px; overflow:hidden; max-height:240px; overflow-y:auto; box-shadow:0 8px 20px rgba(2,6,23,.06)}
    .result-item{display:flex; justify-content:space-between; gap:8px; padding:10px 12px; background:#fff; cursor:pointer}
    .result-item:hover{background:#f7f9fc}
    .result-meta{color:#64748b; font-size:12px}

    .qty-wrap{display:inline-flex; align-items:center; gap:6px}
    .qty-btn{width:26px; height:26px; border-radius:8px; border:1px solid #e5e7eb; background:#fff; cursor:pointer}
    .qty{min-width:26px; text-align:center}

    /* toast */
    .toast{position:fixed; left:20px; right:20px; bottom:24px; background:#fff; border:1px solid #ffd3cf; border-left:4px solid #ef4444; color:#b42318; padding:12px 14px; border-radius:12px; box-shadow:0 12px 26px rgba(0,0,0,.08); display:none; font-weight:700}
    .toast.show{display:block; animation:fadeIn .18s ease}
    @keyframes fadeIn{from{opacity:0; transform:translateY(6px)} to{opacity:1; transform:none}}

    @media (max-width: 1024px){
      .kpi-grid{grid-template-columns:1fr 1fr}
      .quick{flex-direction:column; align-items:stretch}
      .quick-left{justify-content:space-between}
    }
    @media (max-width: 640px){
      .kpi-grid{grid-template-columns:1fr}
      .brand-text{display:none}
      .form-row{flex-direction:column}
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // ---------- AUTH ----------
      const token = localStorage.getItem('token');
      const userStr = localStorage.getItem('user');
      if (!token || !userStr) return hardLogout();

      const user = JSON.parse(userStr);
      if (user.rol !== 'tecnico') return hardLogout();
      document.getElementById('userName').textContent = `${user.nombre} ${user.apellido ?? ''}`.trim();

      // logout robusto
      function hardLogout(){
        localStorage.removeItem('token');
        localStorage.removeItem('user');
        location.replace('/');
      }
      window.logout = hardLogout;
      document.addEventListener('click', (ev) => {
        const btn = ev.target.closest('#logoutBtn');
        if (!btn) return;
        ev.preventDefault();
        hardLogout();
      });

      // ---------- UI refs ----------
      const toast = document.getElementById('toast');

      const nuevaOrdenBtn = document.getElementById('nuevaOrdenBtn');
      const nuevaOrdenModal = document.getElementById('nuevaOrdenModal');
      const modalCloseBtns = nuevaOrdenModal.querySelectorAll('.modal-close');

      const placaQuick = document.getElementById('placaQuick');
      const buscarQuickBtn = document.getElementById('buscarQuickBtn');

      const buscarOrdenInput = document.getElementById('buscarOrdenInput');
      const ordenesTbody = document.querySelector('#tablaOrdenes tbody');
      const emptyOrders = document.getElementById('emptyOrders');

      // modal refs
      const placaVehiculo = document.getElementById('placaVehiculo');
      const buscarVehiculoBtn = document.getElementById('buscarVehiculoBtn');
      const vehBox = document.getElementById('vehiculoInfo');
      const vehMarca = document.getElementById('vehMarca');
      const vehModelo = document.getElementById('vehModelo');
      const vehPlaca = document.getElementById('vehPlaca');
      const vehCliente = document.getElementById('vehCliente');
      const vehTelefono = document.getElementById('vehTelefono');

      const tipoServicio = document.getElementById('tipoServicio');
      const buscarServicio = document.getElementById('buscarServicio');
      const serviciosEncontrados = document.getElementById('serviciosEncontrados');
      const serviciosTbody = document.querySelector('#serviciosAgregados tbody');
      const totalOrdenEl = document.getElementById('totalOrden');

      // ---------- state ----------
      let vehiculoSeleccionado = null;
      let serviciosSeleccionados = [];
      let todasLasOrdenes = [];
      let filtroEstado = 'todas';

      // ---------- helpers ----------
      const money = new Intl.NumberFormat('es-EC',{ style:'currency', currency:'USD' });
      const fmt = new Intl.NumberFormat('es-EC');

      const showToast = (msg) => {
        toast.textContent = msg;
        toast.classList.add('show');
        setTimeout(() => toast.classList.remove('show'), 3000);
      };

      const badge = (estado='') => {
        switch(estado.toLowerCase()){
          case 'pendiente': return 'badge badge-warning';
          case 'en proceso': return 'badge badge-primary';
          case 'completado':
          case 'entregado': return 'badge badge-success';
          default: return 'badge badge-primary';
        }
      };

      // ---------- nueva orden (modal) ----------
      nuevaOrdenBtn.addEventListener('click', () => {
        nuevaOrdenModal.style.display = 'flex';
        placaVehiculo.focus();
      });
      modalCloseBtns.forEach(b => b.addEventListener('click', () => {
        nuevaOrdenModal.style.display = 'none';
      }));

      document.getElementById('nuevaOrdenForm').addEventListener('submit', crearOrden);

      buscarVehiculoBtn.addEventListener('click', buscarVehiculo);
      buscarServicio.addEventListener('input', debounce(buscarServicios, 280));
      tipoServicio.addEventListener('change', buscarServicios);

      // botones filtros
      document.querySelectorAll('.pill').forEach(p => {
        p.addEventListener('click', () => {
          document.querySelectorAll('.pill').forEach(x => x.classList.remove('active'));
          p.classList.add('active');
          filtroEstado = p.dataset.estado;
          pintarOrdenes();
        });
      });

      // b√∫squeda r√°pida por placa arriba
      buscarQuickBtn.addEventListener('click', async () => {
        const placa = (placaQuick.value || '').trim();
        if(!placa) return;
        await buscarVehiculo(placa, true); // muestra en modal
        nuevaOrdenModal.style.display = 'flex';
      });

      // b√∫squeda en tabla
      buscarOrdenInput.addEventListener('input', pintarOrdenes);

      // ---------- carga inicial ----------
      cargarMisOrdenes();

      // ---------- funciones de datos ----------
      async function cargarMisOrdenes(){
        try{
          const r = await fetch('http://localhost:3001/api/ordenes/mis-ordenes', {
            headers:{ 'Authorization': `Bearer ${token}` }
          });
          const data = await r.json();
          if(!data?.success) return;
          todasLasOrdenes = data.data || [];
          kpis(todasLasOrdenes);
          pintarOrdenes();
        }catch(e){
          console.error(e);
          showToast('No se pudieron cargar tus √≥rdenes');
        }
      }

      function kpis(list){
        const hoy = new Date().toDateString();
        const asignadasHoy = list.filter(o => new Date(o.fecha_ingreso).toDateString() === hoy).length;
        const enProc = list.filter(o => (o.estado || '').toLowerCase() === 'en proceso').length;
        const comp = list.filter(o => ['completado','entregado'].includes((o.estado||'').toLowerCase())).length;

        document.getElementById('kpiAsignadas').textContent = fmt.format(asignadasHoy);
        document.getElementById('kpiProceso').textContent   = fmt.format(enProc);
        document.getElementById('kpiCompletadas').textContent = fmt.format(comp);
      }

      function pintarOrdenes(){
        const q = (buscarOrdenInput.value || '').toLowerCase().trim();
        let list = [...todasLasOrdenes];

        if (filtroEstado !== 'todas'){
          list = list.filter(o => (o.estado||'').toLowerCase() === filtroEstado);
        }
        if (q){
          list = list.filter(o =>
            String(o.numero_orden).toLowerCase().includes(q) ||
            (o.placa||'').toLowerCase().includes(q) ||
            (o.cliente_nombre||'').toLowerCase().includes(q)
          );
        }

        ordenesTbody.innerHTML = list.map(o => `
          <tr>
            <td>${o.numero_orden}</td>
            <td>${new Date(o.fecha_ingreso).toLocaleString()}</td>
            <td>${o.marca} ${o.modelo} (${o.placa})</td>
            <td>${o.cliente_nombre}</td>
            <td><span class="${badge(o.estado)}">${o.estado}</span></td>
            <td>
              <button class="btn btn-outline btn-sm" onclick="verDetalleOrden(${o.id})">Ver</button>
            </td>
          </tr>
        `).join('');

        emptyOrders.style.display = list.length ? 'none' : 'grid';
      }

      // ---------- buscar veh√≠culo ----------
      async function buscarVehiculo(forcedPlaca=null, desdeQuick=false){
        const placa = (forcedPlaca ?? placaVehiculo.value).trim();
        if(!placa) return;

        try{
          const r = await fetch(`http://localhost:3001/api/vehiculos/buscar/${encodeURIComponent(placa)}`, {
            headers:{ 'Authorization': `Bearer ${token}` }
          });
          const data = await r.json();
          if(data?.success && (data.data?.length || 0) > 0){
            vehiculoSeleccionado = data.data[0];
            vehMarca.textContent   = vehiculoSeleccionado.marca;
            vehModelo.textContent  = vehiculoSeleccionado.modelo;
            vehPlaca.textContent   = vehiculoSeleccionado.placa;
            vehCliente.textContent = vehiculoSeleccionado.cliente_nombre;
            vehTelefono.textContent= vehiculoSeleccionado.telefono || 'N/D';
            vehBox.style.display = 'flex';
            if(desdeQuick){ placaVehiculo.value = placa; }
          }else{
            vehBox.style.display = 'none';
            vehiculoSeleccionado = null;
            showToast('Veh√≠culo no encontrado');
          }
        }catch(e){
          console.error(e);
          showToast('Error al buscar veh√≠culo');
        }
      }

      // ---------- buscar servicios ----------
      async function buscarServicios(){
        const termino = (buscarServicio.value || '').trim();
        const tipo = (tipoServicio.value || '').trim();

        let url = 'http://localhost:3001/api/servicios';
        if (tipo && termino) url = `http://localhost:3001/api/servicios/buscar/${encodeURIComponent(termino)}`;
        else if (tipo)      url = `http://localhost:3001/api/servicios/tipo/${encodeURIComponent(tipo)}`;
        else if (termino)   url = `http://localhost:3001/api/servicios/buscar/${encodeURIComponent(termino)}`;

        try{
          const r = await fetch(url, { headers:{ 'Authorization': `Bearer ${token}` }});
          const data = await r.json();
          if(!data?.success) return (serviciosEncontrados.style.display='none');

          const arr = data.data || [];
          if(!arr.length){ serviciosEncontrados.style.display='none'; return; }

          serviciosEncontrados.innerHTML = arr.map(s => `
            <div class="result-item" onclick='agregarServicio(${JSON.stringify(s).replace(/"/g,"&quot;")})'>
              <div>
                <strong>${s.codigo}</strong> - ${s.descripcion}
                <div class="result-meta">Tipo: ${s.tipo}</div>
              </div>
              <div>${money.format(s.precio_unitario||0)}</div>
            </div>
          `).join('');
          serviciosEncontrados.style.display = 'block';
        }catch(e){
          console.error(e);
        }
      }

      // expuesto para inline
      window.agregarServicio = function(s){
        if (serviciosSeleccionados.find(x => x.id === s.id)) { showToast('Ya est√° agregado'); return; }
        const item = { ...s, cantidad: 1, subtotal: (s.precio_unitario||0) };
        serviciosSeleccionados.push(item);
        serviciosEncontrados.style.display = 'none';
        buscarServicio.value = '';
        pintarServicios();
      };

      window.removerServicio = function(i){
        serviciosSeleccionados.splice(i,1);
        pintarServicios();
      };

      window.incQty = function(i){
        serviciosSeleccionados[i].cantidad += 1;
        serviciosSeleccionados[i].subtotal = (serviciosSeleccionados[i].precio_unitario||0) * serviciosSeleccionados[i].cantidad;
        pintarServicios();
      };

      window.decQty = function(i){
        if (serviciosSeleccionados[i].cantidad <= 1) return;
        serviciosSeleccionados[i].cantidad -= 1;
        serviciosSeleccionados[i].subtotal = (serviciosSeleccionados[i].precio_unitario||0) * serviciosSeleccionados[i].cantidad;
        pintarServicios();
      };

      function pintarServicios(){
        serviciosTbody.innerHTML = serviciosSeleccionados.map((s,i) => `
          <tr>
            <td>${s.codigo}</td>
            <td>${s.descripcion}</td>
            <td>
              <div class="qty-wrap">
                <button class="qty-btn" onclick="decQty(${i})">‚àí</button>
                <span class="qty">${s.cantidad}</span>
                <button class="qty-btn" onclick="incQty(${i})">+</button>
              </div>
            </td>
            <td>${money.format(s.precio_unitario||0)}</td>
            <td>${money.format(s.subtotal||0)}</td>
            <td><button class="btn btn-outline" onclick="removerServicio(${i})">‚úï</button></td>
          </tr>
        `).join('');

        const total = serviciosSeleccionados.reduce((a,b) => a + (b.subtotal||0), 0);
        totalOrdenEl.textContent = money.format(total);
      }

      // ---------- crear orden ----------
      async function crearOrden(ev){
        ev.preventDefault();
        if(!vehiculoSeleccionado) return showToast('Busca y selecciona un veh√≠culo');
        if(!serviciosSeleccionados.length) return showToast('Agrega al menos un servicio');

        const ordenData = {
          id_vehiculo: vehiculoSeleccionado.id,
          observaciones: (document.getElementById('observaciones').value || '').trim(),
          servicios: serviciosSeleccionados.map(s => ({
            id_servicio: s.id,
            cantidad: s.cantidad,
            precio_unitario: s.precio_unitario
          }))
        };

        try{
          const r = await fetch('http://localhost:3001/api/ordenes', {
            method:'POST',
            headers:{ 'Content-Type':'application/json', 'Authorization': `Bearer ${token}` },
            body: JSON.stringify(ordenData)
          });
          const data = await r.json();
          if(!data?.success){ showToast(data?.message || 'No se pudo crear la orden'); return; }

          nuevaOrdenModal.style.display = 'none';
          // reset UI
          document.getElementById('nuevaOrdenForm').reset();
          vehiculoSeleccionado = null;
          serviciosSeleccionados = [];
          vehBox.style.display = 'none';
          pintarServicios();
          showToast(`Orden #${data.numero_orden} creada correctamente`);
          cargarMisOrdenes();
        }catch(e){
          console.error(e);
          showToast('Error al crear la orden');
        }
      }

      // ---------- ver detalle ----------
      window.verDetalleOrden = async function(ordenId){
        try{
          const r = await fetch(`http://localhost:3001/api/ordenes/${ordenId}/detalle`, {
            headers:{ 'Authorization': `Bearer ${token}` }
          });
          const data = await r.json();
          if(!data?.success) return;

          const detalle = (data.data || []).map(d => (
            `${d.codigo} - ${d.descripcion} (x${d.cantidad})  ${money.format(d.precio_unitario)}  ‚Üí  ${money.format(d.subtotal)}`
          )).join('\n');

          // toast largo: usa alert estilizada simple
          showToast('Detalle obtenido. Revisa la consola.');
          console.log('Detalle de orden #'+ordenId+'\n\n'+detalle);
        }catch(e){
          console.error(e);
        }
      };

      // ---------- utils ----------
      function debounce(fn, t=300){
        let id; return (...args) => { clearTimeout(id); id = setTimeout(() => fn(...args), t); };
      }
    });
  </script>
</Layout>
