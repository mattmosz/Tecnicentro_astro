---
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Panel T√©cnico - TecniCentro Ibarra Express">
  <!-- NAVBAR -->
  <header class="navbar" role="banner">
    <div class="container">
      <a href="/tecnico/dashboard" class="brand">
        <span class="logo-circle">üîß</span>
        <span class="brand-text">TecniCentro Ibarra Express</span>
      </a>

      <div class="user-menu">
        <span id="userName" class="user-chip">T√©cnico</span>
        <button
          type="button"
          class="btn btn-orange"
          id="logoutBtn"
          onclick="window.logout?.()">Cerrar Sesi√≥n</button
        >
      </div>
    </div>
  </header>

  <main class="page">
    <div class="container">
      <!-- KPIs -->
      <section class="section">
        <div class="kpi-grid">
          <article class="kpi-card kpi-blue">
            <div class="kpi-icon">üß∞</div>
            <div>
              <h3 id="kpiAsignadas" class="kpi-value">0</h3>
              <p class="kpi-label">Asignadas hoy</p>
            </div>
          </article>
          <article class="kpi-card kpi-amber">
            <div class="kpi-icon">‚öôÔ∏è</div>
            <div>
              <h3 id="kpiProceso" class="kpi-value">0</h3>
              <p class="kpi-label">En proceso</p>
            </div>
          </article>
          <article class="kpi-card kpi-green">
            <div class="kpi-icon">‚úÖ</div>
            <div>
              <h3 id="kpiCompletadas" class="kpi-value">0</h3>
              <p class="kpi-label">Completadas</p>
            </div>
          </article>
        </div>
      </section>

      <!-- Acciones r√°pidas -->
      <section class="section">
        <div class="quick">
          <div class="quick-left">
            <button class="btn btn-orange" id="btnNuevo">Nueva Orden</button>
          </div>
          <div class="quick-right">
            <div class="filters" role="tablist" aria-label="Estados">
              <button class="pill active" data-estado="todas">Todas</button>
              <button class="pill" data-estado="pendiente">Pendiente</button>
              <button class="pill" data-estado="en proceso">En proceso</button>
              <button class="pill" data-estado="completado">Completada</button>
            </div>
          </div>
        </div>
      </section>

      <!-- Mis √≥rdenes -->
      <section class="section">
        <div class="card">
          <div class="card-head">
            <h2 class="card-title">Mis √ìrdenes</h2>
            <div class="card-tools">
              <input
                id="buscarOrdenInput"
                class="input"
                placeholder="Buscar (placa / cliente / #orden)"
              />
            </div>
          </div>

          <div id="ordenesContainer" class="card-body">
            <div class="table-wrap">
              <table
                class="table"
                id="tablaOrdenes"
                aria-describedby="tabla de √≥rdenes"
              >
                <thead>
                  <tr>
                    <th>N¬∞</th>
                    <th>Fecha</th>
                    <th>Veh√≠culo</th>
                    <th>Cliente</th>
                    <th>Estado</th>
                    <th style="width:120px">Acciones</th>
                  </tr>
                </thead>
                <tbody><!-- se llena por JS --></tbody>
              </table>
            </div>
            <div id="emptyOrders" class="empty" style="display:none;">
              <div class="empty-ico">üì≠</div>
              <p>Sin √≥rdenes para mostrar.</p>
            </div>
          </div>
        </div>
      </section>
    </div>
  </main>

  <!-- Toast -->
  <div id="toast" class="toast" role="status" aria-live="polite"></div>

  <!-- Modal para crear orden -->
  <div id="ordenModal">
    <div class="modal">
      <div class="modal-head">
        <h3 id="modalTitle">Nueva Orden de Trabajo</h3>
        <button class="icon" type="button" id="closeModal">‚úñ</button>
      </div>
      <div class="modal-body">
        <form id="ordenForm">
          <div class="grid2">
            <label>
              Cliente *
              <select
                name="id_cliente"
                id="clienteSelect"
                required
                class="input"
              >
                <option value="">Seleccionar cliente</option>
              </select>
            </label>
            <label>
              Veh√≠culo *
              <select
                name="id_vehiculo"
                id="vehiculoSelect"
                required
                class="input"
                disabled
              >
                <option value="">Primero seleccione un cliente</option>
              </select>
            </label>
          </div>
          <label>
            Observaciones
            <textarea
              name="observaciones"
              class="input"
              rows="3"
              placeholder="Observaciones sobre el veh√≠culo o trabajo a realizar"
            ></textarea>
          </label>

          <div class="servicios-section">
            <div class="section-header">
              <h4>Servicios a Realizar</h4>
              <button
                type="button"
                id="btnAgregarServicio"
                class="btn btn-small btn-outline">+ Agregar Servicio</button
              >
            </div>
            <div id="serviciosContainer">
              <div class="no-servicios" id="noServiciosMsg">
                <p>
                  No hay servicios agregados. Haz clic en "Agregar Servicio"
                  para comenzar.
                </p>
              </div>
            </div>
            <div class="total-section" id="totalSection" style="display: none;">
              <div class="total-general">
                <strong
                  >Total General: $<span id="totalGeneral">0.00</span></strong
                >
              </div>
            </div>
          </div>
        </form>
      </div>
      <div class="modal-foot">
        <button class="btn btn-outline" type="button" id="cancelarModal"
          >Cancelar</button
        >
        <button class="btn btn-orange" type="submit" form="ordenForm"
          >Guardar</button
        >
      </div>
    </div>
  </div>
  <!-- Modal DETALLE DE ORDEN -->
  <div id="detalleModal">
    <div class="modal det">
      <div class="modal-head det-head">
        <div class="det-title">
          <span class="det-ico">üîß</span>
          <div>
            <h3>Detalle de Orden</h3>
            <small id="detNum" class="det-num">#‚Äî</small>
          </div>
        </div>

        <div class="det-head-actions">
          <span id="detEstado" class="badge">‚Äî</span>
          <button class="icon" type="button" id="detCloseBtn">‚úñ</button>
        </div>
      </div>

      <div class="modal-body det-body">
        <!-- Meta en cards -->
        <div class="det-grid">
          <div class="det-card">
            <div class="det-label">Cliente</div>
            <div id="detCliente" class="det-value">‚Äî</div>
          </div>
          <div class="det-card">
            <div class="det-label">Veh√≠culo</div>
            <div id="detVehiculo" class="det-value">‚Äî</div>
          </div>
          <div class="det-card">
            <div class="det-label">Fecha</div>
            <div id="detFecha" class="det-value">‚Äî</div>
          </div>
          <div class="det-card obs">
            <div class="det-label">Obs.</div>
            <div id="detObs" class="det-value">‚Äî</div>
          </div>
        </div>

        <!-- Tabla -->
        <div class="table-wrap soft det-table">
          <table
            class="table"
            id="detTable"
            aria-describedby="Detalle de servicios"
          >
            <thead>
              <tr>
                <th style="width:140px">C√≥digo</th>
                <th>Descripci√≥n</th>
                <th class="t-right" style="width:100px">Cant.</th>
                <th class="t-right" style="width:120px">Precio</th>
                <th class="t-right" style="width:140px">Subtotal</th>
              </tr>
            </thead>
            <tbody><!-- rows din√°micas --></tbody>
          </table>
        </div>
      </div>

      <!-- Barra de totales fija -->
      <div class="det-totalbar">
        <div class="det-totalline">
          <span>Total</span>
          <strong id="detTotal">$0.00</strong>
        </div>
      </div>

      <div class="modal-foot det-foot">
        <button class="btn btn-outline" id="detCloseBtn2">Cerrar</button>
        <a
          class="btn btn-orange"
          id="detImprimirBtn"
          target="_blank"
          rel="noopener">Imprimir</a
        >
      </div>
    </div>
  </div>

  <style>
    :root {
      /* caen a tu paleta global si ya existen */
      --text: #0f172a;
      --muted: #64748b;
      --ring: 0 1px 2px rgba(0, 0, 0, 0.04), 0 10px 20px rgba(2, 6, 23, 0.08);
      --radius: 16px;
      --container: 1200px;
    }

    /* -------- layout -------- */
    .container {
      max-width: var(--container);
      margin-inline: auto;
      padding: 0 20px;
    }
    .page {
      padding: 20px 0 48px;
      background: #f7f9fc;
    }

    /* navbar */
    .navbar {
      position: sticky;
      top: 0;
      z-index: 20;
      background: rgba(255, 255, 255, 0.92);
      border-bottom: 1px solid #eef2f7;
      backdrop-filter: saturate(180%) blur(10px);
    }
    .navbar .container {
      display: flex;
      align-items: center;
      justify-content: space-between;
      height: 64px;
    }
    .brand {
      display: flex;
      align-items: center;
      gap: 10px;
      text-decoration: none;
      color: var(--text);
      font-weight: 800;
    }
    .logo-circle {
      display: grid;
      place-items: center;
      width: 36px;
      height: 36px;
      border-radius: 50%;
      background: linear-gradient(135deg, var(--primary-orange), #ffb07a);
      box-shadow: var(--ring);
    }
    .brand-text {
      letter-spacing: 0.2px;
    }
    .user-menu {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .user-chip {
      font-weight: 700;
    }

    /* buttons / inputs */
    .btn {
      border: 0;
      border-radius: 10px;
      padding: 10px 14px;
      font-weight: 700;
      cursor: pointer;
      background: #fff;
    }
    .btn-outline {
      border: 1px solid #e5e7eb;
    }
    .btn-outline:hover {
      box-shadow: var(--ring);
    }
    .btn-orange {
      background: linear-gradient(135deg, var(--primary-orange), #ff974d);
      color: #fff;
    }
    .btn-success {
      background: linear-gradient(135deg, #16a34a, #22c55e);
      color: #fff;
    }
    .btn .btn-ico {
      margin-right: 6px;
    }
    .input {
      border: 1px solid #e5e7eb;
      border-radius: 10px;
      padding: 10px 12px;
      outline: none;
    }
    .input:focus {
      border-color: var(--primary-blue);
      box-shadow: 0 0 0 4px rgba(30, 77, 139, 0.12);
    }
    .input-wrap {
      display: flex;
      align-items: center;
      border: 1.5px solid #e7eaf0;
      border-radius: 12px;
      background: #fff;
    }
    .input-wrap:focus-within {
      border-color: var(--primary-blue);
      box-shadow: 0 0 0 4px rgba(30, 77, 139, 0.12);
    }
    .input-ico {
      padding: 0 10px;
      font-size: 16px;
      opacity: 0.85;
    }
    .form-control {
      width: 100%;
      padding: 12px 14px;
      border: 0;
      outline: none;
      background: transparent;
      border-radius: 12px;
    }
    .form-group {
      display: flex;
      flex-direction: column;
      gap: 6px;
    }
    .form-row {
      display: flex;
      gap: 14px;
      align-items: flex-end;
    }
    .form-row .grow {
      flex: 1;
    }

    /* cards */
    .card {
      background: #fff;
      border-radius: var(--radius);
      box-shadow: var(--ring);
      overflow: hidden;
    }
    .card-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 14px 16px;
      border-bottom: 1px solid #eef2f7;
    }
    .card-title {
      margin: 0;
      font-size: 18px;
    }
    .card-tools {
      display: flex;
      gap: 10px;
    }
    .card-body {
      padding: 14px 16px;
    }

    /* KPIs */
    .kpi-grid {
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
      gap: 18px;
    }
    .kpi-card {
      display: flex;
      align-items: center;
      gap: 14px;
      background: #fff;
      border-radius: 16px;
      padding: 18px;
      box-shadow: var(--ring);
      position: relative;
    }
    .kpi-card::after {
      content: "";
      position: absolute;
      inset: auto 0 0 0;
      height: 4px;
    }
    .kpi-blue::after {
      background: linear-gradient(90deg, var(--primary-blue), #3b82f6);
    }
    .kpi-amber::after {
      background: linear-gradient(90deg, #d97706, #f59e0b);
    }
    .kpi-green::after {
      background: linear-gradient(90deg, #16a34a, #22c55e);
    }
    .kpi-icon {
      font-size: 26px;
    }
    .kpi-value {
      margin: 0;
      font-size: 26px;
    }
    .kpi-label {
      margin: 2px 0 0;
      color: var(--muted);
      font-size: 13px;
    }

    /* quick actions */
    .quick {
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 18px;
    }
    .quick-left {
      display: flex;
      gap: 12px;
      align-items: center;
    }
    .plate-search {
      display: flex;
      gap: 8px;
      align-items: center;
    }
    .plate-search input {
      height: 40px;
      border-radius: 10px;
      border: 1px solid #e5e7eb;
      padding: 0 12px;
    }

    .filters {
      display: flex;
      gap: 8px;
      flex-wrap: wrap;
    }
    .pill {
      border: 1px solid #e5e7eb;
      background: #fff;
      color: #334155;
      padding: 8px 12px;
      border-radius: 999px;
      cursor: pointer;
      font-weight: 700;
    }
    .pill.active {
      background: linear-gradient(135deg, var(--primary-blue), #567bd6);
      color: #fff;
      border-color: transparent;
    }

    /* table */
    .table-wrap {
      overflow: auto;
    }
    .table {
      width: 100%;
      border-collapse: separate;
      border-spacing: 0;
    }
    thead th {
      font-size: 12px;
      text-transform: uppercase;
      letter-spacing: 0.04em;
      color: var(--muted);
      text-align: left;
      padding: 10px;
      background: #fbfcfe;
      position: sticky;
      top: 0;
    }
    tbody td {
      padding: 12px 10px;
      border-top: 1px solid #eef2f7;
    }
    tr:hover td {
      background: #fafafa;
    }
    .t-right {
      text-align: right;
    }

    .badge {
      display: inline-block;
      padding: 4px 10px;
      border-radius: 999px;
      font-size: 12px;
      font-weight: 800;
    }
    .badge-warning {
      background: #fff7ed;
      color: #c2410c;
    }
    .badge-primary {
      background: #eff6ff;
      color: #1e40af;
    }
    .badge-success {
      background: #ecfdf5;
      color: #065f46;
    }

    .empty {
      display: grid;
      place-items: center;
      padding: 30px;
      color: #94a3b8;
    }
    .empty-ico {
      font-size: 28px;
      margin-bottom: 6px;
    }

    /* modal */
    .modal {
      position: fixed;
      inset: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(15, 23, 42, 0.45);
      z-index: 50;
    }
    .modal-content {
      background: #fff;
      width: min(900px, 95vw);
      max-height: 92vh;
      overflow: auto;
      border-radius: 16px;
      box-shadow: 0 24px 60px rgba(2, 6, 23, 0.24);
    }
    .modal-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px 18px;
      border-bottom: 1px solid #eef2f7;
    }
    .modal-close {
      border: 0;
      background: #fff;
      width: 34px;
      height: 34px;
      border-radius: 10px;
      font-size: 20px;
      cursor: pointer;
    }
    .modal-close:hover {
      box-shadow: var(--ring);
    }
    .modal-body {
      padding: 16px 18px;
    }
    .modal-actions {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      margin-top: 12px;
    }

    .subtle-title {
      margin: 10px 0 8px;
      color: #0f172a;
    }

    .veh-card {
      display: flex;
      justify-content: space-between;
      gap: 12px;
      background: #fbfcfe;
      border: 1px solid #eef2f7;
      border-radius: 12px;
      padding: 12px 14px;
      margin-bottom: 8px;
    }
    .veh-line {
      color: #0f172a;
    }

    .results {
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      margin-top: 6px;
      overflow: hidden;
      max-height: 240px;
      overflow-y: auto;
      box-shadow: 0 8px 20px rgba(2, 6, 23, 0.06);
    }
    .result-item {
      display: flex;
      justify-content: space-between;
      gap: 8px;
      padding: 10px 12px;
      background: #fff;
      cursor: pointer;
    }
    .result-item:hover {
      background: #f7f9fc;
    }
    .result-meta {
      color: #64748b;
      font-size: 12px;
    }

    .qty-wrap {
      display: inline-flex;
      align-items: center;
      gap: 6px;
    }
    .qty-btn {
      width: 26px;
      height: 26px;
      border-radius: 8px;
      border: 1px solid #e5e7eb;
      background: #fff;
      cursor: pointer;
    }
    .qty {
      min-width: 26px;
      text-align: center;
    }

    /* toast */
    .toast {
      position: fixed;
      left: 20px;
      right: 20px;
      bottom: 24px;
      background: #fff;
      border: 1px solid #ffd3cf;
      border-left: 4px solid #ef4444;
      color: #b42318;
      padding: 12px 14px;
      border-radius: 12px;
      box-shadow: 0 12px 26px rgba(0, 0, 0, 0.08);
      display: none;
      font-weight: 700;
    }
    .toast.show {
      display: block;
      animation: fadeIn 0.18s ease;
    }
    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(6px);
      }
      to {
        opacity: 1;
        transform: none;
      }
    }

    @media (max-width: 1024px) {
      .kpi-grid {
        grid-template-columns: 1fr 1fr;
      }
      .quick {
        flex-direction: column;
        align-items: stretch;
      }
      .quick-left {
        justify-content: space-between;
      }
    }
    @media (max-width: 640px) {
      .kpi-grid {
        grid-template-columns: 1fr;
      }
      .brand-text {
        display: none;
      }
      .form-row {
        flex-direction: column;
      }
    }

    /* ==== FIX modal t√©cnico: solo CSS del modal ==== */

    /* Un peque√±o padding al overlay para que el contenido no toque los bordes */
    #nuevaOrdenModal {
      padding: 16px !important;
      box-sizing: border-box !important;
    }

    /* El contenedor del modal NO puede superar el viewport; sin scroll horizontal */
    #nuevaOrdenModal .modal-content {
      display: flex !important; /* header + body + footer en columna  */
      flex-direction: column !important;
      box-sizing: border-box !important;
      width: min(
        980px,
        calc(100vw - 32px)
      ) !important; /* 16px por lado = 32px  */
      max-height: calc(100vh - 32px) !important;
      overflow: hidden !important; /* corta cualquier desborde en X/Y    */
      border-radius: 16px;
    }

    /* El cuerpo del modal hace el scroll interno; no crece a lo ancho */
    #nuevaOrdenModal .modal-body {
      flex: 1 1 auto !important;
      min-width: 0 !important; /* evita ‚Äúempujar‚Äù el ancho            */
      overflow: auto !important; /* scroll dentro del modal             */
    }

    /* Tablas u otros bloques anchos: scroll solo dentro, nunca afuera */
    #nuevaOrdenModal .table-wrap.soft {
      max-width: 100% !important;
      overflow-x: auto !important;
    }

    /* Footer pegado al borde inferior del modal y con ancho completo */
    #nuevaOrdenModal .modal-actions {
      position: sticky !important;
      bottom: 0;
      left: 0;
      right: 0;
      width: 100% !important;
      box-sizing: border-box !important;
      display: flex !important;
      justify-content: flex-end !important;
      gap: 12px !important;
      padding: 14px 16px !important;
      border-top: 1px solid #eef2f7 !important;
      background: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.96) 0%,
        #fff 80%
      ) !important;
      overflow-x: hidden !important; /* por si acaso, nada de X en el pie  */
    }

    /* Evita que el texto de los botones se parta */
    #nuevaOrdenModal .modal-actions .btn {
      white-space: nowrap !important;
    }

    /* Seguridad: todo lo del modal en border-box para que los paddings no sumen ancho */
    #nuevaOrdenModal *,
    #nuevaOrdenModal *::before,
    #nuevaOrdenModal *::after {
      box-sizing: border-box !important;
    }
    /* === FIX DEFINITIVO: .modal-close del header vs footer === */

    /* El bot√≥n ‚úï del header s√≠ es peque√±o */
    #nuevaOrdenModal .modal-header > .modal-close {
      width: 36px !important;
      height: 36px !important;
      padding: 0 !important;
      font-size: 20px !important;
      line-height: 1 !important;
    }

    /* El bot√≥n "Cancelar" del footer debe ser un bot√≥n normal */
    #nuevaOrdenModal .modal-actions .modal-close {
      width: auto !important;
      height: auto !important;
      padding: 10px 16px !important;
      font-size: 16px !important;
      line-height: 1.2 !important;
      display: inline-flex !important;
      align-items: center;
      justify-content: center;

      /* tus estilos de apariencia */
      background: #f3f4f6 !important;
      color: #374151 !important;
      border: 1px solid #e5e7eb !important;
      border-radius: 10px !important;
      white-space: nowrap !important;
    }

    /* Por si acaso, que el pie no recorte nada */
    #nuevaOrdenModal .modal-actions {
      overflow: visible !important;
    }
    /* =========================
   MEJORAS VISUALES DEL MODAL (solo CSS)
   ========================= */

    /* 1) Estructura y respiraci√≥n */
    #nuevaOrdenModal .modal-header {
      padding: 18px 22px;
    }
    #nuevaOrdenModal .modal-body {
      padding: 20px 22px 0;
    }
    #nuevaOrdenModal .subtle-title {
      margin: 16px 0 10px;
    }

    /* 2) Inputs/Select: alto consistente y foco elegante */
    #nuevaOrdenModal .form-control,
    #nuevaOrdenModal select.form-control {
      height: 44px;
      border-radius: 12px;
    }
    #nuevaOrdenModal .input-wrap {
      min-height: 44px;
    }
    #nuevaOrdenModal .input-wrap:focus-within {
      border-color: #2563eb;
      box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.12);
    }

    /* 3) Columna ‚ÄúTipo‚Äù con ancho fijo para que todo alinee mejor */
    #nuevaOrdenModal .form-row .form-group:first-child {
      min-width: 220px;
    }

    /* 4) Dropdown de resultados: look + no tapa el footer */
    #nuevaOrdenModal .results {
      border-radius: 12px;
      border: 1px solid #e6eaf1;
      box-shadow: 0 18px 40px rgba(2, 6, 23, 0.14);
      max-height: calc(60vh); /* no invadir el footer */
      overflow: auto;
    }
    #nuevaOrdenModal .result-item {
      gap: 12px;
      padding: 12px 14px;
      line-height: 1.15;
    }
    #nuevaOrdenModal .result-item + .result-item {
      border-top: 1px dashed #f1f5f9;
    }
    #nuevaOrdenModal .result-item:hover {
      background: #f8fafc;
    }

    /* Scrollbar suave dentro de resultados / tabla */
    #nuevaOrdenModal .results::-webkit-scrollbar,
    #nuevaOrdenModal .table-wrap.soft::-webkit-scrollbar {
      height: 8px;
      width: 8px;
    }
    #nuevaOrdenModal .results::-webkit-scrollbar-thumb,
    #nuevaOrdenModal .table-wrap.soft::-webkit-scrollbar-thumb {
      background: #cbd5e1;
      border-radius: 8px;
    }

    /* 5) Tabla: header flotante con sombra, filas cebreadas y celdas m√°s compactas */
    #nuevaOrdenModal thead th {
      top: 0;
      background: #f8fafc;
      border-bottom: 1px solid #eef2f7;
      box-shadow: 0 2px 0 rgba(2, 6, 23, 0.03);
    }
    #nuevaOrdenModal tbody td {
      padding: 10px 12px;
    }
    #nuevaOrdenModal tbody tr:nth-child(odd) td {
      background: #fff;
    }
    #nuevaOrdenModal tbody tr:nth-child(even) td {
      background: #fcfdff;
    }
    #nuevaOrdenModal tbody tr:hover td {
      background: #f7fafc;
    }

    /* 6) Cantidades (+/-) m√°s c√≥modas */
    #nuevaOrdenModal .qty-btn {
      width: 30px;
      height: 30px;
    }
    #nuevaOrdenModal .qty {
      min-width: 30px;
    }

    /* 7) Footer pegajoso con leve blur y separaci√≥n visual del contenido */
    #nuevaOrdenModal .modal-actions {
      background: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.9) 0%,
        #fff 70%
      );
      backdrop-filter: blur(4px);
      border-top: 1px solid #eef2f7;
      box-shadow: 0 -6px 20px rgba(2, 6, 23, 0.06);
    }

    /* 8) Botones: tama√±os iguales y estados */
    #nuevaOrdenModal .modal-actions .btn {
      height: 44px;
      padding: 0 16px;
      font-weight: 800;
    }
    #nuevaOrdenModal .modal-actions .btn.btn-success {
      box-shadow: 0 8px 18px rgba(22, 163, 74, 0.22);
    }
    #nuevaOrdenModal .modal-actions .btn.modal-close {
      background: #f3f4f6;
      color: #111827;
      border: 1px solid #e5e7eb;
    }
    #nuevaOrdenModal .modal-actions .btn.modal-close:hover {
      background: #e5e7eb;
    }

    /* 9) Peque√±o realce al total */
    #nuevaOrdenModal tfoot td strong#totalOrden {
      font-size: 1.1rem;
    }

    /* 10) Micro-detalles: evitar desbordes y cortes de texto */
    #nuevaOrdenModal .table-wrap.soft {
      border-radius: 12px;
    }
    #nuevaOrdenModal .modal-content {
      overflow: hidden;
    }
    #nuevaOrdenModal .modal-body,
    #nuevaOrdenModal .table-wrap.soft {
      overflow-x: auto;
    }
    #nuevaOrdenModal .modal-actions .btn {
      white-space: nowrap;
    }
  </style>
  <style is:global>
    /* ====== Dropdown de resultados (buscar servicios) ====== */
    #nuevaOrdenModal .form-group.grow {
      position: relative;
    }

    #nuevaOrdenModal .results {
      position: absolute;
      inset-inline: 0; /* mismo ancho que el input */
      top: 100%;
      margin-top: 8px;
      z-index: 30; /* por encima de la tabla */
      background: #fff;
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      box-shadow: 0 14px 30px rgba(2, 6, 23, 0.12);
      overflow: auto;
      max-height: min(50vh, 360px); /* no tapa el footer del modal */
      overscroll-behavior: contain;
    }

    /* Cabecera ‚Äúfake‚Äù tipo tabla */
    #nuevaOrdenModal .results::before {
      content: "C√ìDIGO   DESCRIPCI√ìN   PRECIO";
      display: flex;
      gap: 12px;
      align-items: center;
      padding: 8px 12px;
      font-size: 12px;
      font-weight: 800;
      letter-spacing: 0.04em;
      color: #64748b;
      text-transform: uppercase;
      background: #fbfcfe;
      border-bottom: 1px solid #eef2f7;
      position: sticky;
      top: 0;
      z-index: 1;
    }

    /* Fila */
    #nuevaOrdenModal .result-item {
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 10px 12px;
      cursor: pointer;
    }
    #nuevaOrdenModal .result-item:hover {
      background: #f7f9fc;
    }

    /* Columna izquierda (c√≥digo + descripci√≥n + meta) */
    #nuevaOrdenModal .result-item > div:first-child {
      flex: 1 1 auto;
      min-width: 0; /* permite elipsis */
      display: flex;
      align-items: center;
      gap: 12px;
    }

    /* C√≥digo como chip monoespaciado con ancho fijo */
    #nuevaOrdenModal .result-item strong {
      display: inline-block;
      width: 110px;
      text-align: center;
      font-family: ui-monospace, SFMono-Regular, Menlo, monospace;
      font-weight: 800;
      color: #0f172a;
      background: #f1f5f9;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      padding: 3px 8px;
      white-space: nowrap;
      flex: 0 0 auto;
    }

    /* Descripci√≥n en una sola l√≠nea con elipsis */
    #nuevaOrdenModal .result-item > div:first-child {
      /* ya definido arriba; agregamos el contenedor de texto */
    }
    #nuevaOrdenModal .result-item > div:first-child > :not(strong) {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
    }

    /* Meta (Tipo: ‚Ä¶) en estilo sutil debajo cuando envuelva */
    #nuevaOrdenModal .result-meta {
      display: block;
      margin-left: 122px; /* alinea con el chip del c√≥digo */
      color: #64748b;
      font-size: 12px;
      line-height: 1.2;
    }

    /* Columna derecha (precio) fija y marcada */
    #nuevaOrdenModal .result-item > div:last-child {
      flex: 0 0 auto;
      font-weight: 800;
      color: #111827;
      white-space: nowrap;
      min-width: 90px;
      text-align: right;
    }

    /* Bordes entre filas */
    #nuevaOrdenModal .result-item + .result-item {
      border-top: 1px solid #f1f5f9;
    }

    /* Responsive */
    @media (max-width: 640px) {
      #nuevaOrdenModal .results {
        max-height: min(55vh, 420px);
      }
      #nuevaOrdenModal .result-item strong {
        width: 88px;
      }
      #nuevaOrdenModal .result-meta {
        margin-left: 100px;
      }
    }
    /* ============================
   MODAL ‚Äì Resultados como tabla
   ============================ */

    /* contenedor del dropdown */
    #nuevaOrdenModal .results {
      position: relative;
      margin-top: 8px;
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      overflow: auto;
      max-height: 56vh; /* alto c√≥modo; scroll interno */
      background: #fff;
      box-shadow: 0 14px 30px rgba(2, 6, 23, 0.12);
      padding-top: 42px; /* espacio para la cabecera sticky */
    }

    /* cabecera ‚Äútabla‚Äù (izq.)  */
    #nuevaOrdenModal .results::before {
      content: "C√ìDIGO ¬∑ DESCRIPCI√ìN";
      position: sticky;
      top: 0;
      left: 0;
      display: block;
      padding: 10px 14px;
      background: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.04em;
      color: #64748b;
      z-index: 2;
    }

    /* cabecera ‚Äútabla‚Äù (der. PRECIO) */
    #nuevaOrdenModal .results::after {
      content: "PRECIO";
      position: sticky;
      top: 0;
      float: right; /* permanece al borde derecho */
      margin-top: -42px; /* mismo alto de la barra para superponer */
      padding: 10px 14px;
      background: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.04em;
      color: #64748b;
      z-index: 3;
    }

    /* fila estilo ‚Äútabla‚Äù: 2 columnas (texto + precio) */
    #nuevaOrdenModal .result-item {
      display: grid;
      grid-template-columns: 1fr auto; /* izq. flexible, der. precio auto */
      align-items: center;
      gap: 12px;
      padding: 12px 14px;
      background: #fff;
      border-top: 1px solid #f1f5f9;
      cursor: pointer;
    }
    #nuevaOrdenModal .result-item:hover {
      background: #f9fafb;
    }

    /* bloque izquierdo (c√≥digo ‚Äúpill‚Äù + descripci√≥n + meta) */
    #nuevaOrdenModal .result-item > div:first-child {
      min-width: 0; /* evita empujar la columna de precio */
      color: #0f172a;
      line-height: 1.25;
      display: block;
    }

    /* c√≥digo destacado como ‚Äúpill‚Äù */
    #nuevaOrdenModal .result-item > div:first-child strong {
      display: inline-block;
      margin-right: 10px;
      padding: 6px 10px;
      border-radius: 10px;
      background: #eff6ff;
      color: #1e40af;
      font-weight: 800;
      white-space: nowrap;
    }

    /* meta inferior (tipo, etc.) */
    #nuevaOrdenModal .result-meta {
      margin-top: 4px;
      font-size: 12px;
      color: #64748b;
    }

    /* columna precio a la derecha, bold y monoespaciado sutil */
    #nuevaOrdenModal .result-item > div:last-child {
      font-weight: 800;
      font-variant-numeric: tabular-nums; /* alinea d√≠gitos */
      text-align: right;
      white-space: nowrap;
      color: #0f172a;
      min-width: 84px; /* ancho m√≠nimo para $xx,xxx */
    }

    /* separaci√≥n visual arriba cuando el dropdown se abre bajo el input */
    #nuevaOrdenModal .input-wrap + .results {
      margin-top: 6px;
    }

    /* barra de scroll discreta (WebKit) */
    #nuevaOrdenModal .results::-webkit-scrollbar {
      height: 10px;
      width: 10px;
    }
    #nuevaOrdenModal .results::-webkit-scrollbar-thumb {
      background: #e2e8f0;
      border-radius: 999px;
    }
    #nuevaOrdenModal .results::-webkit-scrollbar-track {
      background: transparent;
    }

    /* Responsive: en pantallas muy estrechas el precio baja a una segunda l√≠nea */
    @media (max-width: 520px) {
      #nuevaOrdenModal .result-item {
        grid-template-columns: 1fr;
      }
      #nuevaOrdenModal .result-item > div:last-child {
        text-align: left;
        margin-top: 6px;
      }
      #nuevaOrdenModal .results::after {
        display: none; /* oculta encabezado ‚ÄúPRECIO‚Äù en m√≥vil */
      }
      #nuevaOrdenModal .results {
        padding-top: 42px; /* conserva encabezado izquierdo */
      }
    }
    /* ===== Resultados del buscador con encabezado sticky tipo tabla ===== */
    #nuevaOrdenModal .results {
      /* contenedor scrolleable */
      --resHeadH: 42px;
      position: relative;
      overflow: auto;
      max-height: 56vh;
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      background: #fff;
      box-shadow: 0 14px 30px rgba(2, 6, 23, 0.12);
      padding-top: 0; /* << quitamos el padding que ‚Äúmueve‚Äù el header */
    }

    /* dejamos espacio para el header sin usar padding */
    #nuevaOrdenModal .results > :first-child {
      margin-top: var(--resHeadH); /* el listado comienza debajo del header */
    }

    /* barra de encabezado (izquierda) */
    #nuevaOrdenModal .results::before {
      content: "C√ìDIGO ¬∑ DESCRIPCI√ìN";
      position: sticky;
      top: 0;
      display: block;
      height: var(--resHeadH);
      line-height: var(--resHeadH);
      padding: 0 14px;
      background: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.04em;
      color: #64748b;
      z-index: 3; /* por encima de las filas */
      pointer-events: none;
    }

    /* t√≠tulo PRECIO a la derecha, en la misma barra */
    #nuevaOrdenModal .results::after {
      content: "PRECIO";
      position: sticky;
      top: 0;
      display: block;
      height: var(--resHeadH);
      line-height: var(--resHeadH);
      padding: 0 14px;
      text-align: right;
      background: #f8fafc; /* misma barra visual */
      border-bottom: 1px solid #e5e7eb;
      font-weight: 800;
      text-transform: uppercase;
      letter-spacing: 0.04em;
      color: #64748b;
      z-index: 4; /* sobre el ::before para que no se tape */
      pointer-events: none;
    }

    /* Fila: dos columnas (texto + precio) */
    #nuevaOrdenModal .result-item {
      display: grid;
      grid-template-columns: 1fr auto;
      align-items: center;
      gap: 12px;
      padding: 12px 14px;
      background: #fff;
      border-top: 1px solid #f1f5f9;
      cursor: pointer;
    }
    #nuevaOrdenModal .result-item:hover {
      background: #f9fafb;
    }

    /* c√≥digo ‚Äúpill‚Äù */
    #nuevaOrdenModal .result-item > div:first-child strong {
      display: inline-block;
      margin-right: 10px;
      padding: 6px 10px;
      border-radius: 10px;
      background: #eff6ff;
      color: #1e40af;
      font-weight: 800;
      white-space: nowrap;
    }

    /* meta */
    #nuevaOrdenModal .result-meta {
      margin-top: 4px;
      font-size: 12px;
      color: #64748b;
    }

    /* precio a la derecha */
    #nuevaOrdenModal .result-item > div:last-child {
      font-weight: 800;
      font-variant-numeric: tabular-nums;
      text-align: right;
      white-space: nowrap;
      min-width: 84px;
      color: #0f172a;
    }

    /* Scrollbar sutil */
    #nuevaOrdenModal .results::-webkit-scrollbar {
      height: 10px;
      width: 10px;
    }
    #nuevaOrdenModal .results::-webkit-scrollbar-thumb {
      background: #e2e8f0;
      border-radius: 999px;
    }
    #nuevaOrdenModal .results::-webkit-scrollbar-track {
      background: transparent;
    }

    /* En m√≥viles, el precio baja a segunda l√≠nea */
    @media (max-width: 520px) {
      #nuevaOrdenModal .result-item {
        grid-template-columns: 1fr;
      }
      #nuevaOrdenModal .result-item > div:last-child {
        text-align: left;
        margin-top: 6px;
      }
      #nuevaOrdenModal .results::after {
        display: none;
      } /* ocultamos t√≠tulo ‚ÄúPRECIO‚Äù en m√≥vil */
    }

    /* ===== Tabla de servicios: layout fijo y footer impecable ===== */
    #nuevaOrdenModal #serviciosAgregados {
      table-layout: fixed; /* columnas con anchos deterministas */
      width: 100%;
    }

    /* Anchos de columnas (coinciden thead/tbody/tfoot) */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(1),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(1) {
      width: 120px;
    } /* C√ìDIGO */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(2),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(2) {
      width: auto;
    } /* DESCRIPCI√ìN (se expande) */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(3),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(3) {
      width: 140px;
      text-align: center;
    } /* CANTIDAD */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(4),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(4) {
      width: 120px;
      text-align: right;
    } /* PRECIO */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(5),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(5) {
      width: 140px;
      text-align: right;
    } /* SUBTOTAL */
    #nuevaOrdenModal #serviciosAgregados th:nth-child(6),
    #nuevaOrdenModal #serviciosAgregados td:nth-child(6) {
      width: 64px;
      text-align: center;
    } /* acciones */

    /* Footer sticky bonito y alineado con SUBTOTAL */
    #nuevaOrdenModal #serviciosAgregados tfoot td {
      position: sticky;
      bottom: 0;
      background: linear-gradient(
        180deg,
        rgba(255, 255, 255, 0.96) 0%,
        #fff 80%
      );
      border-top: 2px solid #e5e7eb;
      padding: 14px 12px;
      z-index: 1;
    }

    /* Celda "Total" (colspan=4) alineada al borde de la columna SUBTOTAL */
    #nuevaOrdenModal #serviciosAgregados tfoot td.t-right {
      text-align: right;
      padding-right: 12px; /* respira respecto a la columna de SUBTOTAL */
      font-weight: 800;
      color: #0f172a;
    }

    /* Importe del total: tipograf√≠a uniforme con n√∫meros tabulares */
    #nuevaOrdenModal #serviciosAgregados tfoot td:nth-child(2) {
      text-align: right;
      font-weight: 800;
      font-variant-numeric: tabular-nums;
    }

    /* Detalle fino: el header tambi√©n a la derecha para PRECIO/SUBTOTAL */
    #nuevaOrdenModal #serviciosAgregados thead th:nth-child(4),
    #nuevaOrdenModal #serviciosAgregados thead th:nth-child(5) {
      text-align: right;
    }
    /* Dropdown robusto */
    #nuevaOrdenModal #serviciosEncontrados {
      position: absolute;
      left: 0;
      right: 0;
      top: 100%;
      margin-top: 8px;
      background: #fff;
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      max-height: 340px;
      overflow: auto;
      box-shadow: 0 18px 36px rgba(2, 6, 23, 0.16);
      z-index: 30;
      display: none; /* tu JS lo cambia a block cuando hay datos */
      /* para poder ‚Äúpegar‚Äù la X arriba sin estorbar */
      display: flex;
      flex-direction: column;
    }

    /* Cabecera sticky */
    #nuevaOrdenModal #serviciosEncontrados::before {
      content: "C√ìDIGO ¬∑ DESCRIPCI√ìN";
      position: sticky;
      top: 0;
      z-index: 1;
      display: block;
      padding: 10px 14px;
      background: #f6f9fc;
      border-bottom: 1px solid #e7eaf0;
      font-weight: 800;
      color: #24324a;
      font-size: 0.95rem;
      letter-spacing: 0.02em;
    }

    /* Bot√≥n de cierre real (no pseudo) ‚Äî lo insertamos por JS */
    #nuevaOrdenModal #serviciosEncontrados .results-close {
      position: sticky;
      top: 8px; /* se queda arriba al hacer scroll */
      align-self: flex-end; /* empuja a la derecha */
      margin: 0 10px 6px 0;
      width: 32px;
      height: 32px;
      line-height: 32px;
      text-align: center;
      border: 1px solid #e7eaf0;
      border-radius: 8px;
      background: #fff;
      color: #64748b;
      font-weight: 900;
      cursor: pointer;
    }
    #nuevaOrdenModal #serviciosEncontrados .results-close:hover {
      background: #f1f5f9;
      color: #334155;
    }

    /* √çtems */
    #nuevaOrdenModal #serviciosEncontrados .result-item {
      display: grid;
      grid-template-columns: 1fr max-content;
      align-items: center;
      gap: 16px;
      padding: 12px 14px;
      border-bottom: 1px solid #f1f4f8;
    }
    #nuevaOrdenModal #serviciosEncontrados .result-item:last-child {
      border-bottom: 0;
    }
    #nuevaOrdenModal #serviciosEncontrados .result-item:hover {
      background: #f8fafc;
    }

    #nuevaOrdenModal #serviciosEncontrados .result-item strong {
      display: inline-block;
      min-width: 104px;
      padding: 8px 12px;
      background: #eef3ff;
      border-radius: 12px;
      color: #1e40af;
    }
    #nuevaOrdenModal #serviciosEncontrados .result-item > div:last-child {
      min-width: 84px;
      text-align: right;
      font-weight: 800;
      font-variant-numeric: tabular-nums;
    }
    #nuevaOrdenModal #serviciosEncontrados .result-meta {
      margin-top: 4px;
      color: #7a8797;
      font-size: 0.8rem;
    }
    /* --- Dropdown de resultados: tapa lo de atr√°s y sin fugas arriba --- */
    #nuevaOrdenModal #serviciosEncontrados {
      margin-top: 8px; /* puedes ajustar este gap si quieres */
      background: #fff !important; /* fondo opaco: no se ver√° la tabla detr√°s */
      border: 1px solid #e7eaf0;
      border-radius: 12px;
      overflow: auto;
      box-shadow: 0 14px 30px rgba(2, 6, 23, 0.12);
    }

    /* Si en alg√∫n momento se inyect√≥ un t√≠tulo con ::before, lo anulamos */
    #nuevaOrdenModal #serviciosEncontrados::before {
      content: none !important;
      display: none !important;
    }

    /* --- Header sticky con el t√≠tulo y la X --- */
    #nuevaOrdenModal #serviciosEncontrados .results-header {
      position: sticky;
      top: 0;
      z-index: 5;
      display: flex;
      align-items: center;
      gap: 12px;
      padding: 10px 14px;
      background: #f3f6fa; /* opaco para tapar el fondo al hacer scroll */
      border-bottom: 1px solid #e7eaf0;
      font-weight: 800;
      color: #24324a;
      font-size: 0.95rem;
      letter-spacing: 0.02em;
    }

    /* evitar headers duplicados si por cualquier motivo se agregara otro */
    #nuevaOrdenModal #serviciosEncontrados .results-header:not(:first-child) {
      display: none !important;
    }

    /* Bot√≥n X al extremo derecho */
    #nuevaOrdenModal #serviciosEncontrados .results-close {
      margin-left: auto; /* empuja la X a la derecha */
      width: 28px;
      height: 28px;
      line-height: 26px;
      text-align: center;
      border: 1px solid #e5e7eb;
      border-radius: 8px;
      background: #fff;
      color: #64748b;
      font-weight: 900;
      cursor: pointer;
      transition:
        background 0.2s ease,
        color 0.2s ease;
    }
    #nuevaOrdenModal #serviciosEncontrados .results-close:hover {
      background: #e5e7eb;
      color: #111827;
    }

    /* ====== MODAL SIMPLE Y FUNCIONAL ====== */
    #ordenModal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 1000;
    }

    #ordenModal[open],
    #ordenModal.show {
      display: flex !important;
      justify-content: center;
      align-items: center;
    }

    #ordenModal .modal {
      background: white;
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
      max-width: 700px;
      width: 95vw;
      max-height: 90vh;
      overflow: hidden;
      display: flex;
      flex-direction: column;
      position: relative;
    }
    #ordenModal .modal-head {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1.5rem;
      border-bottom: 1px solid #e5e7eb;
      background: #f9fafb;
      border-radius: 12px 12px 0 0;
    }
    #ordenModal .modal-body {
      padding: 1.5rem;
      overflow-y: auto;
      max-height: 60vh;
      background: white;
      flex: 1;
    }

    #ordenModal #serviciosContainer {
      max-width: 100%;
      overflow-x: hidden;
      width: 100%;
    }

    #ordenModal #serviciosContainer * {
      box-sizing: border-box;
      max-width: 100%;
    }

    #ordenModal .input,
    #ordenModal select.input {
      width: 100%;
      max-width: 100%;
      box-sizing: border-box;
    }

    #ordenModal .no-servicios {
      text-align: center;
      padding: 2rem;
      color: #6b7280;
      background: #f9fafb;
      border: 2px dashed #d1d5db;
      border-radius: 0.5rem;
      margin: 1rem 0;
    }

    #ordenModal .no-servicios p {
      margin: 0;
      font-style: italic;
    }

    #ordenModal .subtotal-row {
      text-align: right;
      padding: 0.25rem 1rem 0.5rem;
      color: #6b7280;
    }

    #ordenModal .total-section {
      margin-top: 1rem;
      padding: 1rem;
      background: #f3f4f6;
      border-radius: 0.5rem;
      border-top: 2px solid #10b981;
    }

    #ordenModal .total-general {
      text-align: right;
      font-size: 1.125rem;
      color: #374151;
    }

    #ordenModal .text-muted {
      color: #6b7280;
      font-size: 0.875rem;
    }
    #ordenModal .modal-foot {
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
      padding: 1.5rem;
      border-top: 1px solid #e5e7eb;
      background: #f9fafb;
      border-radius: 0 0 12px 12px;
    }
    #ordenModal .grid2 {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem;
      margin-bottom: 1rem;
    }
    #ordenModal .servicios-section {
      margin-top: 1.5rem;
    }
    #ordenModal .section-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      flex-wrap: wrap;
      gap: 0.5rem;
    }
    #ordenModal .section-header h4 {
      margin: 0;
      color: #374151;
      font-size: 1rem;
      font-weight: 600;
    }

    #ordenModal #btnAgregarServicio {
      background: #10b981;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      font-size: 0.875rem;
      font-weight: 500;
      transition: background-color 0.2s;
    }

    #ordenModal #btnAgregarServicio:hover {
      background: #059669;
    }
    #ordenModal .servicio-item {
      display: flex;
      flex-direction: column;
      gap: 0.75rem;
      padding: 1rem;
      border: 1px solid #e5e7eb;
      border-radius: 0.5rem;
      margin-bottom: 0.75rem;
      background: #f9fafb;
      position: relative;
      width: 100%;
      max-width: 100%;
      box-sizing: border-box;
    }

    /* Layout simplificado - siempre en columnas para evitar overflow */
    #ordenModal .servicio-item .servicio-row {
      display: flex;
      flex-wrap: wrap;
      gap: 0.75rem;
      align-items: flex-end;
      width: 100%;
      min-width: 0; /* Importante para prevenir overflow en flex */
    }

    #ordenModal .servicio-item .servicio-select-field {
      flex: 1;
      min-width: 200px;
      max-width: 100%;
    }

    #ordenModal .servicio-item .cantidad-field {
      flex: 0 0 80px;
      min-width: 80px;
      max-width: 80px;
    }

    #ordenModal .servicio-item .precio-field {
      flex: 0 0 100px;
      min-width: 100px;
      max-width: 100px;
    }

    #ordenModal .servicio-item .accion-field {
      flex: 0 0 auto;
      width: auto;
    }

    /* Responsive: en pantallas peque√±as, hacer que todo sea en columna */
    @media (max-width: 600px) {
      #ordenModal .servicio-item .servicio-row {
        flex-direction: column;
        align-items: stretch;
      }

      #ordenModal .servicio-item .servicio-select-field,
      #ordenModal .servicio-item .cantidad-field,
      #ordenModal .servicio-item .precio-field {
        flex: none;
        width: 100%;
        max-width: 100%;
        min-width: 0;
      }

      #ordenModal .accion-field {
        align-self: center;
        padding-top: 0.5rem;
      }
    }

    #ordenModal .servicio-item .btn-eliminar {
      white-space: nowrap;
      padding: 0.25rem 0.5rem;
      font-size: 0.75rem;
      border-color: #ef4444;
      color: #ef4444;
      background: white;
    }

    #ordenModal .servicio-item .btn-eliminar:hover {
      background: #ef4444;
      color: white;
    }

    /* Estilos para campos individuales */
    #ordenModal .servicio-select-field,
    #ordenModal .cantidad-field,
    #ordenModal .precio-field,
    #ordenModal .accion-field {
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }

    #ordenModal .servicio-select-field label,
    #ordenModal .cantidad-field label,
    #ordenModal .precio-field label {
      font-size: 0.75rem;
      font-weight: 500;
      color: #6b7280;
      margin: 0;
    }

    #ordenModal .accion-field {
      justify-content: flex-end;
      padding-top: 1rem;
    }
    #ordenModal label {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      font-weight: 500;
      color: #374151;
    }
    #ordenModal .input,
    #ordenModal select.input,
    #ordenModal textarea.input {
      padding: 0.5rem 0.75rem;
      border: 1px solid #d1d5db;
      border-radius: 0.375rem;
      font-size: 0.875rem;
      background: white;
      color: #374151;
    }
    #ordenModal .input:focus,
    #ordenModal select.input:focus,
    #ordenModal textarea.input:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 1px #3b82f6;
    }
    #ordenModal .icon {
      background: none;
      border: none;
      font-size: 1.2rem;
      cursor: pointer;
      padding: 0.25rem;
      border-radius: 0.25rem;
      color: #6b7280;
    }
    #ordenModal .icon:hover {
      background: #f3f4f6;
      color: #374151;
    }
    #ordenModal .btn {
      padding: 0.5rem 1rem;
      border-radius: 0.375rem;
      border: none;
      cursor: pointer;
      font-weight: 500;
      transition: all 0.15s;
      text-decoration: none;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }
    #ordenModal .btn-orange {
      background: #ea580c;
      color: white;
    }
    #ordenModal .btn-orange:hover {
      background: #dc2626;
    }
    #ordenModal .btn-outline {
      background: transparent;
      border: 1px solid #d1d5db;
      color: #374151;
    }
    #ordenModal .btn-outline:hover {
      background: #f9fafb;
    }
    #ordenModal .btn-small {
      padding: 0.25rem 0.5rem;
      font-size: 0.875rem;
    }
    #ordenModal h3,
    #ordenModal h4 {
      margin: 0;
      color: #1f2937;
    }
  </style>
  <style is:global>
    /* ======== T√©cnico: Mis √ìrdenes ‚Äì ajustes visuales dedicados ======== */
    .section .card {
      border: 1px solid #eef2f7;
    }

    /* Cabezal + herramientas */
    .card-head {
      gap: 12px;
    }
    .card-tools .input {
      height: 40px;
      min-width: 260px;
      background: #fff;
    }

    /* Tabla compacta y ancho completo */
    #ordenesContainer .table {
      width: 100%;
      table-layout: auto;
    }
    #ordenesContainer thead th {
      padding: 12px 14px;
    }
    #ordenesContainer tbody td {
      padding: 12px 14px;
      vertical-align: middle;
    }

    /* Columna acciones fija y bonita */
    #ordenesContainer th:last-child,
    #ordenesContainer td:last-child {
      width: 180px;
    }
    .btn-sm {
      padding: 8px 10px;
      border-radius: 8px;
      font-weight: 700;
      border: 1px solid #e5e7eb;
      background: #fff;
    }
    .btn-ghost {
      border-color: #e5e7eb;
    }
    .btn-ghost:hover {
      box-shadow: var(--ring);
    }
    .btn-primary {
      background: linear-gradient(135deg, var(--primary-blue), #567bd6);
      color: #fff;
      border: 0;
    }
    .btn-success {
      background: linear-gradient(135deg, #16a34a, #22c55e);
      color: #fff;
      border: 0;
    }

    /* Quita ‚Äúaire‚Äù inferior que marcaste */
    #ordenesContainer .card-body {
      padding-bottom: 10px;
    }
    .section:last-of-type {
      margin-bottom: 0;
    }
    .page {
      padding-bottom: 24px;
    }

    /* Estados (badges) con mejor contraste */
    .badge {
      font-weight: 800;
      letter-spacing: 0.02em;
    }
    .badge-info {
      background: #eef2ff;
      color: #3730a3;
    }
    .badge-warning {
      background: #fff7ed;
      color: #9a3412;
    }
    .badge-primary {
      background: #eff6ff;
      color: #1e3a8a;
    }
    .badge-success {
      background: #ecfdf5;
      color: #065f46;
    }

    /* ====== Detalle: layout y look ====== */
    #detalleModal {
      display: none;
      position: fixed;
      inset: 0;
      z-index: 1000;
      background: rgba(2, 6, 23, 0.45);
      align-items: center;
      justify-content: center;
    }
    #detalleModal.show {
      display: flex;
    }
    #detalleModal .modal.det {
      background: #fff;
      width: min(920px, 96vw);
      max-height: 92vh;
      border-radius: 16px;
      box-shadow: 0 24px 60px rgba(2, 6, 23, 0.24);
      display: flex;
      flex-direction: column;
      overflow: hidden;
    }

    /* Header */
    .det-head {
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 16px 18px;
      border-bottom: 1px solid #eef2f7;
      background: linear-gradient(180deg, #fafcff, #fff);
    }
    .det-title {
      display: flex;
      gap: 12px;
      align-items: center;
    }
    .det-ico {
      display: grid;
      place-items: center;
      width: 38px;
      height: 38px;
      border-radius: 12px;
      background: linear-gradient(135deg, var(--primary-blue), #5b7df0);
      color: #fff;
      font-size: 20px;
      box-shadow: var(--ring);
    }
    .det-title h3 {
      margin: 0;
      font-size: 18px;
    }
    .det-num {
      color: #64748b;
      font-weight: 800;
    }
    .det-head-actions {
      display: flex;
      align-items: center;
      gap: 10px;
    }

    /* Meta cards */
    .det-body {
      padding: 16px 18px 0;
    }
    .det-grid {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
      gap: 12px 18px;
      margin-bottom: 14px;
    }
    @media (max-width: 680px) {
      .det-grid {
        grid-template-columns: 1fr;
      }
    }
    .det-card {
      background: #fbfcfe;
      border: 1px solid #eef2f7;
      border-radius: 12px;
      padding: 10px 12px;
    }
    .det-label {
      font-size: 12px;
      color: #64748b;
      margin-bottom: 4px;
      font-weight: 800;
      letter-spacing: 0.02em;
      text-transform: uppercase;
    }
    .det-value {
      color: #0f172a;
      word-break: break-word;
    }

    /* Tabla */
    .det-table {
      border-radius: 12px;
      border: 1px solid #eef2f7;
      background: #fff;
      overflow: hidden;
    }
    .det-table thead th {
      top: 0;
      background: #f8fafc;
      border-bottom: 1px solid #eef2f7;
      box-shadow: 0 1px 0 rgba(2, 6, 23, 0.04);
    }
    .det-table tbody tr:nth-child(odd) td {
      background: #fff;
    }
    .det-table tbody tr:nth-child(even) td {
      background: #fcfdff;
    }
    .det-table tbody tr:hover td {
      background: #f7fafc;
    }

    /* Total bar sticky */
    .det-totalbar {
      position: sticky;
      bottom: 0;
      left: 0;
      right: 0;
      background: linear-gradient(180deg, rgba(255, 255, 255, 0.94), #fff);
      border-top: 1px solid #eef2f7;
      padding: 10px 16px;
      backdrop-filter: blur(3px);
    }
    .det-totalline {
      display: flex;
      align-items: center;
      justify-content: flex-end;
      gap: 14px;
    }
    .det-totalline span {
      font-weight: 800;
      color: #0f172a;
    }
    .det-totalline strong {
      font-weight: 900;
      font-variant-numeric: tabular-nums;
    }

    /* Footer acciones */
    .det-foot {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 12px 16px;
      border-top: 1px solid #eef2f7;
      background: #fff;
    }

    /* Badges estado (coinciden con tus clases) */
    .badge {
      display: inline-block;
      padding: 6px 10px;
      border-radius: 999px;
      font-size: 12px;
      font-weight: 800;
    }
    .badge-warning {
      background: #fff7ed;
      color: #9a3412;
    }
    .badge-primary {
      background: #eff6ff;
      color: #1e3a8a;
    }
    .badge-success {
      background: #ecfdf5;
      color: #065f46;
    }

    /* Impresi√≥n limpia solo del modal */
    @media print {
      body > *:not(#detalleModal) {
        display: none !important;
      }
      #detalleModal {
        position: static;
        display: block;
        background: #fff;
      }
      #detalleModal .modal.det {
        box-shadow: none;
        max-height: none;
        width: auto;
      }
      .det-head .icon {
        display: none;
      }
      .det-foot {
        display: none;
      }
      .det-totalbar {
        position: static;
      }
    }
    /* ===== Detalle Orden ‚Äì Light & Responsive ===== */

    /* Contenedor */
    #detalleModal {
      display: none;
      position: fixed;
      inset: 0;
      z-index: 1000;
      background: rgba(255, 255, 255, 0.85); /* fondo claro transl√∫cido */
      align-items: center;
      justify-content: center;
    }
    #detalleModal.show {
      display: flex;
    }

    /* Caja modal */
    #detalleModal .modal.det {
      background: #fff;
      width: min(920px, 96vw);
      max-height: 92vh;
      border-radius: 16px;
      border: 1px solid #e5e7eb;
      box-shadow: 0 12px 28px rgba(0, 0, 0, 0.1);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      animation: det-pop 0.18s ease-out;
    }
    @keyframes det-pop {
      from {
        transform: scale(0.97);
        opacity: 0;
      }
      to {
        transform: scale(1);
        opacity: 1;
      }
    }

    /* Header */
    .det-head {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 16px 18px;
      background: #fafafa;
      border-bottom: 1px solid #e5e7eb;
    }
    .det-title {
      display: flex;
      align-items: center;
      gap: 12px;
    }
    .det-ico {
      width: 42px;
      height: 42px;
      border-radius: 12px;
      display: grid;
      place-items: center;
      background: linear-gradient(135deg, #2563eb, #3b82f6);
      color: #fff;
      font-size: 20px;
      font-weight: 700;
    }
    .det-num {
      color: #475569;
      font-weight: 800;
    }

    /* Estado */
    #detEstado.badge {
      padding: 5px 10px;
      border-radius: 999px;
      font-size: 12px;
      font-weight: 700;
    }
    .badge-warning {
      background: #fff7ed;
      color: #9a3412;
    }
    .badge-primary {
      background: #eff6ff;
      color: #1e3a8a;
    }
    .badge-success {
      background: #ecfdf5;
      color: #065f46;
    }

    /* Meta info en grid */
    .det-body {
      padding: 16px 18px;
    }
    .det-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 12px 18px;
      margin-bottom: 14px;
    }
    .det-card {
      background: #f9fafb;
      border: 1px solid #e5e7eb;
      border-radius: 12px;
      padding: 10px 12px;
    }
    .det-label {
      font-size: 12px;
      color: #64748b;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      margin-bottom: 4px;
      font-weight: 700;
    }
    .det-value {
      color: #0f172a;
      font-weight: 600;
    }

    /* Tabla */
    .det-table {
      border: 1px solid #e5e7eb;
      border-radius: 12px;
      overflow: hidden;
    }
    .det-table thead th {
      background: #f8fafc;
      border-bottom: 1px solid #e5e7eb;
      padding: 10px;
      font-size: 13px;
    }
    .det-table tbody td {
      padding: 10px;
      border-top: 1px solid #f1f5f9;
    }
    .det-table tbody tr:nth-child(even) td {
      background: #fdfdfd;
    }
    .det-table tbody tr:hover td {
      background: #f9fafb;
    }

    /* Total */
    .det-totalbar {
      border-top: 1px solid #e5e7eb;
      background: #fff;
      padding: 12px 18px;
    }
    .det-totalline {
      display: flex;
      justify-content: flex-end;
      gap: 12px;
      font-size: 15px;
      font-weight: 700;
    }
    .det-totalline strong {
      font-size: 16px;
      padding: 2px 6px;
      border-radius: 6px;
      background: #f1f5f9;
    }

    /* Footer */
    .det-foot {
      display: flex;
      justify-content: flex-end;
      gap: 10px;
      padding: 14px 18px;
      border-top: 1px solid #e5e7eb;
      background: #fafafa;
    }
    .det-foot .btn {
      padding: 8px 16px;
      border-radius: 8px;
      font-weight: 600;
    }
    .det-foot .btn-outline {
      border: 1px solid #d1d5db;
      background: #fff;
    }
    .det-foot .btn-orange {
      background: #f97316;
      color: #fff;
      border: 0;
    }

    /* Close button */
    #detCloseBtn {
      width: 34px;
      height: 34px;
      border-radius: 8px;
      border: 1px solid #d1d5db;
      background: #fff;
      cursor: pointer;
      font-size: 14px;
      transition: 0.15s;
    }
    #detCloseBtn:hover {
      background: #f3f4f6;
    }

    /* Responsive */
    @media (max-width: 600px) {
      .det-title h3 {
        font-size: 16px;
      }
      .det-totalbar {
        padding: 10px 14px;
      }
      .det-foot {
        flex-direction: column;
        align-items: stretch;
      }
      .det-foot .btn {
        width: 100%;
      }
    }
    /* Observaciones ocupa todo el ancho */
    .det-card.obs {
      grid-column: 1 / -1; /* se extiende a toda la fila */
      min-height: 80px; /* espacio m√≠nimo */
      background: #fdfdfd; /* un poco m√°s claro */
    }

    /* Texto de observaciones */
    .det-card.obs .det-value {
      white-space: pre-wrap; /* respeta saltos de l√≠nea */
      line-height: 1.5;
      font-size: 14px;
    }

    /* Secci√≥n de Acciones r√°pidas */
    .quick {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-top: 1.5rem; /* separa de los KPIs */
      margin-bottom: 1rem; /* separa de "Mis √ìrdenes" */
      flex-wrap: wrap; /* para m√≥viles */
      gap: 1rem;
    }

    .quick-left {
      display: flex;
      align-items: center;
      gap: 1rem; /* espacio entre bot√≥n y buscador */
    }

    #btnNuevo {
      padding: 0.6rem 1.2rem;
      border-radius: 8px;
      font-weight: 600;
    }

    /* Ajusta filtros a la derecha con separaci√≥n */
    .quick-right {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .filters {
      display: flex;
      gap: 0.5rem;
    }

    /* Responsive: en pantallas chicas */
    @media (max-width: 768px) {
      .quick {
        flex-direction: column;
        align-items: stretch;
      }
      .quick-left,
      .quick-right {
        width: 100%;
        justify-content: space-between;
      }
      #btnNuevo {
        width: 100%;
      }
    }
    /* Botones de acciones en la tabla */
    .table .btn {
      padding: 0.35rem 0.9rem;
      font-size: 0.85rem;
      border-radius: 6px;
      font-weight: 500;
      transition: all 0.2s ease-in-out;
    }

    /* Bot√≥n "Ver" */
    .table .btn-ghost {
      background-color: #f3f6ff; /* tono suave */
      color: #1e40af; /* azul */
      border: 1px solid #d0d7f9;
    }

    .table .btn-ghost:hover {
      background-color: #e0e7ff; /* hover m√°s marcado */
      color: #1d4ed8;
      border-color: #1d4ed8;
    }

    #ordenesContainer tbody tr {
      transition:
        background 0.15s ease,
        box-shadow 0.15s ease;
    }
    #ordenesContainer tbody tr:nth-child(even) td {
      background: #fbfcfe;
    }
    #ordenesContainer tbody tr:hover td {
      background: #f7f9ff;
      box-shadow:
        inset 0 1px 0 rgba(2, 6, 23, 0.04),
        inset 0 -1px 0 rgba(2, 6, 23, 0.04);
    }
    /* Chip de acci√≥n */
    .table .btn-ghost {
      display: inline-flex;
      align-items: center;
      gap: 0.4rem;
      background: #f3f6ff;
      color: #1e40af;
      border: 1px solid #d0d7f9;
      padding: 0.35rem 0.7rem;
      border-radius: 999px;
      font-weight: 600;
    }
    .table .btn-ghost::before {
      content: "üëÅ";
      font-size: 0.95em;
    }
    .table .btn-ghost:hover {
      background: #e6ecff;
      border-color: #1d4ed8;
      color: #1d4ed8;
    }
    .filters .pill {
      position: relative;
      outline: none;
      transition: transform 0.05s ease;
    }
    .filters .pill:active {
      transform: translateY(1px) scale(0.99);
    }
    .filters .pill:focus-visible {
      box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.22);
    }

    .card-tools .input {
      padding-left: 2.2rem;
      background: #fff
        url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%238aa0c8' viewBox='0 0 16 16'><path d='M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85h-.017zm-5.242.656a5 5 0 1 1 0-10 5 5 0 0 1 0 10z'/></svg>")
        no-repeat 10px center;
      background-size: 16px;
      transition:
        box-shadow 0.15s ease,
        border-color 0.15s ease;
    }
    .card-tools .input:focus {
      border-color: #2563eb;
      box-shadow: 0 0 0 4px rgba(37, 99, 235, 0.12);
    }

    .kpi-card {
      transition:
        transform 0.12s ease,
        box-shadow 0.12s ease;
    }
    .kpi-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 14px 32px rgba(2, 6, 23, 0.1);
    }
    .kpi-value {
      font-variant-numeric: tabular-nums;
    }

    .badge {
      position: relative;
      padding-left: 18px;
    }
    .badge::before {
      content: "";
      position: absolute;
      left: 6px;
      top: 50%;
      transform: translateY(-50%);
      width: 8px;
      height: 8px;
      border-radius: 50%;
    }
    .badge-warning::before {
      background: #ea580c;
    }
    .badge-primary::before {
      background: #2563eb;
    }
    .badge-success::before {
      background: #16a34a;
    }

    @media (max-width: 680px) {
      #ordenesContainer table thead {
        display: none;
      }
      #ordenesContainer table,
      #ordenesContainer tbody,
      #ordenesContainer tr,
      #ordenesContainer td {
        display: block;
        width: 100%;
      }
      #ordenesContainer tbody tr {
        margin: 10px 0;
        border: 1px solid #eef2f7;
        border-radius: 12px;
        background: #fff;
        padding: 10px 12px;
      }
      #ordenesContainer td {
        border: 0;
        padding: 8px 0;
        position: relative;
      }
      #ordenesContainer td::before {
        content: attr(data-th);
        display: block;
        font-size: 12px;
        color: #64748b;
        text-transform: uppercase;
        letter-spacing: 0.04em;
        margin-bottom: 2px;
        font-weight: 800;
      }
    }
    .btn.btn-orange {
      box-shadow: 0 8px 20px rgba(234, 88, 12, 0.18);
      transition:
        transform 0.06s ease,
        box-shadow 0.12s ease;
    }
    .btn.btn-orange:hover {
      transform: translateY(-1px);
      box-shadow: 0 12px 26px rgba(234, 88, 12, 0.25);
    }
    .btn.btn-orange:active {
      transform: translateY(0);
    }
    .page {
      background: linear-gradient(#f6f8fc, #f7f9fc);
    }
    .section .card {
      background: #fff;
      backdrop-filter: saturate(110%);
    }
    :focus-visible {
      outline: 3px solid rgba(59, 130, 246, 0.45);
      outline-offset: 2px;
      border-radius: 10px;
    }
    #ordenesContainer td:last-child .actions {
      display: inline-flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      align-items: center;
    }

    /* ==== PRINT: Header m√°s ancho y badge sin puntito ==== */
    @media print {
      /* Aire horizontal en la franja superior del modal */
      #detalleModal .det-head {
        padding: 18px 32px !important; /* m√°s padding a los lados */
        margin: 6px 0 12px !important; /* separa del contenido */
        display: flex !important;
        align-items: center !important;
        justify-content: space-between !important;
        gap: 16px !important;
      }

      /* Por si alg√∫n estilo usa list-style / markers en ese header */
      #detalleModal .det-head,
      #detalleModal .det-head * {
        list-style: none !important;
        background-image: none !important;
      }

      /* Badge de estado: SIN pseudo-elementos ni ‚Äúbolita‚Äù */
      #detalleModal #detEstado,
      #detalleModal #detEstado::before,
      #detalleModal #detEstado::after {
        content: none !important; /* elimina cualquier pseudo (el punto) */
        box-shadow: none !important;
        background-image: none !important;
      }

      /* Estilo limpio del badge al imprimir */
      #detalleModal #detEstado {
        display: inline-block !important;
        background: #e5e7eb !important;
        color: #111827 !important;
        border: 1px solid #d1d5db !important;
        border-radius: 6px !important;
        padding: 4px 10px !important;
        font-weight: 700 !important;
        line-height: 1.2 !important;
        vertical-align: middle !important;
      }

      /* Que el grupo de acciones quede a la derecha con aire */
      #detalleModal .det-head .det-head-actions {
        margin-left: auto !important;
        gap: 12px !important;
      }

      /* Mejora el contraste de impresi√≥n (colores fieles) */
      #detalleModal,
      #detalleModal * {
        -webkit-print-color-adjust: exact !important;
        print-color-adjust: exact !important;
      }
    }

    /* ==== MODAL DETALLE (pantalla): quitar el puntito del badge ==== */
    #detalleModal .det-head .badge,
    #detalleModal .det-head #detEstado {
      position: relative !important;
      background-image: none !important;
    }

    /* apaga cualquier pseudo-elemento que dibuje la ‚Äúbolita‚Äù */
    #detalleModal .det-head .badge::before,
    #detalleModal .det-head .badge::after,
    #detalleModal .det-head #detEstado::before,
    #detalleModal .det-head #detEstado::after,
    #detalleModal .det-head .badge-success::before,
    #detalleModal .det-head .badge-success::after {
      content: none !important;
      display: none !important;
      width: 0 !important;
      height: 0 !important;
      border: 0 !important;
      background: none !important;
      box-shadow: none !important;
    }

    /* look consistente del badge en pantalla */
    #detalleModal .det-head #detEstado {
      padding: 5px 10px !important;
      border-radius: 8px !important;
      line-height: 1.2 !important;
      font-weight: 700 !important;
    }

    /* opcional: asegura separaci√≥n con el bot√≥n ‚úñ */
    #detalleModal .det-head .det-head-actions {
      display: flex !important;
      align-items: center !important;
      gap: 10px !important;
      margin-left: auto !important;
    }

    /* ====== Fix: √≠cono de b√∫squeda no se sobrepone al texto ====== */
    .card-head .card-tools {
      position: relative;
    }

    /* Aumenta el padding para dejar espacio a la lupa */
    .card-head .card-tools .input {
      padding-left: 44px !important; /* 40‚Äì48px seg√∫n el tama√±o del icono */
      box-sizing: border-box;
    }

    /* Coloca cualquier svg/i (la lupa) correctamente dentro del input */
    .card-head .card-tools svg,
    .card-head .card-tools i,
    .card-head .card-tools .icon {
      position: absolute;
      left: 16px; /* separa del borde izquierdo */
      top: 50%;
      transform: translateY(-50%);
      pointer-events: none; /* que no bloquee el click en el input */
      opacity: 0.65; /* tono sutil */
    }

    /* Opcional: placeholder m√°s clarito */
    .card-head .card-tools .input::placeholder {
      color: #94a3b8;
    }
    .card-head .card-tools .input {
      padding-left: 44px !important;
      background-position: 14px 50% !important; /* mueve la lupa a la izquierda */
      background-repeat: no-repeat !important;
    }

    /* ================================
   MODAL "NUEVA ORDEN" ‚Äî OVERRIDES
   ================================ */

/* Caja modal: tama√±o controlado y sin desbordes */
#ordenModal .modal{
  display:flex !important;
  flex-direction:column !important;
  width:min(860px, 96vw) !important;
  max-height:calc(100vh - 32px) !important;
  overflow:hidden !important;
  border-radius:12px;
}

/* Header limpio (y sin X) */
#ordenModal .modal-head{
  display:flex;
  align-items:center;
  justify-content:space-between;
  gap:12px;
  padding:14px 16px !important;
  background:#fafafa;
  border-bottom:1px solid #eef2f7;
}
#ordenModal #closeModal{ display:none !important; }  /* ocultar X */
#ordenModal .modal-head h3{
  margin:0; font-size:1.1rem; font-weight:800; color:#0f172a;
  transition:color .15s ease, transform .15s ease;
}
#ordenModal .modal-head h3:hover{ color:#2563eb; transform:translateY(-1px); }

/* Body con scroll interno */
#ordenModal .modal-body{
  flex:1 1 auto !important;
  min-width:0 !important;
  overflow:auto !important;
  padding:16px !important;
  background:#fff;
}

/* Footer pegajoso */
#ordenModal .modal-foot{
  position:sticky !important;
  bottom:0; left:0; right:0;
  display:flex; justify-content:flex-end; gap:10px;
  padding:12px 16px !important;
  background:linear-gradient(180deg,rgba(255,255,255,.94),#fff);
  border-top:1px solid #eef2f7;
  z-index:2;
}

/* ---------- Formulario ---------- */
#ordenModal .grid2{
  display:grid; grid-template-columns:1fr 1fr; gap:14px !important;
  margin-bottom:14px !important;
}
@media (max-width:640px){ #ordenModal .grid2{ grid-template-columns:1fr; } }

#ordenModal label{
  display:flex; flex-direction:column; gap:6px;
  font-weight:700; color:#0f172a;
}
#ordenModal .input, #ordenModal select.input, #ordenModal textarea.input{
  width:100%; border:1px solid #e5e7eb; border-radius:10px;
  padding:10px 12px; background:#fff; outline:none;
}
#ordenModal textarea.input{ min-height:90px; resize:vertical; }
#ordenModal .input:focus, #ordenModal select.input:focus, #ordenModal textarea.input:focus{
  border-color:#2563eb; box-shadow:0 0 0 4px rgba(37,99,235,.12);
}

/* ---------- Servicios ---------- */
#ordenModal .servicios-section{ margin-top:10px; }
#ordenModal .section-header{
  display:flex; align-items:center; justify-content:space-between;
  gap:10px; margin-bottom:10px; flex-wrap:wrap;
}
#ordenModal .section-header h4{ margin:0; font-size:1rem; font-weight:800; color:#0f172a; }

#ordenModal #btnAgregarServicio{
  background:#10b981; color:#fff; border:0; padding:8px 12px; border-radius:10px;
}
#ordenModal #btnAgregarServicio:hover{ filter:brightness(.95); }

#ordenModal #serviciosContainer{ width:100%; overflow:visible; }
#ordenModal .servicio-item{
  display:flex; flex-direction:column; gap:10px;
  padding:12px; border:1px solid #e5e7eb; border-radius:10px;
  background:#fafafa; margin-bottom:10px; position:relative;
}
#ordenModal .servicio-row{
  display:flex; flex-wrap:wrap; gap:10px; align-items:flex-end; min-width:0;
}
#ordenModal .servicio-select-field{ flex:1 1 260px; min-width:220px; }
#ordenModal .cantidad-field{ flex:0 0 90px; }
#ordenModal .precio-field  { flex:0 0 120px; }
#ordenModal .accion-field  { flex:0 0 auto; }

#ordenModal .subtotal-row{ text-align:right; padding:0 4px 6px; color:#64748b; }
#ordenModal .total-section{
  margin-top:10px; padding:10px 12px; background:#f3f4f6;
  border-radius:10px; border-top:2px solid #10b981;
}
#ordenModal .total-general{ text-align:right; font-weight:900; color:#0f172a; }

/* Bot√≥n eliminar de fila */
#ordenModal .btn-eliminar{
  border:1px solid #ef4444 !important; color:#ef4444 !important; background:#fff !important;
  padding:6px 10px; border-radius:8px; white-space:nowrap;
}
#ordenModal .btn-eliminar:hover{ background:#ef4444 !important; color:#fff !important; }

/* Responsive filas de servicio */
@media (max-width:560px){
  #ordenModal .servicio-row{ flex-direction:column; align-items:stretch; }
  #ordenModal .servicio-select-field, #ordenModal .cantidad-field, #ordenModal .precio-field{
    flex:none; width:100%;
  }
  #ordenModal .accion-field{ align-self:flex-end; }
}
#ordenModal #closeModal{ display:none !important; }

  </style>

  <script>
    //@ts-nocheck
    // ===== Helpers num√©ricos globales =====
    window.parseDec = function (value) {
      if (value == null) return NaN;
      const s = String(value)
        .trim()
        .replace(/\s/g, "")
        .replace(/[^\d,.\-]/g, "")
        .replace(/,/g, ".");
      return Number(s);
    };
    window.format2 = function (n) {
      return Number.isFinite(n) ? n.toFixed(2) : "0.00";
    };
    // Alias simple que usas abajo
    window.toNum = function (v) {
      return window.parseDec(v);
    };

    /* ============================
     *  FUNCIONES GLOBALES (modal servicios)
     * ============================ */
    window.cargarPrecioServicio = function (selectElement, index) {
      const selectedOption = selectElement.options[selectElement.selectedIndex];
      const precioRaw =
        selectedOption?.dataset?.precio ??
        selectedOption.getAttribute("data-precio") ??
        "0";
      const precioNum = window.parseDec(precioRaw);
      const precioInput = document.getElementById(`precio_${index}`);
      if (precioInput) {
        precioInput.value = window.format2(precioNum);
        window.calcularSubtotal(index);
      }
    };

    window.calcularSubtotal = function (index) {
      const cantidadInput = document.getElementById(`cantidad_${index}`);
      const precioInput = document.getElementById(`precio_${index}`);
      const subtotalDiv = document.getElementById(`subtotal_${index}`);
      if (!cantidadInput || !precioInput || !subtotalDiv) return;

      const cantidad = window.parseDec(cantidadInput.value) || 0;
      const precio = window.parseDec(precioInput.value) || 0;
      const subtotal = cantidad * precio;

      const subtotalSpan = subtotalDiv.querySelector(".subtotal-amount");
      if (subtotalSpan) subtotalSpan.textContent = window.format2(subtotal);

      subtotalDiv.style.display = cantidad > 0 && precio > 0 ? "block" : "none";
      window.calcularTotalGeneral();
    };

    window.calcularTotalGeneral = function () {
      const subtotalSpans = document.querySelectorAll(
        "#serviciosContainer .subtotal-amount"
      );
      let total = 0;
      subtotalSpans.forEach(
        (span) => (total += window.parseDec(span.textContent) || 0)
      );
      const totalElement = document.getElementById("totalGeneral");
      if (totalElement) totalElement.textContent = total.toFixed(2);
    };

    window.eliminarServicio = function (button) {
      const servicioItem = button.closest(".servicio-item");
      if (servicioItem) servicioItem.remove();

      const container = document.getElementById("serviciosContainer");
      const serviciosRestantes = container.querySelectorAll(".servicio-item");
      const noServiciosMsg = document.getElementById("noServiciosMsg");
      const totalSection = document.getElementById("totalSection");

      if (serviciosRestantes.length === 0) {
        if (noServiciosMsg) noServiciosMsg.style.display = "block";
        if (totalSection) totalSection.style.display = "none";
        window.calcularTotalGeneral();
      } else {
        window.calcularTotalGeneral();
      }
    };

    /* ============================
     *  APP T√âCNICO
     * ============================ */
    document.addEventListener("DOMContentLoaded", () => {
      // ---------- AUTH ----------
      const token = localStorage.getItem("token");
      const userStr = localStorage.getItem("user");
      function hardLogout() {
        localStorage.removeItem("token");
        localStorage.removeItem("user");
        location.replace("/");
      }
      if (!token || !userStr) return hardLogout();
      const user = JSON.parse(userStr);
      if (user.rol !== "tecnico") return hardLogout();
      document.getElementById("userName").textContent =
        `${user.nombre} ${user.apellido ?? ""}`.trim();
      window.logout = hardLogout;
      document.addEventListener("click", (ev) => {
        const btn = ev.target.closest("#logoutBtn");
        if (!btn) return;
        ev.preventDefault();
        hardLogout();
      });

      // ---------- UI refs ----------
      const toast = document.getElementById("toast");
      const btnNuevo = document.getElementById("btnNuevo");
      const ordenModal = document.getElementById("ordenModal");
      const closeModal = document.getElementById("closeModal");
      const cancelarModal = document.getElementById("cancelarModal");
      const ordenForm = document.getElementById("ordenForm");

      const buscarOrdenInput = document.getElementById("buscarOrdenInput");
      const ordenesTbody = document.querySelector("#tablaOrdenes tbody");
      const emptyOrders = document.getElementById("emptyOrders");

      // ---------- state ----------
      let clientes = [];
      let vehiculos = [];
      let servicios = []; // <- usamos ESTA variable
      let servicioIndex = 0;

      let todasLasOrdenes = [];
      let filtroEstado = "todas";

      // ---------- helpers ----------
      const money = new Intl.NumberFormat("es-EC", {
        style: "currency",
        currency: "USD",
      });
      const fmt = new Intl.NumberFormat("es-EC");

      const showToast = (msg) => {
        toast.textContent = msg;
        toast.classList.add("show");
        setTimeout(() => toast.classList.remove("show"), 3000);
      };

      const normEstado = (s = "") => {
        const v = s.toLowerCase().trim();
        if (
          [
            "pendiente",
            "nuevo",
            "abierta",
            "por atender",
            "registrada",
          ].includes(v)
        )
          return "pendiente";
        if (["en proceso", "proceso", "working", "atendiendo"].includes(v))
          return "en proceso";
        if (
          [
            "completado",
            "entregado",
            "cerrada",
            "finalizada",
            "facturada",
            "facturada parcial",
          ].includes(v)
        )
          return "completado";
        return v || "pendiente";
      };
      const badge = (estado = "") => {
        const n = normEstado(estado);
        if (n === "pendiente") return "badge badge-warning";
        if (n === "en proceso") return "badge badge-primary";
        if (n === "completado") return "badge badge-success";
        return "badge badge-info";
      };

      // ---------- Modal Nueva Orden ----------
      if (btnNuevo) {
        btnNuevo.addEventListener("click", async () => {
          ordenForm?.reset();
          limpiarServicios();
          ordenModal.style.display = "flex";
          ordenModal.classList.add("show");
          ordenModal.setAttribute("open", "");
          await loadClientes();
          await loadServicios(); // <- garantiza que 'servicios' tenga datos
        });
      }
      if (closeModal) closeModal.addEventListener("click", cerrarModal);
      if (cancelarModal) cancelarModal.addEventListener("click", cerrarModal);
      if (ordenModal) {
        ordenModal.addEventListener("click", (e) => {
          if (e.target === ordenModal) cerrarModal();
        });
      }
      function cerrarModal() {
        ordenModal.style.display = "none";
        ordenModal.classList.remove("show");
        ordenModal.removeAttribute("open");
      }

      // Filtros de estado (pills)
      document.querySelectorAll(".pill").forEach((p) => {
        p.addEventListener("click", () => {
          document
            .querySelectorAll(".pill")
            .forEach((x) => x.classList.remove("active"));
          p.classList.add("active");
          filtroEstado = p.dataset.estado;
          pintarOrdenes();
        });
      });
      buscarOrdenInput.addEventListener("input", pintarOrdenes);

      // Cargar datos iniciales
      cargarMisOrdenes();
      loadServicios();

      /* ========= API helpers ========= */
      async function cargarMisOrdenes() {
        try {
          const r = await fetch(
            "http://localhost:3001/api/ordenes/mis-ordenes",
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          const data = await r.json();
          if (!data?.success) return;
          todasLasOrdenes = data.data || [];
          kpis(todasLasOrdenes);
          pintarOrdenes();
        } catch (e) {
          console.error(e);
          showToast("No se pudieron cargar tus √≥rdenes");
        }
      }

      function kpis(list) {
        const hoy = new Date().toDateString();
        const asignadasHoy = list.filter(
          (o) => new Date(o.fecha_ingreso).toDateString() === hoy
        ).length;
        const enProc = list.filter(
          (o) => normEstado(o.estado) === "en proceso"
        ).length;
        const comp = list.filter(
          (o) => normEstado(o.estado) === "completado"
        ).length;

        document.getElementById("kpiAsignadas").textContent =
          fmt.format(asignadasHoy);
        document.getElementById("kpiProceso").textContent = fmt.format(enProc);
        document.getElementById("kpiCompletadas").textContent =
          fmt.format(comp);
      }

      function accionesHTML(o) {
        const n = normEstado(o.estado);
        const btnVer = `<button class="btn btn-ghost btn-sm" onclick="verDetalleOrden(${o.id})">Ver</button>`;
        if (n === "pendiente") {
          return `<div style="display:flex;gap:6px;flex-wrap:wrap">
                <button class="btn btn-primary btn-sm" onclick="cambiarEstado(${o.id}, 'en proceso')">Iniciar</button>
                ${btnVer}
              </div>`;
        }
        if (n === "en proceso") {
          return `<div style="display:flex;gap:6px;flex-wrap:wrap">
                <button class="btn btn-success btn-sm" onclick="cambiarEstado(${o.id}, 'completado')">Finalizar</button>
                ${btnVer}
              </div>`;
        }
        return `<div style="display:flex;gap:6px;flex-wrap:wrap">${btnVer}</div>`;
      }

      window.cambiarEstado = async function (id, nuevo) {
        try {
          const r = await fetch(`http://localhost:3001/api/ordenes/${id}/estado`, {
            method: "PATCH",
            headers: {
              "Content-Type": "application/json",
              Authorization: `Bearer ${token}`,
            },
            body: JSON.stringify({ estado: nuevo }),
          });
          const j = await r.json();
          if (!r.ok || !j?.success)
            throw new Error(j?.message || "Error al cambiar estado");
          showToast(`Estado actualizado a "${nuevo}"`);
          await cargarMisOrdenes();
        } catch (e) {
          console.error(e);
          showToast("No se pudo actualizar el estado");
        }
      };

      function pintarOrdenes() {
        const q = (buscarOrdenInput.value || "").toLowerCase().trim();
        let list = [...todasLasOrdenes];

        if (filtroEstado !== "todas")
          list = list.filter((o) => normEstado(o.estado) === filtroEstado);
        if (q) {
          list = list.filter(
            (o) =>
              String(o.numero_orden).toLowerCase().includes(q) ||
              (o.placa || "").toLowerCase().includes(q) ||
              (o.cliente_nombre || "").toLowerCase().includes(q)
          );
        }

        ordenesTbody.innerHTML = list
          .map(
            (o) => `
        <tr>
          <td>${o.numero_orden}</td>
          <td>${new Date(o.fecha_ingreso).toLocaleString()}</td>
          <td>${o.marca} ${o.modelo} (${o.placa})</td>
          <td>${o.cliente_nombre}</td>
          <td><span class="${badge(o.estado)}">${normEstado(o.estado)}</span></td>
          <td>${accionesHTML(o)}</td>
        </tr>`
          )
          .join("");
        emptyOrders.style.display = list.length ? "none" : "grid";
      }

      // Abre / cierra modal de detalle
      function openDetModal() {
        document.getElementById("detalleModal").classList.add("show");
      }
      function closeDetModal() {
        document.getElementById("detalleModal").classList.remove("show");
      }
      document
        .getElementById("detCloseBtn")
        ?.addEventListener("click", closeDetModal);
      document
        .getElementById("detCloseBtn2")
        ?.addEventListener("click", closeDetModal);
      document
        .getElementById("detalleModal")
        ?.addEventListener("click", (e) => {
          if (e.target.id === "detalleModal") closeDetModal();
        });

      function badgeClass(e) {
        const n =
          typeof normEstado === "function"
            ? normEstado(e)
            : (e || "").toLowerCase();
        if (n === "pendiente") return "badge badge-warning";
        if (n === "en proceso") return "badge badge-primary";
        if (n === "completado") return "badge badge-success";
        return "badge";
      }

      window.verDetalleOrden = async function (ordenId) {
        try {
          const token = localStorage.getItem("token");
          const r = await fetch(
            `http://localhost:3001/api/ordenes/${ordenId}/detalle`,
            {
              headers: { Authorization: `Bearer ${token}` },
            }
          );
          const dj = await r.json();
          if (!dj?.success) {
            showToast("No se pudo obtener el detalle");
            return;
          }
          const items = dj.data || [];

          let cab = null;
          try {
            const r2 = await fetch(
              `http://localhost:3001/api/ordenes/${ordenId}`,
              {
                headers: { Authorization: `Bearer ${token}` },
              }
            );
            const j2 = await r2.json();
            if (j2?.success) cab = j2.data || null;
          } catch {}

          document.getElementById("detNum").textContent = cab?.numero_orden
            ? `#${cab.numero_orden}`
            : `#${ordenId}`;
          document.getElementById("detCliente").textContent =
            cab?.cliente_nombre || "‚Äî";
          document.getElementById("detVehiculo").textContent = cab
            ? `${cab.marca || ""} ${cab.modelo || ""} (${cab.placa || ""})`.trim()
            : "‚Äî";
          document.getElementById("detFecha").textContent = cab?.fecha_ingreso
            ? new Date(cab.fecha_ingreso).toLocaleString()
            : "‚Äî";
          const detEstado = document.getElementById("detEstado");
          detEstado.className = badgeClass(cab?.estado || "pendiente");
          detEstado.textContent = cab?.estado
            ? normEstado(cab.estado)
            : "pendiente";
          document.getElementById("detObs").textContent =
            cab?.observaciones || "‚Äî";

          const detPrintBtn = document.getElementById("detImprimirBtn");
          if (detPrintBtn) {
            detPrintBtn.removeAttribute("target");
            detPrintBtn.setAttribute("href", "#");
            detPrintBtn.onclick = (e) => {
              e.preventDefault();
              window.print();
            };
          }

          const tbody = document.querySelector("#detTable tbody");
          const moneyFmt = (v) =>
            new Intl.NumberFormat("es-EC", {
              style: "currency",
              currency: "USD",
            }).format(v || 0);
          let total = 0;
          tbody.innerHTML = items
            .map((it) => {
              const sub =
                Number(it.cantidad || 0) * Number(it.precio_unitario || 0) ||
                Number(it.subtotal || 0) ||
                0;
              total += sub;
              return `
          <tr>
            <td>${it.codigo || ""}</td>
            <td>${it.descripcion || ""}</td>
            <td class="t-right">${Number(it.cantidad || 0)}</td>
            <td class="t-right">${moneyFmt(Number(it.precio_unitario || 0))}</td>
            <td class="t-right">${moneyFmt(sub)}</td>
          </tr>`;
            })
            .join("");
          document.getElementById("detTotal").textContent = moneyFmt(total);
          openDetModal();
        } catch (err) {
          console.error(err);
          showToast("No se pudo mostrar el detalle");
        }
      };

      /* ========= MODAL: carga de selects y agregar servicios ========= */
      document
        .getElementById("clienteSelect")
        .addEventListener("change", (e) => {
          const id_cliente = e.target.value;
          loadVehiculos(id_cliente);
        });
      document
        .getElementById("btnAgregarServicio")
        .addEventListener("click", () => {
          agregarServicio();
        });

      async function loadClientes() {
        try {
          const response = await fetch("/api/clientes/all", {
            headers: { Authorization: `Bearer ${token}` },
          });
          const result = await response.json();
          if (result.success) {
            clientes = result.data || [];
            populateClientesSelect();
          }
        } catch (error) {
          console.error("Error cargando clientes:", error);
        }
      }
      function populateClientesSelect() {
        const select = document.getElementById("clienteSelect");
        if (!select) return;
        select.innerHTML = '<option value="">Seleccionar cliente</option>';
        clientes.forEach((c) => {
          const opt = document.createElement("option");
          opt.value = c.id;
          const nombre =
            c.tipo === "particular"
              ? `${c.nombres || ""} ${c.apellidos || ""}`.trim()
              : c.razon_social || "Sin nombre";
          opt.textContent = `${nombre} (${c.identificacion})`;
          select.appendChild(opt);
        });
      }

      async function loadVehiculos(id_cliente = null) {
        const select = document.getElementById("vehiculoSelect");
        if (!id_cliente) {
          select.innerHTML =
            '<option value="">Primero seleccione un cliente</option>';
          select.disabled = true;
          return;
        }
        try {
          const response = await fetch(`/api/vehiculos/cliente/${id_cliente}`, {
            headers: { Authorization: `Bearer ${token}` },
          });
          const result = await response.json();
          if (result.success) {
            vehiculos = result.data || [];
            if (vehiculos.length === 0) {
              select.innerHTML =
                '<option value="">No hay veh√≠culos registrados para este cliente</option>';
              select.disabled = true;
            } else {
              select.disabled = false;
              select.innerHTML =
                '<option value="">Seleccionar veh√≠culo</option>';
              vehiculos.forEach((v) => {
                const opt = document.createElement("option");
                opt.value = v.id;
                opt.textContent = `${v.placa} - ${v.marca}`;
                select.appendChild(opt);
              });
            }
          }
        } catch (error) {
          console.error("Error cargando veh√≠culos:", error);
        }
      }

      async function loadServicios() {
        try {
          const response = await fetch("/api/servicios", {
            headers: { Authorization: `Bearer ${token}` },
          });
          const result = await response.json();
          if (result.success) {
            servicios = (result.data || []).map((s) => ({
              id: s.id,
              codigo: s.codigo,
              descripcion: s.descripcion,
              // sanea por si viene con coma
              precio_unitario: window.parseDec(s.precio_unitario || 0),
            }));
            // opcional: tambi√©n en window si lo usas en otra parte
            window.servicios = servicios;
          }
        } catch (error) {
          console.error("Error cargando servicios:", error);
          servicios = [];
          window.servicios = [];
        }
      }

      // ====== AGREGAR SERVICIO ======
      window.agregarServicio = function () {
        const container = document.getElementById("serviciosContainer");
        const noServiciosMsg = document.getElementById("noServiciosMsg");
        const totalSection = document.getElementById("totalSection");

        if (noServiciosMsg) noServiciosMsg.style.display = "none";
        if (totalSection) totalSection.style.display = "block";

        // Si a√∫n no hay datos, evita crear fila vac√≠a
        if (!Array.isArray(servicios) || servicios.length === 0) {
          showToast(
            "No hay servicios disponibles. Reintenta en unos segundos."
          );
          return;
        }

        const idx = servicioIndex++;
        const div = document.createElement("div");
        div.className = "servicio-item";

        const optionsHtml = (window.servicios || [])
          .map((s) => {
            const raw = s?.precio_unitario ?? 0;
            // sanea a n√∫mero con punto
            const p = window.parseDec
              ? window.parseDec(raw)
              : Number(String(raw).replace(",", "."));
            const precio = Number.isFinite(p) ? p : 0;
            return `<option value="${s.id}" data-precio="${precio}">
            ${s.codigo} - ${s.descripcion}
          </option>`;
          })
          .join("");

        div.innerHTML = `
      <div class="servicio-row">
        <div class="servicio-select-field">
          <label>Servicio</label>
          <select name="servicios[${idx}][id_servicio]" class="input servicio-select"
            onchange="window.cargarPrecioServicio(this, ${idx})" required>
            <option value="">Seleccionar servicio</option>
            ${optionsHtml}
          </select>
        </div>
        <div class="cantidad-field">
          <label>Cant.</label>
          <input type="number" name="servicios[${idx}][cantidad]" id="cantidad_${idx}"
            placeholder="1" class="input" min="1" value="1"
            onchange="window.calcularSubtotal(${idx})" required />
        </div>
        <div class="precio-field">
          <label>Precio</label>
          <input type="number" name="servicios[${idx}][precio_unitario]" id="precio_${idx}"
            placeholder="0.00" class="input" step="0.01" min="0"
            onchange="window.calcularSubtotal(${idx})" required />
        </div>
        <div class="accion-field">
          <button type="button" class="btn btn-outline btn-small btn-eliminar"
            onclick="window.eliminarServicio(this)">‚úñ</button>
        </div>
      </div>
      <div class="subtotal-row" id="subtotal_${idx}" style="display:none;">
        <small class="text-muted">Subtotal: $<span class="subtotal-amount">0.00</span></small>
      </div>
    `;
        container.appendChild(div);
      };

      function limpiarServicios() {
        document.getElementById("serviciosContainer").innerHTML = `
      <div class="no-servicios" id="noServiciosMsg">
        <p>No hay servicios agregados. Haz clic en "Agregar Servicio" para comenzar.</p>
      </div>`;
        const totalSection = document.getElementById("totalSection");
        if (totalSection) totalSection.style.display = "none";
        servicioIndex = 0;
        const totalElement = document.getElementById("totalGeneral");
        if (totalElement) totalElement.textContent = "0.00";
      }

      // ---------- Crear orden ----------
      if (ordenForm) {
        ordenForm.addEventListener("submit", async (e) => {
          e.preventDefault();

          const clienteSel = document.getElementById("clienteSelect");
          const vehiculoSel = document.getElementById("vehiculoSelect");

          const id_cliente = clienteSel?.value ? Number(clienteSel.value) : NaN;
          const id_vehiculo = vehiculoSel?.value
            ? Number(vehiculoSel.value)
            : NaN;
          const observaciones = ordenForm.observaciones?.value?.trim() || "";

          if (!Number.isFinite(id_cliente))
            return showToast("Selecciona un cliente.");
          if (!Number.isFinite(id_vehiculo))
            return showToast("Selecciona un veh√≠culo.");

          // --- construir detalle desde el DOM (con alias y subtotal)
          const rows = Array.from(
            document.querySelectorAll("#serviciosContainer .servicio-item")
          );
          const detalle = rows
            .map((row) => {
              const sel = row.querySelector('select[name^="servicios"]');
              const qty = row.querySelector('input[name*="[cantidad]"]');
              const prc = row.querySelector('input[name*="[precio_unitario]"]');

              const id_servicio = sel?.value ? Number(sel.value) : NaN;
              const cantidad = window.parseDec
                ? window.parseDec(qty?.value)
                : Number(qty?.value);
              const precio_unitario = window.parseDec
                ? window.parseDec(prc?.value)
                : Number(prc?.value);

              const ok =
                Number.isFinite(id_servicio) &&
                id_servicio > 0 &&
                Number.isFinite(cantidad) &&
                cantidad > 0 &&
                Number.isFinite(precio_unitario) &&
                precio_unitario >= 0;

              if (!ok) return null;

              const subtotal = cantidad * precio_unitario;
              return {
                id_servicio,
                cantidad,
                precio_unitario, // nombre A
                precio: precio_unitario, // alias B (por compatibilidad)
                subtotal,
              };
            })
            .filter(Boolean);

          if (!detalle.length) {
            showToast("Agrega al menos un servicio con cantidad y precio.");
            return;
          }

          // total de la orden
          const total = detalle.reduce((a, d) => a + (d.subtotal || 0), 0);

          // --- payload alineado con el admin
          const payload = {
            id_cliente, // ya calculado arriba en tu c√≥digo
            id_vehiculo,
            id_tecnico: null, // o el que corresponda si lo manejas aqu√≠
            estado: "pendiente",
            observaciones,
            total,
            servicios: detalle, // alias 1
            detalle_servicios: detalle, // alias 2
            detalle: detalle, // alias 3
          };

          try {
            const r = await fetch("http://localhost:3001/api/ordenes", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
                Authorization: `Bearer ${token}`,
              },
              body: JSON.stringify(payload),
            });

            let j = null;
            try {
              j = await r.json();
            } catch {}

            if (!r.ok || !j?.success) {
              const msg = (j && (j.message || j.error)) || `HTTP ${r.status}`;
              showToast("Error al guardar la orden: " + msg);
              return;
            }

            try {
              if (!j.data?.estado)
                j.data = { ...(j.data || {}), estado: "pendiente" };
            } catch {}

            // (opcional) notifica inbox admin como ya lo ten√≠as
            try {
              await fetch("/api/inbox/admin/ordenes", {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                  Authorization: `Bearer ${token}`,
                },
                body: JSON.stringify({
                  id_orden: j.id || j.data?.id,
                  motivo: "por_facturar",
                }),
              });
            } catch (e) {
              console.warn("No se pudo notificar a la bandeja del admin:", e);
            }

            cerrarModal();
            await cargarMisOrdenes();
            showToast(`Orden ${j.numero_orden || ""} creada exitosamente`);
          } catch (err) {
            console.error("Error guardando orden", err);
            showToast("Error de red al guardar la orden");
          }
        });
      }
    });
  </script>
</Layout>
